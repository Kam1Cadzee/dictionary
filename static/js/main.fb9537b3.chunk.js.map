{"version":3,"sources":["pages/Style.module.css","graphql/fragments.ts","graphql/queries.ts","typings/IUser.ts","components/AuthPage/LoginForm.tsx","components/AuthPage/SignUpForm.tsx","useHooks/withAuthRedirect.tsx","pages/AuthPage.tsx","useHooks/withProtected.tsx","useHooks/useCurrentUser.ts","typings/PartOfSpeech.ts","useHooks/usePartOfSpeech.ts","pages/UsersPage.tsx","utils/tagPartOfSpeech.tsx","components/WordsPage/TranslateContent.tsx","components/WordsPage/WordsContent.tsx","components/WordsPage/PhrasesContent.tsx","components/WordsPage/EntityCard.tsx","pages/WordsPage.tsx","pages/NotFoundPage.tsx","components/CreatePage/TableEditWords/SelectPartOfSpeech.tsx","graphql/mutation.ts","components/CreatePage/TableEditWords/TitleTableWords.tsx","utils/isEmptyObject.ts","components/CreatePage/TableEditWords/CreateTranslateOfWord.tsx","utils/generateClassName.ts","components/common/EditableTableComponent.tsx","utils/RedoHistory.ts","components/CreatePage/TableEditWords/TableEditWords.tsx","components/CreatePage/TableEditPhrase/TitleTablePhrase.tsx","components/CreatePage/TableEditPhrase/TableEditPhrase.tsx","components/CreatePage/EntityEditCard.tsx","pages/CreatePage.tsx","pages/LayoutPage.tsx","App.tsx","index.tsx"],"names":["module","exports","FRAGMENTS","user","entity","UserRole","QUERIES","LOGIN","gql","SIGNUP","CURRENT_USER","REFRESH_USER","IS_AUTH","USERS","COUNT_ENTITY","COUNT_WORDS","COUNT_TRANSLATE","GET_ENTITIES","GET_ENTITIES_BY_WORD_CLIENT","GET_PART_OF_SPEECH","GET_WORD","layout","labelCol","span","wrapperCol","tailLayout","offset","LoginForm","useMutation","update","proxy","mutationResult","writeData","data","isAuth","currentUser","login","localStorage","setItem","token","onFinish","error","values","a","variables","loginData","name","initialValues","remember","Item","label","rules","required","message","Password","type","htmlType","SignUpForm","signup","withAuthRedirect","Component","props","useQuery","fetchPolicy","onError","redirect","location","state","from","to","TabPane","Tabs","justify","align","className","css","authFull","blockAuth","defaultActiveKey","animated","inkBar","tabPane","tab","key","disabled","withProtected","pathname","PartOfSpeech","useCurrentUser","isAdmin","role","ADMIN","usePartOfSpeech","partOfSpeechDescs","columns","title","dataIndex","render","color","toUpperCase","recurse","obj","Object","keys","res","UsersPage","dataTranslate","returnPartialData","dataWords","dataEntity","users","countTranslate","countWords","countEntity","dataSource","TagPartOfSpeech","findItem","useFindPartOfSpeech","defineTagColor","Fragment","en","ua","ru","find","item","ADJ","ADV","OTHER","VERB","NOUN","CONJ","MODAL","DET","PREP","PRON","Column","Table","TranslateContent","word","translate","pagination","size","showHeader","width","tags","WordsContent","words","disconnectWords","filter","w","some","d","id","map","i","children","Text","Typography","gridStyle","textAlign","tabListNoTitle","component","phrases","p","strong","phrase","EntityCard","useState","setKey","Content","t","Grid","style","tabList","activeTabKey","onTabChange","extra","WordsPage","entities","e","NotFoundPage","status","subTitle","Button","Option","Select","tagRender","SelectPartOfSpeech","parts","bordered","suffixIcon","value","MUTATION","deleteWord","deleteTranslate","createOrUpdateWordWithTranslate","updateWordsByEntity","upsertTranslate","translatePhrase","upsertPhrase","updatePhraseByEntity","GET_ENTITIES_BY_WORD","TRANSLATE_WORD","Search","Input","ContentTitleTable","Group","onClose","onAdd","options","setOptions","mutationTranslateWord","Form","useForm","form","handleChange","setFieldsValue","handleSearch","event","preventDefault","translateWord","onSearch","placeholder","enterButton","mode","tokenSeparators","o","compact","initialValue","onChange","shape","icon","PlusOutlined","TitleTableWords","onUpdate","loadingUpdate","isShowDeleted","checkedDeleted","onPrev","onNext","disabledNext","disabledPrev","isCreate","isShow","setIsShow","onClick","LeftOutlined","RightOutlined","checkedChildren","CheckOutlined","unCheckedChildren","CloseOutlined","checked","loading","content","trigger","visible","onVisibleChange","placement","isEmptyObject","length","idWord","mutationAdd","allowClear","CreateTranslateOfWord","generateClassName","str","forEach","EditableContext","React","createContext","EditableRow","index","Provider","EditableCell","editable","record","handleSave","restProps","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","save","validateFields","console","log","childNode","margin","ref","onPressEnter","onBlur","undefined","RedoHistory","history","handlers","addHandler","push","getRevertAction","action","h","k","getAction","addAction","newAction","nextAction","prevAction","prev","revert","payload","next","isPrev","isNext","this","TableEditWords","mutationCreateWord","mutationUpdate","cache","setIsCreate","setShowDeleted","noDataWords","setNoDataWords","setDisconnectWords","truthDataWords","isShowDelete","filterTranslate","disconnectTranslate","count","isDelete","getDataOfFilter","components","body","row","cell","addDeleteWord","dis","removeDeleteWord","addDeleteTranslate","handlerDeleteTranslate","removeDeleteTranslate","handlerRemoveDeleteTranslate","handleDelete","dataDelete","idTranslate","findWord","indexWord","findIndex","indexRu","handleAdd","entityId","handleAddTranslate","handleUpdate","then","rowClassName","onCell","handleChangeType","text","isEn","onConfirm","handleReturn","RedoOutlined","danger","DeleteOutlined","mutationTranslate","TitleTablePhrase","TableEditPhrase","mutationAddPhrase","setPhrases","disconnectPhrases","deletePhrases","setDeletePhrases","filterPhrases","EntityEditCard","CreatePage","setEntities","mutationGetEntities","handleFinish","search","getEntitiesByWord","flex","Layout","Sider","itemKey","match","params","client","useApolloClient","useHistory","collapsed","setCollapsed","handleExit","reset","removeItem","replace","minHeight","collapsible","onCollapse","profile","theme","defaultSelectedKeys","PlusCircleOutlined","PieChartOutlined","UserOutlined","LogoutOutlined","path","process","linkError","graphQLErrors","networkError","operation","forward","response","notification","authLink","ApolloLink","setContext","headers","authorization","getItem","link","HttpLink","uri","InMemoryCache","ApolloClient","connectToDevTools","defaultOptions","mutate","errorPolicy","query","App","refreshUser","refresh","exact","AuthPage","LayoutPage","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fb9537b3.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authFull\":\"Style_authFull__11haa\",\"blockAuth\":\"Style_blockAuth__11LZX\",\"profile\":\"Style_profile__3YvBD\"};","import { gql } from 'apollo-boost';\n\nconst FRAGMENTS = {\n  user: `\n      name\n      lastName\n      email\n      id\n      role\n  `,\n  entity: `\n   id,\n    title,\n    irrverb {\n      form1EN,\n      form2EN,\n      form3EN,\n      ru\n    },\n    isNeededEdit,\n    isCreate,\n    words {\n      id,\n      en,\n      type,\n      disconnectTranslate {\n        id\n      }\n      translate {\n        ru,\n        id,\n        type\n      },\n    },\n    phrases {\n      id,\n      phrase,\n      ru\n    },\n    sentences {\n      id, \n      sentence,\n      ru\n    },\n    disconnectWords {\n      id\n    },\n    disconnectPhrases {\n      id\n    },\n    disconnectSentences {\n      id\n    }\n  `,\n};\n\nexport default FRAGMENTS;\n","import {gql} from 'apollo-boost';\nimport FRAGMENTS from './fragments';\n\nconst QUERIES = {\n  LOGIN: gql`\n      mutation login($loginData: LoginUserInput!) {\n          login(data: $loginData) {\n              user {\n                  ${FRAGMENTS.user}\n              }\n              token\n          }\n      }\n  `,\n  SIGNUP: gql`\n      mutation signUp($data: UserSignUpInput!) {\n          signup(data: $data) {\n              user {\n                  ${FRAGMENTS.user}\n              }\n              token\n          }\n      }\n  `,\n  CURRENT_USER: gql`\n      {\n          currentUser @client {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  REFRESH_USER: gql`\n      mutation {\n          refreshUser {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  IS_AUTH: gql`\n      {\n          isAuth @client\n      }\n  `,\n  USERS: gql`\n      query users {\n          users {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  COUNT_ENTITY: gql`\n      query countEntity {\n          aggregateEntity{\n              count\n          }\n      }\n  `,\n  COUNT_WORDS: gql`\n      query countWords {\n          aggregateWord{\n              count\n          }\n      }\n  `,\n  COUNT_TRANSLATE: gql`\n      query countTranslate {\n          aggregateTranslate{\n              count\n          }\n      }\n  `,\n  GET_ENTITIES: gql`\n      query getEntities($id: Int) {\n          entities(where: {userId: {equals: $id}, isCreate: {equals: true}}) {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n  GET_ENTITIES_BY_WORD_CLIENT: gql`\n      query getEntitiesByWord($word: String!) {\n          getEntitiesByWord(word: $word) @client {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n  GET_PART_OF_SPEECH: gql`\n      query PartOfSpeech {\n          partOfSpeechDescs {\n              id,\n              type,\n              ru,\n              ua,\n              en\n          }\n      }\n  `,\n  GET_WORD: gql`\n      query getWord($entityId: Int!) {\n          entity(where: {\n              id: $entityId\n          }) {\n              id,\n              words {\n                  id,\n                  en,\n                  type,\n                  disconnectEntities {\n                      id\n                  }\n                  translate {\n                      id,\n                      ru,\n                      type,\n                      disconnectWords {\n                          id\n                      }\n                  }\n              }\n          }\n      }\n  `\n};\n\nexport default QUERIES;\n","export interface IUser {\n  name: string;\n  lastName: string;\n  email: string;\n  id: number;\n  role: UserRole\n}\n\nexport enum UserRole {\n  ADMIN = 'ADMIN',\n  STANDARD = 'STANDARD'\n}\n","import React from 'react';\nimport { Button, Checkbox, Form, Input } from 'antd';\nimport { useMutation } from '@apollo/react-hooks';\nimport QUERIES from '../../graphql/queries';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst LoginForm = () => {\n  const [login, { data, error }] = useMutation(QUERIES.LOGIN, {\n    update: (proxy, mutationResult) => {\n      proxy.writeData({\n        data: {\n          isAuth: true,\n          currentUser: mutationResult.data.login.user\n        }\n      });\n      localStorage.setItem('token', mutationResult.data.login.token);\n    }\n  });\n\n  const onFinish = async (values: any) => {\n    await login({\n      variables: {\n        loginData: values,\n      },\n    });\n  };\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useMutation } from '@apollo/react-hooks';\nimport QUERIES from '../../graphql/queries';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst SignUpForm = () => {\n  const [signup, { data }] = useMutation(QUERIES.SIGNUP, {\n    update: (proxy, mutationResult) => {\n      proxy.writeData({\n        data: {\n          isAuth: true,\n          currentUser: mutationResult.data.login.user\n        }\n      });\n      localStorage.setItem('token', mutationResult.data.login.token);\n    }\n  });\n  const onFinish = async (values: any) => {\n    const res = await signup({\n      variables: {\n        data: values,\n      },\n    });\n  };\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Username\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Last name\"\n        name=\"lastName\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Repeat password\"\n        name=\"repeatPassword\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default SignUpForm;\n","import React from 'react';\nimport {Redirect, RouteComponentProps} from 'react-router';\nimport {useApolloClient, useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\n\n//only page component\nconst withAuthRedirect = (Component: any) => {\n  return (props: RouteComponentProps | any) => {\n    const {data} = useQuery(QUERIES.IS_AUTH, {\n      fetchPolicy: 'cache-only',\n      onError: error => {},\n\n    });\n\n    let redirect = '/main/words';\n    if(props.location.state && props.location.state.from) {\n      redirect = props.location.state.from;\n    }\n    if (data && data.isAuth) {\n      return <Redirect to={redirect}/>;\n    }\n\n    return <Component {...props} />;\n  };\n};\n\nexport default withAuthRedirect;\n","import React from 'react';\nimport { Tabs, Row, Col } from 'antd';\nimport LoginForm from '../components/AuthPage/LoginForm';\nimport SignUpForm from '../components/AuthPage/SignUpForm';\nimport css from './Style.module.css';\nimport withAuthRedirect from '../useHooks/withAuthRedirect';\n\nconst { TabPane } = Tabs;\n\nconst AuthPage = () => {\n  return (\n    <Row justify=\"center\" align=\"middle\" className={css.authFull}>\n      <Col span={6} className={css.blockAuth}>\n        <Tabs defaultActiveKey=\"1\" animated={{inkBar: true, tabPane: false}}>\n          <TabPane tab=\"Login\" key=\"1\">\n            <LoginForm/>\n          </TabPane>\n          <TabPane tab=\"Sign up\" key=\"2\" disabled >\n            <SignUpForm/>\n          </TabPane>\n        </Tabs>\n      </Col>\n    </Row>\n  )\n};\n\nexport default withAuthRedirect(AuthPage);\n","import React from 'react';\nimport {Redirect, RouteComponentProps} from 'react-router';\nimport { useQuery } from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\n\n//only page component\nconst withProtected = (Component: any) => {\n  return (props: RouteComponentProps) => {\n    const {data} = useQuery(QUERIES.IS_AUTH, {\n      fetchPolicy: 'cache-only'\n    });\n\n    if (!(data && data.isAuth)) {\n      return <Redirect to={{\n        pathname: '/',\n        state: {\n          from: props.location.pathname\n        }\n      }}/>;\n    }\n\n    return <Component {...props} />;\n  };\n};\n\nexport default withProtected;\n","import {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {IUser, UserRole} from '../typings/IUser';\n\nexport const useCurrentUser = () => {\n  const {data} = useQuery(QUERIES.CURRENT_USER, {\n    onError: error => {}\n  });\n  let user: IUser | null = null;\n  let isAdmin = false;\n  if(data && data.currentUser) {\n    user = data.currentUser;\n    isAdmin = user!.role === UserRole.ADMIN;\n  }\n  return {user, isAdmin};\n};\n","export enum PartOfSpeech {\n  ADJ = 'ADJ',\n  ADV = 'ADV',\n  CONJ = 'CONJ',\n  DET = 'DET',\n  MODAL = 'MODAL',\n  NOUN = 'NOUN',\n  PREP = 'PREP',\n  PRON = 'PRON',\n  VERB = 'VERB',\n  OTHER = 'OTHER',\n}\n\nexport interface IPartOfSpeech {\n  \"id\": number,\n  \"type\": PartOfSpeech,\n  \"ru\": string,\n  \"ua\": string,\n  \"en\": string,\n}\n","import {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {IPartOfSpeech} from '../typings/PartOfSpeech';\n\nexport const usePartOfSpeech = () => {\n  const {data} = useQuery(QUERIES.GET_PART_OF_SPEECH, {\n    fetchPolicy: 'cache-first',\n  });\n  return (data ? data.partOfSpeechDescs : []) as IPartOfSpeech[];\n};\n","import React from 'react';\nimport {Col, Descriptions, Row, Table, Tag} from 'antd';\nimport {UserRole} from '../typings/IUser';\nimport {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\n\nconst columns = [\n  {\n    title: 'Id',\n    dataIndex: 'id',\n    key: 'id',\n  },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Last name',\n    dataIndex: 'lastName',\n    key: 'lastName',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    key: 'email',\n  },\n  {\n    title: 'Role',\n    key: 'role',\n    dataIndex: 'role',\n    render: (role: UserRole) => {\n      let color = role === UserRole.ADMIN ? 'geekblue' : 'green';\n      return (\n        <Tag color={color} key={role}>\n          {role.toUpperCase()}\n        </Tag>\n      );\n    },\n  },\n];\n\nconst recurse = (obj: any, name: string) => {\n  for (const key of Object.keys(obj)) {\n    if(key === name) {\n      return obj[key];\n    }\n    if(typeof obj[key] === 'object') {\n      const res: any = recurse(obj[key], name);\n      if(res) return res;\n    }\n  }\n};\n\nconst UsersPage = () => {\n  const d = usePartOfSpeech();\n  const {data} = useQuery(QUERIES.USERS, {});\n  const {data: dataTranslate} = useQuery(QUERIES.COUNT_TRANSLATE, {\n    returnPartialData: true,\n  });\n  const {data: dataWords} = useQuery(QUERIES.COUNT_WORDS, {\n    returnPartialData: true,\n  });\n  const {data: dataEntity} = useQuery(QUERIES.COUNT_ENTITY, {\n    returnPartialData: true,\n  });\n  const users = data ? data.users : [];\n  const countTranslate = recurse(dataTranslate, 'count');\n  const countWords = recurse(dataWords, 'count');\n  const countEntity = recurse(dataEntity, 'count');\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Descriptions title=\"Vocabulary Info\">\n          {countEntity &&  <Descriptions.Item label=\"Entity\">{countEntity}</Descriptions.Item>}\n          {countWords &&  <Descriptions.Item label=\"Words\">{countWords}</Descriptions.Item>}\n          {countTranslate &&  <Descriptions.Item label=\"Translate\">{countTranslate}</Descriptions.Item>}\n        </Descriptions>\n      </Col>\n      <Col span={24}>\n      <Table columns={columns} dataSource={users}/>\n      </Col>\n    </Row>\n  )\n};\n\nexport default UsersPage;\n","import {PartOfSpeech} from '../typings/PartOfSpeech';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\nimport {Tag} from 'antd';\nimport React from 'react';\n\ninterface ITagPartOfSpeechProps {\n  type: PartOfSpeech;\n}\n\nexport const TagPartOfSpeech = ({type}: ITagPartOfSpeechProps) => {\n  const findItem = useFindPartOfSpeech(type);\n  if (typeof findItem === 'object') {\n    const color = defineTagColor(findItem.type);\n    return (\n      <React.Fragment>\n        <Tag color={color}>{findItem.en.toUpperCase()}</Tag>\n        <Tag color={color}>{findItem.ua.toUpperCase()}</Tag>\n        <Tag color={color}>{findItem.ru.toUpperCase()}</Tag>\n      </React.Fragment>\n    )\n  }\n\n  return <Tag color={defineTagColor(type)}>{type.toUpperCase()}</Tag>\n};\nexport const useFindPartOfSpeech = (type: PartOfSpeech) => {\n  const parts = usePartOfSpeech();\n  const findItem = parts.find(item => item.type === type);\n  if (findItem === null) {\n    return type;\n  }\n  return findItem;\n};\n\nexport const defineTagColor = (type: PartOfSpeech) => {\n  switch (type) {\n    case PartOfSpeech.ADJ:\n      return 'magenta';\n    case PartOfSpeech.ADV:\n      return 'gold';\n    case PartOfSpeech.OTHER:\n      return 'default';\n    case PartOfSpeech.VERB:\n      return 'geekblue';\n    case PartOfSpeech.NOUN:\n      return 'green';\n    case PartOfSpeech.CONJ:\n      return 'lime';\n    case PartOfSpeech.MODAL:\n      return 'blue';\n    case PartOfSpeech.DET:\n      return 'default';\n    case PartOfSpeech.PREP:\n      return 'cyan';\n    case PartOfSpeech.PRON:\n      return 'purple';\n  }\n  return 'default';\n}\n","import React from 'react';\nimport {IWord} from '../../typings/IEntity';\nimport {Table} from 'antd';\nimport {TagPartOfSpeech} from '../../utils/tagPartOfSpeech';\n\nconst { Column } = Table;\n\ninterface ITranslateContentProps {\n  word: IWord;\n}\n\nconst TranslateContent = ({word}: ITranslateContentProps) => {\n  return (\n    <Table dataSource={word.translate} pagination={false} size={'small'} showHeader={false}>\n      <Column title=\"RU\" dataIndex=\"ru\" key=\"ru\" width=\"65%\" />\n      <Column\n        width=\"35%\"\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        render={tags => {\n          return <TagPartOfSpeech type={tags} />\n        }}\n      />\n    </Table>\n  )\n};\n\nexport default TranslateContent;\n","import React from 'react';\nimport { IDeleteSmth, IWord } from '../../typings/IEntity';\nimport { Table } from 'antd';\nimport { TagPartOfSpeech } from '../../utils/tagPartOfSpeech';\n\nconst { Column } = Table;\n\ninterface IWordsContentProps {\n  words: IWord[];\n  disconnectWords: IDeleteSmth[];\n}\nconst WordsContent = ({ words, disconnectWords }: IWordsContentProps) => {\n  const data = words\n    .filter((w) => !disconnectWords.some((d) => d.id === w.id!))\n    .map((w, i) => ({\n      key: w.id,\n      en: w.en,\n      type: w.type,\n      children: w.translate,\n    }));\n\n  return (\n    <Table\n      dataSource={data}\n      pagination={false}\n      size={'small'}\n      showHeader={false}\n    >\n      <Column title=\"EN\" dataIndex=\"en\" key=\"en\" width=\"35%\" />\n      <Column title=\"RU\" dataIndex=\"ru\" key=\"ru\" width=\"35%\" />\n      <Column\n        width=\"30%\"\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        render={(tags) => {\n          return <TagPartOfSpeech type={tags} />;\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default WordsContent;\n","import React from 'react';\nimport {IPhrase} from '../../typings/IEntity';\nimport {Card, Col, Row} from 'antd';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\nconst gridStyle: any = {\n  width: '33.333333%',\n  textAlign: 'center'\n};\n\ninterface IPhrasesContentProps {\n  phrases: IPhrase[]\n}\nconst PhrasesContent = ({phrases}: IPhrasesContentProps) => {\n\n  return (\n    <Row>\n      {\n        phrases.map(p => {\n          return (\n            <>\n              <Col span={12}>\n                <Text strong>{p.phrase}</Text>\n                  <br/>\n                <Text type=\"secondary\">{p.ru}</Text>\n              </Col>\n            </>\n          )\n        })\n      }\n    </Row>\n  )\n};\n\nexport default PhrasesContent;\n","import React, {useState} from 'react';\nimport {Button, Card} from 'antd';\nimport {IEntity} from '../../typings/IEntity';\nimport TranslateContent from './TranslateContent';\nimport WordsContent from './WordsContent';\nimport PhrasesContent from './PhrasesContent';\n\nconst gridStyle: any = {\n  width: '50%',\n  textAlign: 'center'\n};\n\nconst tabListNoTitle = [\n  {\n    key: 'translate',\n    tab: 'Translate',\n    component: TranslateContent\n  },\n  {\n    key: 'words',\n    tab: 'Words',\n    component: WordsContent\n  },\n  {\n    key: 'phrases',\n    tab: 'Phrases',\n    component: PhrasesContent\n  },\n  {\n    key: 'sentences',\n    tab: 'Sentences',\n    component: TranslateContent\n  },\n];\n\ninterface IEntityCardProps {\n  entity: IEntity;\n}\nconst EntityCard = ({entity}:IEntityCardProps) => {\n  const [key, setKey] = useState('translate');\n\n  const onTabChange = (key: string) => {\n    setKey(key);\n  };\n\n\n  const word = entity.words.find(w => w.en === entity.title)!;\n  const words = entity.words.filter(w => w.en !== entity.title);\n  const Content = tabListNoTitle.find(t => t.key === key)!.component;\n  return (\n    <Card.Grid style={gridStyle}>\n      <Card\n        tabList={tabListNoTitle}\n        activeTabKey={key}\n        onTabChange={onTabChange}\n        size={'small'}\n        title={entity.title}\n        extra={<Button>Edit</Button>}\n      >\n        <Content word={word} disconnectWords={entity.disconnectWords} words={words} phrases={entity.phrases} />\n      </Card>\n    </Card.Grid>\n  )\n};\n\nexport default EntityCard;\n","import React, {useState} from 'react';\nimport {Card, Col, Row} from 'antd';\nimport {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {useCurrentUser} from '../useHooks/useCurrentUser';\nimport {IEntity} from '../typings/IEntity';\nimport EntityCard from '../components/WordsPage/EntityCard';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\n\n\nconst WordsPage = () => {\n  const d = usePartOfSpeech();\n  const {user} = useCurrentUser();\n  const {data} = useQuery(QUERIES.GET_ENTITIES, {\n    variables: {\n      id: user!.id\n    },\n\n  });\n  const entities: IEntity[] = data ? data.entities : [];\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Card title=\"Vocabulary\" size={'small'}>\n          {\n            entities.map(e => {\n              return (\n                <EntityCard key={e.id} entity={e}/>\n              )\n            })\n          }\n        </Card>\n      </Col>\n    </Row>\n  )\n};\n\nexport default WordsPage;\n","import React from 'react';\nimport {Button, Result} from 'antd';\nimport {Link} from 'react-router-dom';\n\nconst NotFoundPage = () => {\n  return <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"Sorry, the page you visited does not exist.\"\n    extra={<Link to=\"/main/words\" component={Button} type=\"primary\">Back Home</Link>}\n  />\n};\n\nexport default NotFoundPage;\n","import React from 'react';\nimport { TagPartOfSpeech } from '../../../utils/tagPartOfSpeech';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib/select';\nimport { usePartOfSpeech } from '../../../useHooks/usePartOfSpeech';\nimport { PartOfSpeech } from '../../../typings/PartOfSpeech';\n\nconst { Option } = Select;\n\nfunction tagRender(props: any) {\n  const { label } = props;\n\n  return <TagPartOfSpeech type={label} />;\n}\nconst SelectPartOfSpeech = (props: SelectProps<PartOfSpeech>) => {\n  const parts = usePartOfSpeech();\n\n  return (\n    <Select\n      tagRender={tagRender}\n      style={{ width: '100%' }}\n      bordered={false}\n      suffixIcon={null}\n      {...props}\n    >\n      {parts.map((p) => {\n        return (\n          <Option value={p.type} key={p.type}>\n            <TagPartOfSpeech type={p.type} />\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n\nexport default SelectPartOfSpeech;\n","import {gql} from 'apollo-boost';\nimport FRAGMENTS from './fragments';\n\nexport const MUTATION = {\n  deleteWord: gql`\n      mutation deleteWord($idEntity: Int!, $idWord: Int!) {\n          updateWord(data: {\n              disconnectEntities: {\n                  connect: {\n                      id: $idEntity\n                  }\n              }\n          }, where: {id: $idWord}) {\n              id\n          }\n      }\n  `,\n  deleteTranslate: gql`\n      mutation deleteTranslate($idTransalte: Int!, $idWord: Int!) {\n          updateWord(data: {\n              disconnectTranslate: {\n                  connect: {\n                      id: $idTransalte\n                  }\n              }\n          }, where: {\n              id: $idWord\n          }) {\n              id,\n              disconnectTranslate {\n                  id\n              }\n          }\n      }\n  `,\n  createOrUpdateWordWithTranslate: gql`\n      mutation createOrUpdateWordWithTranslate($entityId: Float!,$type: PartOfSpeech!, $en: String!, $translate: [String!]!) {\n          createOrUpdateWordWithTranslate(entityId: $entityId, type: $type, en: $en, translate: $translate) {\n              id,\n              en,\n              type,\n              disconnectTranslate {\n                  id\n              },\n              translate {\n                  id,\n                  ru,\n                  type\n              }\n          }\n      }\n  `,\n  updateWordsByEntity: gql`\n      mutation updateWordsByEntity($data: TranslateWordWithParseInput!) {\n          updateWordsByEntity(data: $data)\n      }\n  `,\n  upsertTranslate: gql`\n      mutation upsertTranslate($idWord: Int!, $ru: String!) {\n          upsertTranslate(where: {\n              ru: $ru\n          }, create: {\n              ru: $ru,\n              type: OTHER,\n              words: {\n                  connect: {\n                      id: $idWord\n                  }\n              }\n          },\n              update: {\n                  words: {\n                      connect: {\n                          id: $idWord\n                      }\n                  }\n              }) {\n              id,\n              ru,\n              type,\n          }\n      }\n  `,\n  translatePhrase: gql`\n      mutation translatePhrase($phrase: String!, $entity: String!) {\n          translatePhrase(phrase: $phrase, entity: $entity) {\n              phrase,\n              ru\n          }\n      }\n  `,\n  upsertPhrase: gql`\n      mutation upsertPhrase($phrase: String!, $ru: String!, $entityId: Int!) {\n          upsertPhrase(where: {\n              phrase: $phrase\n          }, create: {\n              phrase: $phrase,\n              ru: $ru,\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }, update: {\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }) {\n              id,\n              phrase,\n              ru\n          }\n      }\n  `,\n  updatePhraseByEntity: gql`\n      mutation updatePhraseByEntity($data: UpdatePhrasesInput!) {\n          updatePhraseByEntity(data: $data)\n      }\n  `,\n  GET_ENTITIES_BY_WORD: gql`\n      mutation getEntitiesByWord($word: String!) {\n          getEntitiesByWord(word: $word) {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n\n  TRANSLATE_WORD: gql`\n      mutation translateWord($word: String!, $entity: String!) {\n          translateWord(word: $word, entity: $entity) {\n              type,\n              translate {\n                  type,\n                  ru\n              }\n          }\n      }\n  `,\n};\n","import React, {useState} from 'react';\nimport {Button, Form, Input, Popover, Row, Select, Switch} from 'antd';\nimport {CheckOutlined, CloseOutlined, RightOutlined, PlusOutlined, LeftOutlined} from '@ant-design/icons';\nimport SelectPartOfSpeech from './SelectPartOfSpeech';\nimport {PartOfSpeech} from '../../../typings/PartOfSpeech';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\n\nconst {Search} = Input;\nconst {Option} = Select;\nconst {Group} = Button;\n\ninterface ITitleTableProps {\n  onAdd: any;\n  onUpdate: any;\n  loadingUpdate: boolean;\n  disabled: boolean;\n  isShowDeleted: boolean,\n  checkedDeleted: (value: boolean) => any;\n  onPrev: any;\n  onNext: any;\n  disabledPrev: boolean;\n  disabledNext: boolean;\n  entity: string;\n  isCreate: boolean;\n}\n\ninterface IContentTitleTableProps {\n  onAdd: any;\n  onClose: any;\n  entity: string;\n}\n\nconst ContentTitleTable = ({onClose, onAdd, entity}: IContentTitleTableProps) => {\n  const [options, setOptions] = useState([]);\n  const [mutationTranslateWord] = useMutation(MUTATION.TRANSLATE_WORD);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    onAdd(values);\n    onClose();\n  };\n\n  const handleChange = (value: PartOfSpeech) => {\n    form.setFieldsValue({type: value});\n  };\n\n  const handleSearch = async (value: string, event: any) => {\n    event.preventDefault();\n    if (value === '') return;\n    const res = await mutationTranslateWord({\n      variables: {\n        word: value,\n        entity\n      }\n    });\n\n    if(res.data === null) return ;\n    const translateWord: any = res.data.translateWord;\n    setOptions(translateWord.translate.map((t: any) => t.ru));\n    form.setFieldsValue({\n      translate: translateWord.translate.map((t: any) => t.ru),\n    });\n    handleChange(translateWord.type);\n  };\n\n  return (\n    <Form name=\"basic\" onFinish={onFinish} form={form}>\n      <Form.Item\n        name=\"en\"\n        rules={[{required: true, message: 'Please input your username!'}]}\n      >\n        <Search onSearch={handleSearch} placeholder=\"Word\" enterButton/>\n      </Form.Item>\n      <Form.Item\n        name=\"translate\"\n        rules={[{required: true, message: 'Please input your username!'}]}\n      >\n        <Select mode=\"tags\" tokenSeparators={[',']}>\n          {options.map((o) => {\n            return <Option value={o}>{o}</Option>;\n          })}\n        </Select>\n      </Form.Item>\n      <Input.Group compact size=\"small\">\n        <Form.Item\n          name=\"type\"\n          rules={[{required: true, message: 'Please input your username!'}]}\n          initialValue={PartOfSpeech.OTHER}\n        >\n          <SelectPartOfSpeech onChange={handleChange}/>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            size=\"large\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            shape=\"circle\"\n            icon={<PlusOutlined/>}\n          />\n        </Form.Item>\n      </Input.Group>\n    </Form>\n  );\n};\n\nconst TitleTableWords = ({\n                           onAdd,\n                           onUpdate,\n                           loadingUpdate,\n                           disabled,\n                           isShowDeleted,\n                           checkedDeleted,\n                           onPrev,\n                           onNext,\n                           disabledNext,\n                           disabledPrev,\n                           entity,\n                           isCreate\n                         }: ITitleTableProps) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleOk = () => {\n    setIsShow(false);\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setIsShow(visible);\n  };\n  return (\n    <Row justify=\"space-between\">\n      <div>\n        <Button\n          size=\"small\"\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={onPrev}\n          disabled={disabledPrev}\n          icon={<LeftOutlined />}\n        />\n        <Button\n          size=\"small\"\n          shape=\"circle\"\n          type=\"primary\"\n          onClick={onNext}\n          disabled={disabledNext}\n          icon={<RightOutlined />}\n        />\n        <Switch\n          checkedChildren={<CheckOutlined/>}\n          unCheckedChildren={<CloseOutlined/>}\n          checked={isShowDeleted}\n          onChange={checked => checkedDeleted(checked)}\n        />\n        Show deleted\n      </div>\n      <Button.Group>\n        <Button\n          onClick={onUpdate}\n          type=\"primary\"\n          disabled={disabled || loadingUpdate}\n          loading={loadingUpdate}\n        >\n          {isCreate ? 'Update' : 'Create'}\n        </Button>\n        <Popover\n          content={<ContentTitleTable onClose={handleOk} onAdd={onAdd} entity={entity}/>}\n          trigger=\"click\"\n          visible={isShow}\n          onVisibleChange={handleVisibleChange}\n          placement=\"rightBottom\"\n        >\n          <Button onClick={() => setIsShow(true)}>Add word</Button>\n        </Popover>\n      </Button.Group>\n    </Row>\n  );\n};\n\nexport default TitleTableWords;\n","export const isEmptyObject = (obj: any) => {\n  return Object.keys(obj).length === 0;\n};\n","import React, { useState } from 'react';\nimport { Button, Popover, Input, Tooltip } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { ITranslate } from '../../../typings/IEntity';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MUTATION } from '../../../graphql/mutation';\n\nconst { Search } = Input;\n\ninterface IContent {\n  onClose: any;\n  idWord: number;\n  onAdd: (idWord: number, data: ITranslate) => any;\n}\nconst Content = ({ onClose, idWord, onAdd }: IContent) => {\n  const [mutationAdd, { loading }] = useMutation(MUTATION.upsertTranslate);\n  const handleSearch = async (value: string) => {\n    if (value === '') return;\n    const res = await mutationAdd({\n      variables: {\n        idWord,\n        ru: value,\n      },\n    });\n    const data: ITranslate = res.data.upsertTranslate;\n    onAdd(idWord, data);\n    onClose();\n  };\n\n  return (\n    <Search\n      placeholder=\"input search text\"\n      onSearch={handleSearch}\n      allowClear\n      enterButton\n      loading={loading}\n    />\n  );\n};\n\ninterface IAddTranslateProps {\n  idWord: number;\n  onAdd: (idWord: number, data: ITranslate) => any;\n}\nconst CreateTranslateOfWord = ({ idWord, onAdd }: IAddTranslateProps) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleClose = () => {\n    setIsShow(false);\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setIsShow(visible);\n  };\n\n  return (\n    <Popover\n      content={<Content onClose={handleClose} idWord={idWord} onAdd={onAdd} />}\n      trigger=\"click\"\n      visible={isShow}\n      onVisibleChange={handleVisibleChange}\n      placement=\"rightBottom\"\n    >\n      <Button\n        size=\"middle\"\n        shape=\"circle\"\n        onClick={() => setIsShow(true)}\n        icon={<PlusOutlined />}\n      />\n    </Popover>\n  );\n};\n\nexport default CreateTranslateOfWord;\n","export const generateClassName = (name: string, options: {\n  [name: string]: boolean;\n}) => {\n  let str = name;\n  Object.keys(options).forEach(key => {\n    if(options[key]) {\n      str = str + ' ' + key;\n    }\n  });\n  return str;\n};\n","import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {Form, Input} from 'antd';\nimport {generateClassName} from '../../utils/generateClassName';\nimport './table.css';\n\n\nconst EditableContext = React.createContext(null as any);\n\nexport const EditableRow = ({index, ...props}: any) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\nexport const EditableCell = ({\n                        title,\n                        editable,\n                        children,\n                        dataIndex,\n                        record,\n                        handleSave,\n                        ...restProps\n                      }: any) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef: any = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async (e: any) => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({...record, ...values, dataIndex});\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save}/>\n      </Form.Item>\n    ) : (\n      <div\n        className={generateClassName('editable-cell-value-wrap', {\n          'cell-ru': dataIndex === 'ru'\n        })}\n        onClick={toggleEdit}\n      >\n        {children}\n      </div>\n    );\n  }\n  if (dataIndex === 'en' && record.children === undefined) return null;\n  if (dataIndex === 'ru' && record.children) return null;\n  return <td {...restProps}>{childNode}</td>;\n};\n","export class RedoHistory {\n  private history: IAction | null = null;\n  private current: IAction | null = null;\n  private handlers: any[] = [];\n\n  constructor() {\n    this.current = this.history = {\n      prevAction: null,\n      payload: '',\n      action: '',\n      nextAction: null,\n    }\n  }\n\n  public addHandler = (obj: any) => {\n    this.handlers.push(obj);\n  };\n\n  private getRevertAction = (action: string) => {\n    const findItem = this.handlers.find(h => {\n      return Object.keys(h).some(k => k === action)\n    });\n\n    const findName = Object.keys(findItem).filter(k => k !== action)[0];\n    return findItem[findName];\n  }\n  private getAction = (action: string) => {\n    const findItem = this.handlers.find(h => {\n      return Object.keys(h).some(k => k === action)\n    });\n\n    return findItem[action];\n  }\n\n  public addAction = (action: IActionData) => {\n    this.history = this.current;\n    const newAction: IAction = {\n      nextAction: null,\n      prevAction: this.history,\n      ...action\n    };\n    this.history!.nextAction = newAction;\n    this.history = newAction;\n    this.current = this.history;\n  }\n\n  public prev = () => {\n    if (this.current === null || this.current.prevAction === null) {\n      return;\n    }\n    const revert = this.getRevertAction(this.current!.action);\n    revert(this.current!.payload);\n    this.current = this.current!.prevAction;\n  }\n\n  public next = () => {\n    if (this.current === null || this.current.nextAction === null) {\n      return;\n    }\n    this.current = this.current!.nextAction;\n    const action = this.getAction(this.current!.action);\n    action(this.current!.payload);\n  }\n\n  public isPrev = () => {\n    return this.current !== null ? this.current.prevAction !== null : false;\n  }\n\n  public isNext = () => {\n    return this.current !== null ? this.current.nextAction !== null : false;\n  }\n}\n\n\ninterface IAction extends IActionData {\n  //revertAction: string;\n  //\n  nextAction: IAction | null;\n  prevAction: IAction | null;\n}\n\ninterface IActionData {\n  action: string;\n  payload: any;\n}\n","import React, {useEffect, useRef, useState} from 'react';\nimport { Button, Col, Popconfirm, Row, Table, Tooltip } from 'antd';\nimport TitleTableWords from './TitleTableWords';\nimport { isEmptyObject } from '../../../utils/isEmptyObject';\nimport { PartOfSpeech } from '../../../typings/PartOfSpeech';\nimport SelectPartOfSpeech from './SelectPartOfSpeech';\nimport CreateTranslateOfWord from './CreateTranslateOfWord';\nimport { IDeleteSmth, ITranslate, IWord } from '../../../typings/IEntity';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MUTATION } from '../../../graphql/mutation';\nimport { EditableCell, EditableRow } from '../../common/EditableTableComponent';\nimport { DeleteOutlined, RedoOutlined } from '@ant-design/icons';\nimport {RedoHistory} from '../../../utils/RedoHistory';\n\nconst { Column } = Table;\n\ninterface ITableEditWordsProps {\n  words: IWord[];\n  disconnectWords: IDeleteSmth[];\n  entityId: number;\n  title: string;\n  isCreate: boolean;\n}\n\ninterface ICreateWord {\n  en: string;\n  translate: string[];\n  type: PartOfSpeech;\n}\ninterface IDeleteTranslate {idWord: number, idTranslate?: number}\ninterface IDataColumn {\n  key: number;\n  en: string;\n  type: PartOfSpeech;\n  children: IDataChildColumn[];\n  dataIndex: string;\n  isDelete: boolean;\n}\n\ninterface IDataChildColumn {\n  key: number;\n  ru: string;\n  type: PartOfSpeech;\n  count: number;\n  idWord: number;\n  dataIndex: string;\n  isDelete: boolean;\n}\n\ninterface ICache {\n  [id: string]: IWord;\n}\n\nconst getDataOfFilter = (words: IWord[], disconnectWords: IDeleteSmth[], isShowDelete: boolean) => {\n  return words\n    .filter((w) => !(isShowDelete ? [] : disconnectWords).some((d) => d.id === w.id!))\n    .map((w, i) => {\n\n      const filterTranslate = isShowDelete ? w.translate : w.translate.filter(\n        (t) => !w.disconnectTranslate.some((d) => d.id === t.id),\n      );\n      const count = w.translate.filter(\n        (t) => !w.disconnectTranslate.some((d) => d.id === t.id)).length;\n\n      return {\n        key: w.id || i,\n        en: w.en,\n        type: w.type,\n        isDelete: isShowDelete ? disconnectWords.some(d => d.id === w.id) : false,\n        children: filterTranslate.map((t, index) => ({\n          key: t.id || index,\n          ru: t.ru,\n          type: t.type,\n          count,\n          idWord: w.id,\n          isDelete: isShowDelete ? w.disconnectTranslate.some(d => d.id === t.id) : false,\n        })),\n      };\n    });\n};\nconst TableEditWords = (props: ITableEditWordsProps) => {\n  const [mutationCreateWord] = useMutation(\n    MUTATION.createOrUpdateWordWithTranslate,\n  );\n  const [mutationUpdate, { loading: loadingUpdate }] = useMutation(\n    MUTATION.updateWordsByEntity,\n  );\n  const cache = useRef({} as ICache);\n  const history = useRef(new RedoHistory());\n  const [isCreate, setIsCreate] = useState(props.isCreate);\n  const [isShowDeleted, setShowDeleted] = useState(false);\n  const [noDataWords, setNoDataWords] = useState(props.words);\n  const [disconnectWords, setDisconnectWords] = useState(props.disconnectWords);\n  const truthDataWords = getDataOfFilter(noDataWords, disconnectWords, isShowDeleted);\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  useEffect(() => {\n    history.current.addHandler({\n      addDeleteWord: (id: number) => {\n        setDisconnectWords((dis) => {\n          return [...dis, { id }];\n        });\n      },\n      removeDeleteWord: (id: number) => {\n        setDisconnectWords((dis) => {\n          return dis.filter(d => d.id !== id);\n        });\n      }\n    });\n    history.current.addHandler({\n      addDeleteTranslate: (obj: IDeleteTranslate) => {\n        handlerDeleteTranslate(obj);\n      },\n      removeDeleteTranslate: (obj: IDeleteTranslate) => {\n        handlerRemoveDeleteTranslate(obj);\n      }\n    })\n  }, []);\n  const handleDelete = async (dataDelete: IDataColumn & IDataChildColumn) => {\n    if (dataDelete.children) {\n      history.current.addAction({\n        action: 'addDeleteWord',\n        payload: dataDelete.key\n      });\n      setDisconnectWords((dis) => {\n        return [...dis, { id: dataDelete.key }];\n      });\n    } else {\n      history.current.addAction({\n        action: 'addDeleteTranslate',\n        payload: {idTranslate: dataDelete.key, idWord: dataDelete.idWord}\n      });\n      handlerDeleteTranslate({idTranslate: dataDelete.key, idWord: dataDelete.idWord});\n    }\n  };\n  const handlerDeleteTranslate = ({idTranslate, idWord}: IDeleteTranslate) => {\n    setNoDataWords(words => {\n      const findWord = words.find((w) => w.id === idWord)!;\n      findWord.disconnectTranslate = [\n        ...findWord.disconnectTranslate,\n        { id: idTranslate! },\n      ];\n      cache.current[idWord] = findWord;\n      return [...words]\n    })\n  };\n  const handleSave = (row: IDataColumn & IDataChildColumn) => {\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex(\n        (w) => w.id === (row.idWord || row.key),\n      )!;\n      if (row.dataIndex === 'en') {\n        words[indexWord].en = row.en;\n      } else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === row.key,\n        )!;\n        words[indexWord].translate[indexRu].ru = row.ru;\n      }\n      cache.current[row.idWord || row.key] = words[indexWord];\n      return [...words];\n    });\n  };\n\n  const handleChangeType = (type: PartOfSpeech, id: number, idWord: number) => {\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex((w) => w.id === (idWord || id))!;\n      if (!idWord) {\n        words[indexWord].type = type;\n      } else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === id,\n        )!;\n        words[indexWord].translate[indexRu].type = type;\n      }\n      cache.current[idWord || id] = words[indexWord];\n      return [...words];\n    });\n  };\n\n  const handleAdd = async (values: ICreateWord) => {\n    const res = await mutationCreateWord({\n      variables: {\n        entityId: props.entityId,\n        type: values.type,\n        en: values.en,\n        translate: values.translate,\n      },\n    });\n    const data: IWord = res.data.createOrUpdateWordWithTranslate;\n    history.current.addAction({\n      payload: data.id,\n      action: 'removeDeleteWord'\n    });\n    setNoDataWords((words) => {\n      return [...words, data];\n    });\n  };\n\n  const handleAddTranslate = (idWord: number, data: ITranslate) => {\n    const findIndex = noDataWords.findIndex((w) => w.id === idWord);\n    const index = noDataWords[findIndex].translate.findIndex(\n      (t) => t.id === data.id,\n    );\n    if (index === -1) {\n      noDataWords[findIndex].translate.push(data);\n      setNoDataWords([...noDataWords]);\n    }\n  };\n\n  const handleUpdate = () => {\n    mutationUpdate({\n      variables: {\n        data: {\n          entityId: props.entityId,\n          words: Object.values(cache.current).map((w) => ({\n            type: w.type,\n            id: w.id,\n            disconnectTranslate: w.disconnectTranslate.map((d) => d.id),\n            translate: w.translate.map((t) => ({\n              id: t.id,\n              type: t.type,\n              ru: t.ru,\n            })),\n          })),\n          disconnectWords: disconnectWords.map((d) => d.id),\n        },\n      },\n    }).then((res) => {\n      cache.current = {};\n      setIsCreate(true);\n    });\n  };\n\n  const handleReturn = ({idTranslate, idWord}:{idWord: number, idTranslate?: number}) => {\n    if(idTranslate) {\n      history.current.addAction({\n        action: 'removeDeleteTranslate',\n        payload: {idTranslate, idWord}\n      });\n      handlerRemoveDeleteTranslate({idTranslate, idWord});\n    }\n    else {\n      history.current.addAction({\n        action: 'removeDeleteWord',\n        payload: idWord\n      });\n      setDisconnectWords(dis => {\n        return dis.filter(d => d.id !== idWord);\n      })\n    }\n  };\n\n  const handlerRemoveDeleteTranslate = ({idWord, idTranslate}: IDeleteTranslate) => {\n    setNoDataWords(words => {\n      const findIndex = words.findIndex(w => w.id === idWord);\n      words[findIndex].disconnectTranslate = words[findIndex].disconnectTranslate.filter(d => d.id !== idTranslate);\n      return [...words];\n    })\n  };\n\n  return (\n    <Table\n      bordered={false}\n      showHeader={false}\n      components={components}\n      dataSource={truthDataWords}\n      pagination={false}\n      size={'small'}\n      rowClassName={() => 'editable-row'}\n      title={() => (\n        <TitleTableWords\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          loadingUpdate={loadingUpdate}\n          disabled={isCreate ? isEmptyObject(cache.current) : false}\n          isShowDeleted={isShowDeleted}\n          checkedDeleted={setShowDeleted}\n          disabledPrev={!history.current.isPrev()}\n          disabledNext={!history.current.isNext()}\n          onPrev={history.current.prev}\n          onNext={history.current.next}\n          entity={props.title}\n          isCreate={isCreate}\n        />\n      )}\n    >\n      <Column\n        title=\"EN\"\n        dataIndex=\"en\"\n        key=\"en\"\n        width=\"40%\"\n        onCell={(record) => ({\n          record,\n          dataIndex: 'en',\n          title: 'EN',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"RU\"\n        dataIndex=\"ru\"\n        key=\"ru\"\n        width=\"45%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'ru',\n          title: 'RU',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        width=\"15%\"\n        render={(\n          type: PartOfSpeech,\n          record: IDataColumn & IDataChildColumn,\n        ) => {\n          return (\n            <SelectPartOfSpeech\n              value={type}\n              onChange={(type) =>\n                handleChangeType(type, record.key, record.idWord)\n              }\n            />\n          );\n        }}\n      />\n      <Column\n        title=\"Operation\"\n        dataIndex=\"operation\"\n        render={(text: any, record: IDataColumn & IDataChildColumn) => {\n          const isEn = !record.idWord;\n          const idWord = isEn ? record.key : record.idWord!;\n          const idTranslate = isEn ? undefined : record.key;\n\n          if(record.isDelete) {\n            return (\n              <Popconfirm\n                title=\"Sure to return?\"\n                onConfirm={() => handleReturn({idWord, idTranslate})}\n              >\n                <Button\n                  size=\"small\"\n                  shape=\"circle-outline\"\n                  icon={<RedoOutlined />}\n                />\n              </Popconfirm>\n            )\n          }\n          if (record.count && record.count === 1) {\n            return null;\n          }\n\n          return (\n            <Row align=\"middle\">\n              {isEn && (\n\n                  <CreateTranslateOfWord\n                    idWord={record.key}\n                    onAdd={handleAddTranslate}\n                  />\n              )}\n              <Popconfirm\n                title=\"Sure to delete?\"\n                onConfirm={() => handleDelete({ ...record })}\n              >\n                <Button\n                  danger\n                  size=\"small\"\n                  shape=\"circle\"\n                  icon={<DeleteOutlined />}\n                />\n              </Popconfirm>\n            </Row>\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default TableEditWords;\n","import React, { useState } from 'react';\nimport { Button, Form, Popover, Row } from 'antd';\nimport { Input } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {IPhrase} from '../../../typings/IEntity';\n\nconst { Search } = Input;\n\ninterface ITitleTableProps {\n  onAdd: any;\n  onUpdate: any;\n  loadingUpdate: boolean;\n  disabled: boolean;\n  entity: string;\n  isCreate: boolean;\n}\n\ninterface IContentTitleTableProps {\n  onAdd: any;\n  onClose: any;\n  entity: string;\n}\n\nconst ContentTitleTable = ({ onClose, onAdd, entity }: IContentTitleTableProps) => {\n  const [mutationTranslate, {loading}] = useMutation(MUTATION.translatePhrase);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    onAdd(values);\n    onClose();\n  };\n\n  const handleSearch = async (value: string, event: any) => {\n    event.preventDefault();\n    const res = await mutationTranslate({\n      variables: {\n        phrase: value,\n        entity\n      }\n    });\n    if(res.data === null) return;\n    const phrase: IPhrase = res.data.translatePhrase;\n    form.setFieldsValue({\n      ru: phrase.ru\n    })\n  };\n\n  return (\n    <Form name=\"basic\" onFinish={onFinish} form={form}>\n      <Form.Item\n        name=\"phrase\"\n        rules={[{ required: true, message: 'Please input your phrase!' }]}\n      >\n        <Search onSearch={handleSearch} placeholder=\"Phrase\" enterButton loading={loading} />\n      </Form.Item>\n      <Input.Group compact size=\"default\">\n        <Form.Item\n          name=\"ru\"\n          rules={[{ required: true, message: 'Please input your username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" icon={<PlusOutlined />} />\n        </Form.Item>\n      </Input.Group>\n    </Form>\n  );\n};\nconst TitleTablePhrase = ({\n  disabled,\n  onUpdate,\n  onAdd,\n  loadingUpdate,\n  entity,\n  isCreate\n}: ITitleTableProps) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleOk = () => {\n    setIsShow(false);\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setIsShow(visible);\n  };\n\n  return (\n    <Row justify=\"end\">\n      <Button.Group>\n        <Button\n          onClick={onUpdate}\n          type=\"primary\"\n          disabled={disabled || loadingUpdate}\n          loading={loadingUpdate}\n        >\n          {isCreate ? 'Update' : 'Create'}\n        </Button>\n        <Popover\n          content={<ContentTitleTable onClose={handleOk} onAdd={onAdd} entity={entity} />}\n          trigger=\"click\"\n          visible={isShow}\n          onVisibleChange={handleVisibleChange}\n          placement=\"rightBottom\"\n        >\n          <Button onClick={() => setIsShow(true)}>Add phrase</Button>\n        </Popover>\n      </Button.Group>\n    </Row>\n  );\n};\n\nexport default TitleTablePhrase;\n","import React, { useRef, useState } from 'react';\nimport { Button, Col, Popconfirm, Row, Table, Tooltip } from 'antd';\nimport { EditableCell, EditableRow } from '../../common/EditableTableComponent';\nimport { IDeleteSmth, IPhrase } from '../../../typings/IEntity';\nimport { DeleteOutlined } from '@ant-design/icons';\nimport TitleTablePhrase from './TitleTablePhrase';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {isEmptyObject} from '../../../utils/isEmptyObject';\n\nconst { Column } = Table;\n\ninterface ITableEditPhraseProps {\n  phrases: IPhrase[];\n  disconnectPhrases: IDeleteSmth[];\n  entityId: number;\n  title: string;\n  isCreate: boolean;\n}\n\ninterface ICache {\n  [id: string]: IPhrase;\n}\n\nconst TableEditPhrase = (props: ITableEditPhraseProps) => {\n  const [mutationAddPhrase] = useMutation(MUTATION.upsertPhrase);\n  const [mutationUpdate, {loading}] = useMutation(MUTATION.updatePhraseByEntity);\n  const [phrases, setPhrases] = useState(props.phrases);\n  const [deletePhrases, setDeletePhrases] = useState(props.disconnectPhrases);\n  const [isCreate, setIsCreate] = useState(props.isCreate);\n  const cache = useRef({} as ICache);\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  const handleSave = async (row: IPhrase) => {\n    cache.current[row.id] = row;\n    const index = phrases.findIndex(p => p.id === row.id);\n    phrases[index] = row;\n    setPhrases(p => {\n      return [...p];\n    })\n  };\n  const handleDelete = (row: IPhrase) => {\n    setDeletePhrases(p => {\n      return [...p, {id: row.id}];\n    })\n  };\n\n  const handleUpdate = () => {\n    mutationUpdate({\n      variables: {\n        data: {\n          entityId: props.entityId,\n          disconnectPhrases: deletePhrases.map(d => d.id),\n          phrases: Object.values(cache.current).map(p => ({\n            id: p.id,\n            ru: p.ru,\n            phrase: p.phrase\n          }))\n        }\n      }\n    }).then(() => {\n      cache.current = {};\n      setIsCreate(true);\n    })\n  };\n\n  const handleAdd = async (value: IPhrase) => {\n    const res =  await mutationAddPhrase({\n      variables: {\n        phrase: value.phrase,\n        ru: value.ru,\n        entityId: props.entityId,\n      }\n    });\n    const phrase: IPhrase = res.data.upsertPhrase;\n    setPhrases(p => {\n      return [...p, phrase]\n    });\n  };\n\n  const filterPhrases = phrases.filter(p => !deletePhrases.some(d => d.id === p.id));\n  return (\n    <Table\n      bordered={false}\n      showHeader={false}\n      components={components}\n      dataSource={filterPhrases}\n      pagination={false}\n      size={'small'}\n      rowClassName={() => 'editable-row'}\n      title={() => (\n        <TitleTablePhrase\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          loadingUpdate={loading}\n          disabled={isCreate ? isEmptyObject(cache.current) : false}\n          entity={props.title}\n          isCreate={isCreate}\n        />\n      )}\n    >\n      <Column\n        title=\"Phrase\"\n        dataIndex=\"phrase\"\n        key=\"phrase\"\n        width=\"40%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'phrase',\n          title: 'Phrase',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"RU\"\n        dataIndex=\"ru\"\n        key=\"ru\"\n        width=\"45%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'ru',\n          title: 'RU',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"Operation\"\n        dataIndex=\"operation\"\n        render={(text: any, record: any) => {\n          return (\n            <Popconfirm\n              title=\"Sure to delete?\"\n              onConfirm={() => handleDelete({ ...record })}\n            >\n              <Button\n                danger\n                size=\"small\"\n                shape=\"circle\"\n                icon={<DeleteOutlined />}\n              />\n            </Popconfirm>\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default TableEditPhrase;\n","import React, { useState } from 'react';\nimport { IEntity } from '../../typings/IEntity';\nimport { Col, Row } from 'antd';\nimport TableEditWords from './TableEditWords/TableEditWords';\nimport TableEditPhrase from './TableEditPhrase/TableEditPhrase';\n\ninterface IEntityEditCardProps {\n  entity: IEntity;\n}\n\nconst EntityEditCard = ({ entity }: IEntityEditCardProps) => {\n  return (\n    <Row justify=\"center\">\n      <Col span={24}>\n        <TableEditWords\n          words={entity.words}\n          disconnectWords={entity.disconnectWords}\n          entityId={entity.id}\n          title={entity.title}\n          isCreate={entity.isCreate}\n        />\n      </Col>\n      <Col span={24}>\n        <TableEditPhrase\n          phrases={entity.phrases}\n          disconnectPhrases={entity.disconnectPhrases}\n          entityId={entity.id}\n          title={entity.title}\n          isCreate={entity.isCreate}\n        />\n      </Col>\n    </Row>\n  );\n};\n\nexport default EntityEditCard;\n","import React, {useEffect, useState} from 'react';\nimport {Button, Card, Col, Form, Input, Row} from 'antd';\nimport {useMutation, useQuery} from '@apollo/react-hooks';\nimport {IEntity} from '../typings/IEntity';\nimport EntityEditCard from '../components/CreatePage/EntityEditCard';\nimport {MUTATION} from '../graphql/mutation';\n\nconst {Search} = Input;\nconst CreatePage = () => {\n  const [entities, setEntities] = useState([] as IEntity[]);\n  const [mutationGetEntities] = useMutation(MUTATION.GET_ENTITIES_BY_WORD);\n  const handleFinish = async (search: any) => {\n    const res = await mutationGetEntities({\n      variables: {\n        word: search\n      }\n    });\n    if(res.data)\n      setEntities(res.data.getEntitiesByWord);\n  };\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Card size={'small'}>\n        <Search\n          placeholder=\"Input text for create entity of word\"\n          enterButton=\"Search\"\n          size=\"large\"\n          onSearch={handleFinish}\n        />\n        </Card>\n      </Col>\n      {\n        entities.map((e: any, index: any) => {\n          return (\n            <Col flex=\"1\" key={e.id || index}>\n              <EntityEditCard entity={e}/>\n            </Col>\n          )\n        })\n      }\n    </Row>\n  )\n};\n\nexport default CreatePage;\n","import React, {useState} from 'react';\nimport { Layout, Menu } from 'antd';\nimport {RouteComponentProps, Route, Switch} from 'react-router-dom';\nimport {\n  UserOutlined,\n  PieChartOutlined,\n  LogoutOutlined,\n  PlusCircleOutlined\n} from '@ant-design/icons';\nimport css from './Style.module.css';\nimport withProtected from '../useHooks/withProtected';\nimport {useApolloClient, useQuery} from '@apollo/react-hooks';\nimport {useHistory} from 'react-router';\nimport {useCurrentUser} from '../useHooks/useCurrentUser';\nimport UsersPage from './UsersPage';\nimport WordsPage from './WordsPage';\nimport NotFoundPage from './NotFoundPage';\nimport CreatePage from './CreatePage';\n\nconst { Content, Sider } = Layout;\n\nconst LayoutPage = (props: RouteComponentProps<any>) => {\n  let itemKey: string = props.match.params['item'] || 'words';\n  const client = useApolloClient();\n  const history = useHistory();\n  const {isAdmin, user} = useCurrentUser();\n  const [collapsed, setCollapsed] = useState(false);\n  const onCollapse = (collapsed: boolean) => {\n    setCollapsed(collapsed);\n  };\n\n  const handleExit = async () => {\n    await client.cache.reset();\n    localStorage.removeItem('token');\n    history.replace('/')\n  };\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider collapsible collapsed={collapsed} onCollapse={onCollapse}>\n        <div className={css.profile}>\n          {user && user.name}\n        </div>\n        <Menu theme=\"dark\" defaultSelectedKeys={[itemKey]} mode=\"inline\">\n          <Menu.Item key=\"create\" icon={<PlusCircleOutlined />} onClick={() => props.history.push('/main/create')}>\n            Create\n          </Menu.Item>\n          <Menu.Item key=\"words\" icon={<PieChartOutlined />} onClick={() => props.history.push('/main/words')}>\n            Words\n          </Menu.Item>\n          {\n            isAdmin && (\n              <Menu.Item key=\"users\" icon={<UserOutlined />} onClick={() => props.history.push('/main/users')}>\n                Users\n              </Menu.Item>\n            )\n          }\n          <Menu.Item key=\"exit\" icon={<LogoutOutlined />} onClick={handleExit}>\n            Exit\n          </Menu.Item>\n\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Content>\n          <Switch>\n            <Route path=\"/main/users\" component={UsersPage} />\n            <Route path=\"/main/words\" component={WordsPage} />\n            <Route path=\"/main/create\" component={CreatePage} />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default withProtected(LayoutPage);\n","import React, {useEffect} from 'react';\nimport { notification } from 'antd';\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\nimport AuthPage from './pages/AuthPage';\nimport LayoutPage from './pages/LayoutPage';\nimport {ApolloProvider, useMutation, useQuery,} from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport QUERIES from './graphql/queries';\nimport 'antd/dist/antd.css';\nimport './App.css';\nimport { ApolloLink, from } from '@apollo/client';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from \"@apollo/link-error\";\nimport {IErrorDev, IErrorProd} from './typings/IError';\nimport { ApolloClient } from 'apollo-boost';\nimport {isDevelopment} from './utils/env';\n\nconsole.log(process.env)\nconst linkError = onError(({ graphQLErrors = [], networkError, operation, forward, response }) => {\n  console.log({ graphQLErrors, networkError, operation, forward, response });\n  console.log(process.env.NODE_ENV);\n  if(isDevelopment) {\n    graphQLErrors.map((e: IErrorDev | any) => {\n      notification.error({\n        message: e.message\n      })\n    })\n  }\n  else {\n    graphQLErrors.map((e: IErrorProd | any) => {\n      notification.error({\n        message: e.message\n      })\n    })\n  }\n});\n\nconst authLink: any = new ApolloLink((operation, forward) => {\n  operation.setContext(({ headers }: any) => ({ headers: {\n      authorization: `Bearer ${localStorage.getItem('token')}`, // however you get your token\n      ...headers\n    }}));\n  return forward(operation);\n});\nconst link = new HttpLink({\n  uri: isDevelopment ? 'http://localhost:3005/graphql' : 'https://englishnew.herokuapp.com/grpahql',\n});\n\nconst cache: any = new InMemoryCache();\n\nconst client = new ApolloClient({\n  cache: cache,\n  link: from([\n    authLink,\n    linkError,\n    link,\n  ]) as any,\n  connectToDevTools: true,\n  defaultOptions: {\n    mutate: {\n      errorPolicy: 'ignore'\n    },\n    query: {\n      errorPolicy: 'ignore'\n    }\n  }\n});\n\ncache.writeData({\n  data: {\n    isAuth: false,\n    currentUser: null,\n  },\n});\nfunction App() {\n  const Content = () => {\n    const [refresh] = useMutation(QUERIES.REFRESH_USER, {\n      update: (proxy, mutationResult) => {\n        proxy.writeData({\n          data: {\n            isAuth: true,\n            currentUser: mutationResult.data.refreshUser\n          }\n        });\n      },\n    });\n\n    useEffect(() => {\n      refresh();\n    }, []);\n\n    return (\n      <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={AuthPage}/>\n            <Route path=\"/main/:item?\" component={LayoutPage}/>\n          </Switch>\n      </div>\n    )\n  };\n\n  return (\n    <ApolloProvider client={client as any}>\n      <BrowserRouter>\n      <Content/>\n      </BrowserRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}