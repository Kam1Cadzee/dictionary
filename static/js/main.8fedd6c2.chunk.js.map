{"version":3,"sources":["pages/Style.module.css","components/WordsPage/WordsPage.module.css","components/CreatePage/TableEditWords.module.css","graphql/fragments.ts","graphql/queries.ts","typings/IUser.ts","components/AuthPage/LoginForm.tsx","components/AuthPage/SignUpForm.tsx","useHooks/withAuthRedirect.tsx","pages/AuthPage.tsx","useHooks/withProtected.tsx","useHooks/useCurrentUser.ts","typings/PartOfSpeech.ts","useHooks/usePartOfSpeech.ts","pages/UsersPage.tsx","utils/tagPartOfSpeech.tsx","components/WordsPage/TranslateContent.tsx","components/WordsPage/WordsContent.tsx","components/WordsPage/PhrasesContent.tsx","components/WordsPage/SentencesContent.tsx","components/WordsPage/EntityCard.tsx","pages/WordsPage.tsx","pages/NotFoundPage.tsx","utils/isEmptyObject.ts","components/CreatePage/TableEditWords/SelectPartOfSpeech.tsx","graphql/mutation.ts","components/CreatePage/TableEditWords/CreateTranslateOfWord.tsx","utils/generateClassName.ts","components/common/EditableTableComponent.tsx","utils/RedoHistory.ts","components/common/BasicTItleTable.tsx","components/CreatePage/TableEditWords/ContentPopoverWord.tsx","components/CreatePage/TableEditWords/TableEditWords.tsx","components/CreatePage/TableEditPhrase/ContentPopoverPhrase.tsx","components/CreatePage/TableEditPhrase/TableEditPhrase.tsx","components/CreatePage/TableEditSentence/ContentPopoverSentence.tsx","components/CreatePage/TableEditSentence/TableEditSentence.tsx","components/CreatePage/EntityEditCard.tsx","pages/CreatePage.tsx","pages/LayoutPage.tsx","App.tsx","index.tsx"],"names":["module","exports","FRAGMENTS","user","entity","UserRole","QUERIES","LOGIN","gql","SIGNUP","CURRENT_USER","GET_STEP_CLIENT","REFRESH_USER","IS_AUTH","USERS","COUNT_ENTITY","COUNT_WORDS","COUNT_TRANSLATE","GET_ENTITIES","getEntity","GET_ENTITIES_BY_WORD_CLIENT","GET_PART_OF_SPEECH","GET_WORD","GET_COUNT_ENTITIES","layout","labelCol","span","wrapperCol","tailLayout","offset","LoginForm","useMutation","update","proxy","mutationResult","writeData","data","isAuth","currentUser","login","localStorage","setItem","token","onFinish","error","values","a","variables","loginData","name","initialValues","remember","Item","label","rules","required","message","Password","type","htmlType","SignUpForm","signup","withAuthRedirect","Component","props","useQuery","fetchPolicy","onError","redirect","location","state","from","to","TabPane","Tabs","justify","align","className","css","authFull","blockAuth","defaultActiveKey","animated","inkBar","tabPane","tab","key","disabled","version","withProtected","pathname","PartOfSpeech","useCurrentUser","isAdmin","role","ADMIN","usePartOfSpeech","partOfSpeechDescs","columns","title","dataIndex","render","color","toUpperCase","recurse","obj","Object","keys","res","UsersPage","dataTranslate","returnPartialData","dataWords","dataEntity","users","countTranslate","countWords","countEntity","dataSource","TagPartOfSpeech","findItem","useFindPartOfSpeech","defineTagColor","Fragment","en","ua","ru","find","item","ADJ","ADV","OTHER","VERB","NOUN","CONJ","MODAL","DET","PREP","PRON","Column","Table","TranslateContent","word","translate","filter","t","disconnectTranslate","some","d","id","pagination","size","showHeader","width","tags","Text","Typography","Cell","record","children","restProps","undefined","strong","WordsContent","words","disconnectWords","w","map","i","components","body","cell","onCell","PhrasesContent","phrases","disconnectPhrases","p","phrase","SentencesContent","sentences","disconnectSentences","s","sentence","tabListNoTitle","component","EntityCard","useState","setKey","Content","Grid","entityCard","tabList","activeTabKey","onTabChange","extra","WordsPage","entities","e","NotFoundPage","status","subTitle","Button","isEmptyObject","length","Option","Select","tagRender","SelectPartOfSpeech","parts","bordered","suffixIcon","value","MUTATION","deleteWord","deleteTranslate","createOrUpdateWordWithTranslate","updateWordsByEntity","upsertTranslate","translatePhrase","translateSentence","upsertPhrase","upsertSentence","updatePhraseByEntity","updateSentencesByEntity","GET_ENTITIES_BY_WORD","TRANSLATE_WORD","Search","Input","onClose","idWord","onAdd","mutationAdd","loading","handleSearch","placeholder","onSearch","allowClear","enterButton","CreateTranslateOfWord","isShow","setIsShow","content","trigger","visible","onVisibleChange","placement","shape","btnCreate","onClick","icon","PlusOutlined","generateClassName","options","str","forEach","EditableContext","React","createContext","EditableRow","index","Form","useForm","form","Provider","EditableCell","editable","handleSave","handleTranslate","editing","setEditing","inputRef","useRef","useContext","useEffect","current","focus","toggleEdit","setFieldsValue","save","validateFields","console","log","childNode","style","margin","ref","onPressEnter","onBlur","isNeededTranslate","ZhihuOutlined","RedoHistory","history","handlers","addHandler","push","getRevertAction","action","h","k","getAction","addAction","newAction","nextAction","prevAction","prev","revert","payload","next","isPrev","isNext","this","BasicTitleTable","onUpdate","loadingUpdate","isCreate","disabledNext","onNext","disabledPrev","onPrev","onChangeShowDeleted","AddComponent","addComponent","btnTitle","UndoOutlined","RedoOutlined","Group","onChange","target","defaultValue","buttonStyle","ContentPopoverWord","setOptions","mutationTranslateWord","handleChange","event","preventDefault","translateWord","mode","tokenSeparators","o","initialValue","TableEditWords","mutationCreateWord","mutationUpdate","cache","client","useApolloClient","setIsCreate","isUpdate","setIsUpdate","isShowDeleted","setShowDeleted","noDataWords","setNoDataWords","setDisconnectWords","truthDataWords","isShowDelete","filterTranslate","count","isDelete","getDataOfFilter","row","addDeleteWord","dis","removeDeleteWord","addDeleteTranslate","handlerDeleteTranslate","removeDeleteTranslate","handlerRemoveDeleteTranslate","actionForHandleChangeTypeNext","actionForHandleChangeTypePrev","actionForHandleChangeInputValueNext","actionForHandleChangeInputValuePrev","handleDelete","dataDelete","idTranslate","findWord","indexWord","findIndex","oldValue","indexRu","step","basicActionForHandleInputValue","basicActionForHandleChangeType","oldType","handleAdd","entityId","handleAddTranslate","handleUpdate","then","rowClassName","handleChangeType","text","isEn","handleReturn","danger","DeleteOutlined","ContentPopoverPhrase","mutationTranslate","compact","TableEditPhrase","mutationAddPhrase","setPhrases","deletePhrases","setDeletePhrases","deletePhrase","recoverPhrase","actionForHandleSaveNext","actionForHandleSavePrev","newValue","basicActionForHandleSave","filterPhrases","ContentPopoverSentence","TableEditSentence","mutationAddSentence","setSentences","deleteSentences","setDeleteSentences","deleteSentence","recoverSentence","filterSentences","Panel","Collapse","EntityEditCard","expandIcon","isActive","CaretRightOutlined","rotate","expandIconPosition","header","Step","Steps","CreatePage","setEntities","mutationGetEntities","skip","onCompleted","getCountEntities","countEntities","setCountEntities","handleFinish","search","toLowerCase","getEntitiesByWord","setTimeout","isSteps","FontSizeOutlined","description","EditOutlined","CloudUploadOutlined","CrownOutlined","flex","Layout","Sider","itemKey","match","params","useHistory","collapsed","setCollapsed","handleExit","reset","removeItem","replace","minHeight","collapsible","onCollapse","theme","profile","lastName","selectedKeys","PlusCircleOutlined","PieChartOutlined","UserOutlined","LogoutOutlined","path","process","linkError","graphQLErrors","networkError","operation","forward","response","notification","authLink","ApolloLink","setContext","headers","authorization","getItem","link","HttpLink","uri","InMemoryCache","ApolloClient","connectToDevTools","defaultOptions","mutate","errorPolicy","query","resolvers","Query","_","getCacheKey","readFragment","__typename","fragment","App","refreshUser","refresh","exact","AuthPage","LayoutPage","basename","ReactDOM","StrictMode","document","getElementById"],"mappings":"6FACAA,EAAOC,QAAU,CAAC,SAAW,wBAAwB,UAAY,yBAAyB,QAAU,uBAAuB,QAAU,yB,oBCArID,EAAOC,QAAU,CAAC,WAAa,gC,oBCA/BD,EAAOC,QAAU,CAAC,UAAY,oC,0SCuDfC,EAtDG,CAChBC,KAAK,sEAOLC,OAAO,yjB,61GCPT,ICKYC,EDkIGC,EAvIC,CACdC,MAAOC,YAAF,IAIaN,EAAUC,MAM5BM,OAAQD,YAAF,IAIYN,EAAUC,MAM5BO,aAAcF,YAAF,IAGEN,EAAUC,MAIxBQ,gBAAiBH,YAAF,KAKfI,aAAcJ,YAAF,IAGEN,EAAUC,MAIxBU,QAASL,YAAF,KAKPM,MAAON,YAAF,IAGSN,EAAUC,MAIxBY,aAAcP,YAAF,KAOZQ,YAAaR,YAAF,KAOXS,gBAAiBT,YAAF,KAOfU,aAAcV,YAAF,IAGEN,EAAUE,QAIxBe,UAAWX,YAAF,KAKTY,4BAA6BZ,YAAF,IAGbN,EAAUE,QAIxBiB,mBAAoBb,YAAF,KAWlBc,SAAUd,YAAF,KAyBRe,mBAAoBf,YAAF,ME9HdgB,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEhBE,EAAa,CACjBD,WAAY,CAAEE,OAAQ,EAAGH,KAAM,KAwDlBI,EArDG,WAAO,IAAD,EACWC,YAAYzB,EAAQC,MAAO,CAC1DyB,OAAQ,SAACC,EAAOC,GACdD,EAAME,UAAU,CACdC,KAAM,CACJC,QAAQ,EACRC,YAAaJ,EAAeE,KAAKG,MAAMpC,QAG3CqC,aAAaC,QAAQ,QAASP,EAAeE,KAAKG,MAAMG,UATtC,mBACfH,EADe,YAahBI,GAbgB,EACNP,KADM,EACAQ,MAYR,uCAAG,WAAOC,GAAP,SAAAC,EAAA,sEACTP,EAAM,CACVQ,UAAW,CACTC,UAAWH,KAHA,2CAAH,uDAQd,OACE,kBAAC,IAAD,iBACMrB,EADN,CAEEyB,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BR,SAAUA,IAEV,kBAAC,IAAKS,KAAN,CACEC,MAAM,QACNJ,KAAK,QACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,WACNJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKL,KAASxB,EACb,kBAAC,IAAD,CAAQ8B,KAAK,UAAUC,SAAS,UAAhC,aCrDFnC,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEhBE,EAAa,CACjBD,WAAY,CAAEE,OAAQ,EAAGH,KAAM,KA6ElBkC,EA1EI,WAAO,IAAD,EACI7B,YAAYzB,EAAQG,OAAQ,CACrDuB,OAAQ,SAACC,EAAOC,GACdD,EAAME,UAAU,CACdC,KAAM,CACJC,QAAQ,EACRC,YAAaJ,EAAeE,KAAKG,MAAMpC,QAG3CqC,aAAaC,QAAQ,QAASP,EAAeE,KAAKG,MAAMG,UATrC,mBAChBmB,EADgB,KAYjBlB,GAZiB,KACNP,KAWH,uCAAG,WAAOS,GAAP,SAAAC,EAAA,sEACGe,EAAO,CACvBd,UAAW,CACTX,KAAMS,KAHK,yDAAH,uDAQd,OACE,kBAAC,IAAD,iBACMrB,EADN,CAEEyB,KAAK,QACLC,cAAe,CAAEC,UAAU,GAC3BR,SAAUA,IAEV,kBAAC,IAAKS,KAAN,CACEC,MAAM,WACNJ,KAAK,OACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,YACNJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,QACNJ,KAAK,QACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAGF,kBAAC,IAAKJ,KAAN,CACEC,MAAM,WACNJ,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKL,KAAN,CACEC,MAAM,kBACNJ,KAAK,iBACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAMC,SAAP,OAGF,kBAAC,IAAKL,KAASxB,EACb,kBAAC,IAAD,CAAQ8B,KAAK,UAAUC,SAAS,UAAhC,a,kBCrDOG,EApBU,SAACC,GACxB,OAAO,SAACC,GAAsC,IACrC5B,EAAQ6B,YAAS3D,EAAQO,QAAS,CACvCqD,YAAa,aACbC,QAAS,SAAAvB,OAFJR,KAMHgC,EAAW,cAIf,OAHGJ,EAAMK,SAASC,OAASN,EAAMK,SAASC,MAAMC,OAC9CH,EAAWJ,EAAMK,SAASC,MAAMC,MAE9BnC,GAAQA,EAAKC,OACR,kBAAC,IAAD,CAAUmC,GAAIJ,IAGhB,kBAACL,EAAcC,KCflBS,EAAYC,IAAZD,QAoBOX,KAlBE,WACf,OACE,kBAAC,IAAD,CAAKa,QAAQ,SAASC,MAAM,SAASC,UAAWC,IAAIC,UAClD,kBAAC,IAAD,CAAKrD,KAAM,EAAGmD,UAAWC,IAAIE,WAC3B,kBAAC,IAAD,CAAMC,iBAAiB,IAAIC,SAAU,CAACC,QAAQ,EAAMC,SAAS,IAC3D,kBAACX,EAAD,CAASY,IAAI,QAAQC,IAAI,KACvB,kBAAC,EAAD,OAEF,kBAACb,EAAD,CAASY,IAAI,UAAUC,IAAI,IAAIC,UAAQ,GACrC,kBAAC,EAAD,SAIN,uBAAGV,UAAWC,IAAIU,SAAlB,e,2DCGSC,GAnBO,SAAC1B,GACrB,OAAO,SAACC,GAAgC,IAC/B5B,EAAQ6B,YAAS3D,EAAQO,QAAS,CACvCqD,YAAa,eADR9B,KAIP,OAAMA,GAAQA,EAAKC,OASZ,kBAAC0B,EAAcC,GARb,kBAAC,IAAD,CAAUQ,GAAI,CACnBkB,SAAU,IACVpB,MAAO,CACLC,KAAMP,EAAMK,SAASqB,gB,SLRnBrF,K,cAAAA,E,qBAAAA,M,KMJL,ICJKsF,GDICC,GAAiB,WAAO,IAC5BxD,EAAQ6B,YAAS3D,EAAQI,aAAc,CAC5CyD,QAAS,SAAAvB,OADJR,KAGHjC,EAAqB,KACrB0F,GAAU,EAKd,OAJGzD,GAAQA,EAAKE,cAEduD,GADA1F,EAAOiC,EAAKE,aACIwD,OAASzF,EAAS0F,OAE7B,CAAC5F,OAAM0F,Y,8BEVHG,GAAkB,WAAO,IAC7B5D,EAAQ6B,YAAS3D,EAAQe,mBAAoB,CAClD6C,YAAa,gBADR9B,KAGP,OAAQA,EAAOA,EAAK6D,kBAAoB,ICDpCC,GAAU,CACd,CACEC,MAAO,KACPC,UAAW,KACXd,IAAK,MAEP,CACEa,MAAO,OACPC,UAAW,OACXd,IAAK,QAEP,CACEa,MAAO,YACPC,UAAW,WACXd,IAAK,YAEP,CACEa,MAAO,QACPC,UAAW,QACXd,IAAK,SAEP,CACEa,MAAO,OACPb,IAAK,OACLc,UAAW,OACXC,OAAQ,SAACP,GACP,IAAIQ,EAAQR,IAASzF,EAAS0F,MAAQ,WAAa,QACnD,OACE,kBAAC,KAAD,CAAKO,MAAOA,EAAOhB,IAAKQ,GACrBA,EAAKS,kBAOVC,GAAU,SAAVA,EAAWC,EAAUxD,GACzB,cAAkByD,OAAOC,KAAKF,GAA9B,eAAoC,CAA/B,IAAMnB,EAAG,KACZ,GAAGA,IAAQrC,EACT,OAAOwD,EAAInB,GAEb,GAAuB,kBAAbmB,EAAInB,GAAmB,CAC/B,IAAMsB,EAAWJ,EAAQC,EAAInB,GAAMrC,GACnC,GAAG2D,EAAK,OAAOA,KAsCNC,GAjCG,WACNb,KAAV,IACO5D,EAAQ6B,YAAS3D,EAAQQ,MAAO,IAAhCsB,KACM0E,EAAiB7C,YAAS3D,EAAQW,gBAAiB,CAC9D8F,mBAAmB,IADd3E,KAGM4E,EAAa/C,YAAS3D,EAAQU,YAAa,CACtD+F,mBAAmB,IADd3E,KAGM6E,EAAchD,YAAS3D,EAAQS,aAAc,CACxDgG,mBAAmB,IADd3E,KAGD8E,EAAQ9E,EAAOA,EAAK8E,MAAQ,GAC5BC,EAAiBX,GAAQM,EAAe,SACxCM,EAAaZ,GAAQQ,EAAW,SAChCK,EAAcb,GAAQS,EAAY,SAExC,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKvF,KAAM,IACT,kBAAC,KAAD,CAAcyE,MAAM,mBACjBkB,GAAgB,kBAAC,KAAajE,KAAd,CAAmBC,MAAM,UAAUgE,GACnDD,GAAe,kBAAC,KAAahE,KAAd,CAAmBC,MAAM,SAAS+D,GACjDD,GAAmB,kBAAC,KAAa/D,KAAd,CAAmBC,MAAM,aAAa8D,KAG9D,kBAAC,IAAD,CAAKzF,KAAM,IACX,kBAAC,KAAD,CAAOwE,QAASA,GAASoB,WAAYJ,O,oBFlF/BvB,K,UAAAA,E,UAAAA,E,YAAAA,E,UAAAA,E,cAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,YAAAA,E,eAAAA,Q,KGSL,IAAM4B,GAAkB,SAAC,GAAmC,IAAlC7D,EAAiC,EAAjCA,KACzB8D,EAAWC,GAAoB/D,GACrC,GAAwB,kBAAb8D,EAAuB,CAChC,IAAMlB,EAAQoB,GAAeF,EAAS9D,MACtC,OACE,kBAAC,IAAMiE,SAAP,KACE,kBAAC,KAAD,CAAKrB,MAAOA,GAAQkB,EAASI,GAAGrB,eAChC,kBAAC,KAAD,CAAKD,MAAOA,GAAQkB,EAASK,GAAGtB,eAChC,kBAAC,KAAD,CAAKD,MAAOA,GAAQkB,EAASM,GAAGvB,gBAKtC,OAAO,kBAAC,KAAD,CAAKD,MAAOoB,GAAehE,IAAQA,EAAK6C,gBAEpCkB,GAAsB,SAAC/D,GAClC,IACM8D,EADQxB,KACS+B,MAAK,SAAAC,GAAI,OAAIA,EAAKtE,OAASA,KAClD,OAAiB,OAAb8D,EACK9D,EAEF8D,GAGIE,GAAiB,SAAChE,GAC7B,OAAQA,GACN,KAAKiC,GAAasC,IAChB,MAAO,UACT,KAAKtC,GAAauC,IAChB,MAAO,OACT,KAAKvC,GAAawC,MAChB,MAAO,UACT,KAAKxC,GAAayC,KAChB,MAAO,WACT,KAAKzC,GAAa0C,KAChB,MAAO,QACT,KAAK1C,GAAa2C,KAChB,MAAO,OACT,KAAK3C,GAAa4C,MAChB,MAAO,OACT,KAAK5C,GAAa6C,IAChB,MAAO,UACT,KAAK7C,GAAa8C,KAChB,MAAO,OACT,KAAK9C,GAAa+C,KAChB,MAAO,SAEX,MAAO,WCnDDC,GAAWC,KAAXD,OAwBOE,GAlBU,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAEzB,OADAA,EAAKC,UAAYD,EAAKC,UAAUC,QAAO,SAAAC,GAAC,OAAKH,EAAKI,oBAAoBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,EAAEI,SAEzF,kBAAC,KAAD,CAAO/B,WAAYwB,EAAKC,UAAWO,YAAY,EAAOC,KAAM,QAASC,YAAY,GAC/E,kBAACb,GAAD,CAAQxC,MAAM,KAAKC,UAAU,KAAKd,IAAI,KAAKmE,MAAM,QACjD,kBAACd,GAAD,CACEc,MAAM,MACNtD,MAAM,iBACNC,UAAU,OACVd,IAAI,OACJe,OAAQ,SAAAqD,GACN,OAAO,kBAAC,GAAD,CAAiBhG,KAAMgG,S,oBCjBhCf,GAAWC,KAAXD,OACAgB,GAASC,KAATD,KAMFE,GAAO,SAAC,GAAsD,IAArDzD,EAAoD,EAApDA,UAAW0D,EAAyC,EAAzCA,OAAQC,EAAiC,EAAjCA,SAAaC,EAAoB,kDACjE,MAAkB,OAAd5D,QAA0C6D,IAApBH,EAAOC,UACf,OAAd3D,GAAsB0D,EAAOC,SAD+B,KAEzD,uBAAQC,EAEG,OAAd5D,EACE,kBAACuD,GAAD,CAAMO,QAAM,GAAEH,GAEd,kBAACJ,GAAD,CAAMjG,KAAK,aAAaqG,KAuDjBI,GAjDM,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,MAAOC,EAA0C,EAA1CA,gBACvBjI,EAAOgI,EACVpB,QAAO,SAACsB,GAAD,OAAQD,EAAgBlB,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOiB,EAAEjB,SACtDkB,KAAI,SAACD,EAAGE,GAAJ,MAAW,CACdlF,IAAKgF,EAAEjB,GACPzB,GAAI0C,EAAE1C,GACNlE,KAAM4G,EAAE5G,KACRqG,SAAUO,EAAEvB,cAGhB,OACE,kBAAC,KAAD,CACEzB,WAAYlF,EACZkH,YAAY,EACZC,KAAM,QACNC,YAAY,EACZiB,WAAY,CACVC,KAAM,CACJC,KAAMd,MAIV,kBAAC,GAAD,CAAQ1D,MAAM,KAAKC,UAAU,KAAKd,IAAI,KAAKmE,MAAM,MACzCmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA1D,UAAW,KACXD,MAAO,SAGjB,kBAAC,GAAD,CAAQA,MAAM,KAAKC,UAAU,KAAKd,IAAI,KAC9BsF,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA1D,UAAW,KACXD,MAAO,SAGjB,kBAAC,GAAD,CACEsD,MAAM,MACNtD,MAAM,iBACNC,UAAU,OACVd,IAAI,OACJe,OAAQ,SAACqD,GACP,OAAO,kBAAC,GAAD,CAAiBhG,KAAMgG,SC/DhCC,GAASC,KAATD,KAiCOkB,GAvBQ,SAAC,GAAwD,IAAvDC,EAAsD,EAAtDA,QAASC,EAA6C,EAA7CA,kBAC1B3I,EAAO0I,EACV9B,QAAO,SAACgC,GAAD,OAAQD,EAAkB5B,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAO2B,EAAE3B,SAE3D,OACE,kBAAC,IAAD,KAEIjH,EAAKmI,KAAI,SAAAS,GACP,OACE,oCACE,kBAAC,IAAD,CAAKtJ,KAAM,IACT,kBAAC,GAAD,CAAMwI,QAAM,GAAEc,EAAEC,QACd,6BACF,kBAAC,GAAD,CAAMvH,KAAK,aAAasH,EAAElD,WCvBlC6B,GAASC,KAATD,KA4BOuB,GAtBU,SAAC,GAA8D,IAA7DC,EAA4D,EAA5DA,UAAWC,EAAiD,EAAjDA,oBAC9BhJ,EAAO+I,EACVnC,QAAO,SAACgC,GAAD,OAAQI,EAAoBjC,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAO2B,EAAE3B,SAC7D,OACE,kBAAC,IAAD,KAEIjH,EAAKmI,KAAI,SAAAc,GACP,OACE,oCACE,kBAAC,IAAD,CAAK3J,KAAM,IACT,kBAAC,GAAD,CAAMwI,QAAM,GAAEmB,EAAEC,UAChB,6BACA,kBAAC,GAAD,CAAM5H,KAAK,aAAa2H,EAAEvD,W,qBCTpCyD,GAAiB,CACrB,CACEjG,IAAK,YACLD,IAAK,YACLmG,UAAW3C,IAEb,CACEvD,IAAK,QACLD,IAAK,QACLmG,UAAWrB,IAEb,CACE7E,IAAK,UACLD,IAAK,UACLmG,UAAWX,IAEb,CACEvF,IAAK,YACLD,IAAK,YACLmG,UAAWN,KAgDAO,GAzCI,SAAC,GAA+B,IAA9BrL,EAA6B,EAA7BA,OAA6B,EAC1BsL,mBAAS,aADiB,mBACzCpG,EADyC,KACpCqG,EADoC,KAQ1C7C,EAAO1I,EAAOgK,MAAMrC,MAAK,SAAAuC,GAAC,OAAIA,EAAE1C,KAAOxH,EAAO+F,SAC9CiE,EAAQhK,EAAOgK,MAAMpB,QAAO,SAAAsB,GAAC,OAAIA,EAAE1C,KAAOxH,EAAO+F,SACjDyF,EAAUL,GAAexD,MAAK,SAAAkB,GAAC,OAAIA,EAAE3D,MAAQA,KAAMkG,UACzD,OACE,kBAAC,KAAKK,KAAN,CAAWhH,UAAWC,KAAIgH,YACxB,kBAAC,KAAD,CACEC,QAASR,GACTS,aAAc1G,EACd2G,YAbc,SAAC3G,GACnBqG,EAAOrG,IAaH5B,KAAM,QACNyC,MAAO/F,EAAO+F,MACd+F,MAAO,kBAAC,IAAD,CAAM1H,GAAI,CACfkB,SAAU,gBACVpB,MAAO,CACL+E,GAAIjJ,EAAOiJ,MAHR,SAQP,kBAACuC,EAAD,CACE9C,KAAMA,EACNqC,UAAW/K,EAAO+K,UAClBd,gBAAiBjK,EAAOiK,gBACxBD,MAAOA,EACPU,QAAS1K,EAAO0K,QAChBM,oBAAqBhL,EAAOgL,oBAC5BL,kBAAmB3K,EAAO2K,uBCpCrBoB,GA5BG,WACNnG,KAAV,IACO7F,EAAQyF,KAARzF,KACAiC,EAAQ6B,YAAS3D,EAAQY,aAAc,CAC5C6B,UAAW,CACTsG,GAAIlJ,EAAMkJ,MAFPjH,KAMDgK,EAAsBhK,EAAOA,EAAKgK,SAAW,GAEnD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAK1K,KAAM,IACT,kBAAC,KAAD,CAAMyE,MAAM,aAAaoD,KAAM,SAE3B6C,EAAS7B,KAAI,SAAA8B,GACX,OACE,kBAAC,GAAD,CAAY/G,IAAK+G,EAAEhD,GAAIjJ,OAAQiM,W,UCfhCC,GATM,WACnB,OAAO,kBAAC,KAAD,CACLC,OAAO,MACPpG,MAAM,MACNqG,SAAS,8CACTN,MAAO,kBAAC,IAAD,CAAM1H,GAAG,cAAcgH,UAAWiB,IAAQ/I,KAAK,WAA/C,gB,uCCTEgJ,GAAgB,SAACjG,GAC5B,OAAmC,IAA5BC,OAAOC,KAAKF,GAAKkG,Q,UCMlBC,GAAWC,KAAXD,OAER,SAASE,GAAU9I,GAAa,IACtBX,EAAUW,EAAVX,MAER,OAAO,kBAAC,GAAD,CAAiBK,KAAML,IAEhC,IAqBe0J,GArBY,SAAC/I,GAC1B,IAAMgJ,EAAQhH,KAEd,OACE,kBAAC,KAAD,eACE8G,UAAWA,GACXG,UAAU,EACVC,WAAY,MACRlJ,GAEHgJ,EAAMzC,KAAI,SAACS,GACV,OACE,kBAAC4B,GAAD,CAAQO,MAAOnC,EAAEtH,KAAM4B,IAAK0F,EAAEtH,MAC5B,kBAAC,GAAD,CAAiBA,KAAMsH,EAAEtH,a,qpKCxB9B,IAAM0J,GAAW,CACtBC,WAAY7M,YAAF,MAaV8M,gBAAiB9M,YAAF,MAkBf+M,gCAAiC/M,YAAF,MAiB/BgN,oBAAqBhN,YAAF,MAKnBiN,gBAAiBjN,YAAF,MA0BfkN,gBAAiBlN,YAAF,MAQfmN,kBAAmBnN,YAAF,MAQjBoN,aAAcpN,YAAF,MAyBZqN,eAAgBrN,YAAF,MAyBdsN,qBAAsBtN,YAAF,MAKpBuN,wBAAyBvN,YAAF,MAKvBwN,qBAAsBxN,YAAF,KAGNN,EAAUE,QAIxB6N,eAAgBzN,YAAF,O,qBC9JR0N,GAAWC,IAAXD,OAOFtC,GAAU,SAAC,GAA0C,IAAxCwC,EAAuC,EAAvCA,QAASC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAsB,EACrBvM,YAAYqL,GAASK,iBADA,mBACjDc,EADiD,KAClCC,EADkC,KAClCA,QAChBC,EAAY,uCAAG,WAAOtB,GAAP,iBAAArK,EAAA,yDACL,KAAVqK,EADe,iEAEDoB,EAAY,CAC5BxL,UAAW,CACTsL,SACAvG,GAAIqF,KALW,OAEbvG,EAFa,OAQbxE,EAAmBwE,EAAIxE,KAAKqL,gBAClCa,EAAMD,EAAQjM,GACdgM,IAVmB,2CAAH,sDAalB,OACE,kBAACF,GAAD,CACEQ,YAAY,oBACZC,SAAUF,EACVG,YAAU,EACVC,aAAW,EACXL,QAASA,KAuCAM,GA9Be,SAAC,GAA2C,IAAzCT,EAAwC,EAAxCA,OAAQC,EAAgC,EAAhCA,MAAgC,EAC3C5C,oBAAS,GADkC,mBAChEqD,EADgE,KACxDC,EADwD,KAWvE,OACE,kBAAC,KAAD,CACEC,QAAS,kBAAC,GAAD,CAASb,QAVF,WAClBY,GAAU,IASgCX,OAAQA,EAAQC,MAAOA,IAC/DY,QAAQ,QACRC,QAASJ,EACTK,gBATwB,SAACD,GAC3BH,EAAUG,IASRE,UAAU,eAEV,kBAAC,IAAD,CACE9F,KAAK,SACL+F,MAAM,SACNzK,UAAWC,KAAIyK,UACfC,QAAS,kBAAMR,GAAU,IACzBS,KAAM,kBAACC,GAAA,EAAD,U,mBCrEDC,GAAoB,SAAC1M,EAAc2M,GAG9C,IAAIC,EAAM5M,EAMV,OALAyD,OAAOC,KAAKiJ,GAASE,SAAQ,SAAAxK,GACxBsK,EAAQtK,KACTuK,EAAMA,EAAM,IAAMvK,MAGfuK,G,UCFHE,I,OAAkBC,IAAMC,cAAc,OAE/BC,GAAc,SAAC,GAA2B,EAA1BC,MAA2B,IAAjBnM,EAAgB,4BACtCoM,IAAKC,UAAbC,EAD8C,oBAErD,OACE,kBAAC,IAAD,CAAMA,KAAMA,EAAM9E,WAAW,GAC3B,kBAACuE,GAAgBQ,SAAjB,CAA0BpD,MAAOmD,GAC/B,uBAAQtM,MAKHwM,GAAe,SAAC,GAUY,IATVrK,EASS,EATTA,MACAsK,EAQS,EARTA,SACAvE,EAOS,EAPTA,MACAnC,EAMS,EANTA,SACA3D,EAKS,EALTA,UACA0D,EAIS,EAJTA,OACA4G,EAGS,EAHTA,WACAC,EAES,EAFTA,gBACG3G,EACM,8GACR0B,oBAAS,GADD,mBAC/BkF,EAD+B,KACtBC,EADsB,KAEhCC,EAAgBC,mBAChBT,EAAOU,qBAAWjB,IACxBkB,qBAAU,WACJL,GACFE,EAASI,QAAQC,UAElB,CAACP,IAEJ,IAAMQ,EAAa,WACjBP,GAAYD,GACZN,EAAKe,eAAL,gBACGjL,EAAY0D,EAAO1D,MAIlBkL,EAAI,uCAAG,WAAOjF,GAAP,eAAAvJ,EAAA,+EAEYwN,EAAKiB,iBAFjB,OAEH1O,EAFG,OAGTuO,IACAV,EAAW,eAAI5G,EAAL,GAAgBjH,EAAhB,CAAwBuD,eAJzB,gDAMToL,QAAQC,IAAI,eAAZ,MANS,yDAAH,sDAUNC,EAAY3H,EAyChB,OAvCI0G,IACFiB,EAAYd,EACV,kBAAC,IAAKxN,KAAN,CACEuO,MAAO,CACLC,OAAQ,GAEV3O,KAAMmD,EACN9C,MAAO,CACL,CACEC,UAAU,EACVC,QAAQ,GAAD,OAAK2C,EAAL,oBAIX,kBAAC,IAAD,CAAO0L,IAAKf,EAAUgB,aAAcR,EAAMS,OAAQT,EAC3CzM,UAAW8K,GAAkB,2BAA4B,CACvD,UAAyB,OAAdvJ,OAItB,yBACEvB,UAAW8K,GAAkB,2BAA4B,CACvD,UAAyB,OAAdvJ,IAEboJ,QAAS4B,GAERrH,EAECmC,GAASpC,EAAOkI,mBACd,kBAAC,KAAD,CAAS7L,MAAM,aACb,kBAAC,IAAD,CAAQqJ,QAAS,kBAAMmB,EAAgB,eAAI7G,KAAUjF,UAAU,eAAeyK,MAAM,QAC5E/F,KAAK,QAAQkG,KAAM,kBAACwC,GAAA,EAAD,WAQrB,OAAd7L,QAA0C6D,IAApBH,EAAOC,UACf,OAAd3D,GAAsB0D,EAAOC,SAD+B,KAEzD,uBAAQC,EAAY0H,I,8BCnGhBQ,GAKX,aAAe,IAAD,iCAJNC,QAA0B,KAIpB,KAHNjB,QAA0B,KAGpB,KAFNkB,SAAkB,GAEZ,KASPC,WAAa,SAAC5L,GACnB,EAAK2L,SAASE,KAAK7L,IAVP,KAaN8L,gBAAkB,SAACC,GACzB,IAAMhL,EAAW,EAAK4K,SAASrK,MAAK,SAAA0K,GAClC,OAAO/L,OAAOC,KAAK8L,GAAGtJ,MAAK,SAAAuJ,GAAC,OAAIA,IAAMF,QAIxC,OAAOhL,EADUd,OAAOC,KAAKa,GAAUwB,QAAO,SAAA0J,GAAC,OAAIA,IAAMF,KAAQ,KAlBrD,KAqBNG,UAAY,SAACH,GAKnB,OAJiB,EAAKJ,SAASrK,MAAK,SAAA0K,GAClC,OAAO/L,OAAOC,KAAK8L,GAAGtJ,MAAK,SAAAuJ,GAAC,OAAIA,IAAMF,QAGxBA,IA1BJ,KA6BPI,UAAY,SAAIJ,GACrB,EAAKL,QAAU,EAAKjB,QACpB,IAAM2B,EAAqB,aACzBC,WAAY,KACZC,WAAY,EAAKZ,SACdK,GAEL,EAAKL,QAASW,WAAaD,EAC3B,EAAKV,QAAUU,EACf,EAAK3B,QAAU,EAAKiB,SAtCR,KAyCPa,KAAO,WACS,OAAjB,EAAK9B,SAAgD,OAA5B,EAAKA,QAAQ6B,aAG3B,EAAKR,gBAAgB,EAAKrB,QAASsB,OAClDS,CAAO,EAAK/B,QAASgC,SACrB,EAAKhC,QAAU,EAAKA,QAAS6B,aA/CjB,KAkDPI,KAAO,WACS,OAAjB,EAAKjC,SAAgD,OAA5B,EAAKA,QAAQ4B,aAG1C,EAAK5B,QAAU,EAAKA,QAAS4B,WACd,EAAKH,UAAU,EAAKzB,QAASsB,OAC5CA,CAAO,EAAKtB,QAASgC,WAxDT,KA2DPE,OAAS,WACd,OAAwB,OAAjB,EAAKlC,SAA+C,OAA5B,EAAKA,QAAQ6B,YA5DhC,KA+DPM,OAAS,WACd,OAAwB,OAAjB,EAAKnC,SAA+C,OAA5B,EAAKA,QAAQ4B,YA/D5CQ,KAAKpC,QAAUoC,KAAKnB,QAAU,CAC5BY,WAAY,KACZG,QAAS,GACTV,OAAQ,GACRM,WAAY,O,oBCuFHS,GAvES,SAAC,GAcyB,IAbvBhO,EAasB,EAbtBA,SACAiO,EAYsB,EAZtBA,SACAlF,EAWsB,EAXtBA,MACAmF,EAUsB,EAVtBA,cACArT,EASsB,EATtBA,OACAsT,EAQsB,EARtBA,SACAC,EAOsB,EAPtBA,aACAC,EAMsB,EANtBA,OACAC,EAKsB,EALtBA,aACAC,EAIsB,EAJtBA,OACAC,EAGsB,EAHtBA,oBACcC,EAEQ,EAFtBC,aACAC,EACsB,EADtBA,SACsB,EACnBxI,oBAAS,GADU,mBACxCqD,EADwC,KAChCC,EADgC,KAW/C,OACE,kBAAC,IAAD,CAAKrK,QAAQ,iBACX,6BACE,kBAAC,IAAD,CACE4E,KAAK,QACL7F,KAAK,OACL8L,QAASsE,EACTvO,SAAUsO,EACVpE,KAAM,kBAAC0E,GAAA,EAAD,QAER,kBAAC,IAAD,CACE5K,KAAK,QACL7F,KAAK,OACL8L,QAASoE,EACTrO,SAAUoO,EACVlE,KAAM,kBAAC2E,GAAA,EAAD,QAER,kBAAC,WAAMC,MAAP,CAAaC,SAAU,SAAAjI,GAAC,OAAI0H,EAAoB1H,EAAEkI,OAAOpH,QAAQqH,aAAc,EAAGC,YAAY,QACjFlL,KAAK,SAChB,kBAAC,WAAMkD,OAAP,CAAcU,MAAO,GAArB,QACA,kBAAC,WAAMV,OAAP,CAAcU,MAAO,GAArB,UAGJ,kBAAC,IAAOkH,MAAR,KACE,kBAAC,IAAD,CACE7E,QAASgE,EACT9P,KAAK,UACL6B,SAAUA,GAAYkO,EACtBjF,QAASiF,GAERC,EAAW,SAAW,UAEzB,kBAAC,KAAD,CACEzE,QAAS,kBAAC+E,EAAD,CAAc5F,QAzCd,WACfY,GAAU,IAwCsCV,MAAOA,EAAOlO,OAAQA,IAChE8O,QAAQ,QACRC,QAASJ,EACTK,gBAxCoB,SAACD,GAC3BH,EAAUG,IAwCJE,UAAU,eAEV,kBAAC,IAAD,CAAQG,QAAS,kBAAMR,GAAU,KAAQkF,OCjF5ChG,GAAUC,IAAVD,OACAtB,GAAUC,KAAVD,OA2EQ8H,GAzEY,SAAC,GAAuD,IAAtDtG,EAAqD,EAArDA,QAASE,EAA4C,EAA5CA,MAAOlO,EAAqC,EAArCA,OAAqC,EAClDsL,mBAAS,IADyC,mBACzEkE,EADyE,KAChE+E,EADgE,OAEhD5S,YAAYqL,GAASa,gBAA9C2G,EAFyE,sBAGjExE,IAAKC,UAAbC,EAHyE,oBAK1E3N,EAAQ,uCAAG,WAAOE,GAAP,SAAAC,EAAA,sDACfwL,EAAMzL,GACNuL,IAFe,2CAAH,sDAKRyG,EAAe,SAAC1H,GACpBmD,EAAKe,eAAe,CAAC3N,KAAMyJ,KAGvBsB,EAAY,uCAAG,WAAOtB,EAAe2H,GAAtB,iBAAAhS,EAAA,yDACnBgS,EAAMC,iBACQ,KAAV5H,EAFe,iEAGDyH,EAAsB,CACtC7R,UAAW,CACT+F,KAAMqE,EACN/M,YANe,UAUH,QAPVwG,EAHa,QAUZxE,KAVY,iDAWb4S,EAAqBpO,EAAIxE,KAAK4S,cACpCL,EAAWK,EAAcjM,UAAUwB,KAAI,SAACtB,GAAD,OAAYA,EAAEnB,OACrDwI,EAAKe,eAAe,CAClBtI,UAAWiM,EAAcjM,UAAUwB,KAAI,SAACtB,GAAD,OAAYA,EAAEnB,QAEvD+M,EAAaG,EAActR,MAhBR,4CAAH,wDAmBlB,OACE,kBAAC,IAAD,CAAMT,KAAK,QAAQN,SAAUA,EAAU2N,KAAMA,EAAM/G,KAAM,UACvD,kBAAC,IAAKnG,KAAN,CACEH,KAAK,KACLK,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,6BAElC,kBAAC,GAAD,CAAQmL,SAAUF,EAAcC,YAAY,OAAOG,aAAW,KAEhE,kBAAC,IAAKzL,KAAN,CACEH,KAAK,YACLK,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,6BAElC,kBAAC,KAAD,CAAQyR,KAAK,OAAOC,gBAAiB,CAAC,MACnCtF,EAAQrF,KAAI,SAAC4K,GACZ,OAAO,kBAAC,GAAD,CAAQhI,MAAOgI,GAAIA,QAIhC,kBAAC,IAAD,KACE,kBAAC,IAAK/R,KAAN,CACEH,KAAK,OACLK,MAAO,CAAC,CAACC,UAAU,EAAMC,QAAS,kCAClC4R,aAAczP,GAAawC,OAE3B,kBAAC,GAAD,CAAoBmM,SAAUO,KAEhC,kBAAC,IAAKzR,KAAN,KACE,kBAAC,IAAD,CACEmG,KAAK,SACL7F,KAAK,UACLC,SAAS,SACT2L,MAAM,SACNG,KAAM,kBAACC,GAAA,EAAD,YC9DX/G,GAAUC,KAAVD,OAigBQ0M,GA9aQ,SAACrR,GAAiC,IAAD,EACzBjC,YAC3BqL,GAASG,iCADJ+H,EAD+C,sBAIHvT,YACjDqL,GAASI,qBAL2C,mBAI/C+H,EAJ+C,KAIrB9B,EAJqB,KAI9BjF,QAGlBgH,EAAQzE,iBAAO,IACfoB,EAAUpB,iBAAO,IAAImB,IACrBuD,EAASC,cATuC,EAUtBhK,mBAAS1H,EAAM0P,UAVO,mBAU/CA,EAV+C,KAUrCiC,EAVqC,OAWtBjK,mBAAS1H,EAAM0P,UAXO,mBAW/CkC,EAX+C,KAWrCC,EAXqC,OAYdnK,mBAAS,GAZK,mBAY/CoK,EAZ+C,KAYhCC,EAZgC,OAahBrK,mBAAS1H,EAAMoG,OAbC,mBAa/C4L,EAb+C,KAalCC,EAbkC,OAcRvK,mBAAS1H,EAAMqG,iBAdP,mBAc/CA,EAd+C,KAc9B6L,EAd8B,KAehDC,EA1CgB,SAAC/L,EAAgBC,EAAgC+L,GACvE,OAAOhM,EACJpB,QAAO,SAACsB,GAAD,QAAS8L,EAAe,GAAK/L,GAAiBlB,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOiB,EAAEjB,SAC5EkB,KAAI,SAACD,EAAGE,GAEP,IAAM6L,EAAkBD,EAAe9L,EAAEvB,UAAYuB,EAAEvB,UAAUC,QAC/D,SAACC,GAAD,OAAQqB,EAAEpB,oBAAoBC,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOJ,EAAEI,SAEjDiN,EAAQhM,EAAEvB,UAAUC,QACxB,SAACC,GAAD,OAAQqB,EAAEpB,oBAAoBC,MAAK,SAACC,GAAD,OAAOA,EAAEC,KAAOJ,EAAEI,SAAKsD,OAE5D,MAAO,CACLrH,IAAKgF,EAAEjB,IAAMmB,EACb5C,GAAI0C,EAAE1C,GACNlE,KAAM4G,EAAE5G,KACR6S,WAAUH,GAAe/L,EAAgBlB,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOiB,EAAEjB,MAC9DU,SAAUsM,EAAgB9L,KAAI,SAACtB,EAAGkH,GAAJ,MAAe,CAC3C7K,IAAK2D,EAAEI,IAAM8G,EACbrI,GAAImB,EAAEnB,GACNpE,KAAMuF,EAAEvF,KACR4S,QACAjI,OAAQ/D,EAAEjB,GACVkN,WAAUH,GAAe9L,EAAEpB,oBAAoBC,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOJ,EAAEI,cAoBrDmN,CAAgBR,EAAa3L,IAAmByL,GAEjErL,EAAa,CACjBC,KAAM,CACJ+L,IAAKvG,GACLvF,KAAM6F,KAIVS,qBAAU,WACRkB,EAAQjB,QAAQmB,WAAW,CACzBqE,cAAe,SAACrN,GACd6M,GAAmB,SAACS,GAClB,MAAM,GAAN,oBAAWA,GAAX,CAAgB,CAACtN,YAGrBuN,iBAAkB,SAACvN,GACjB6M,GAAmB,SAACS,GAClB,OAAOA,EAAI3N,QAAO,SAAAI,GAAC,OAAIA,EAAEC,KAAOA,WAItC8I,EAAQjB,QAAQmB,WAAW,CACzBwE,mBAAoB,SAACpQ,GACnBqQ,EAAuBrQ,IAEzBsQ,sBAAuB,SAACtQ,GACtBuQ,EAA6BvQ,MAGjC0L,EAAQjB,QAAQmB,WAAW,CACzB4E,8BAA+B,SAACxQ,GAC9BwQ,EAA8BxQ,IAEhCyQ,8BAA+B,SAACzQ,GAC9ByQ,EAA8BzQ,MAGlC0L,EAAQjB,QAAQmB,WAAW,CACzB8E,oCAAqC,SAAC1Q,GACpC0Q,EAAoC1Q,IAEtC2Q,oCAAqC,SAAC3Q,GACpC2Q,EAAoC3Q,QAGvC,IACH,IAAM4Q,EAAY,uCAAG,WAAOC,GAAP,SAAAxU,EAAA,sDACfwU,EAAWvN,UACboI,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,gBACRU,QAASoE,EAAWhS,MAEtB4Q,GAAmB,SAACS,GAClB,MAAM,GAAN,oBAAWA,GAAX,CAAgB,CAACtN,GAAIiO,EAAWhS,UAElCqQ,GAAY,KAEZxD,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,qBACRU,QAAS,CAACqE,YAAaD,EAAWhS,IAAK+I,OAAQiJ,EAAWjJ,UAE5DyI,EAAuB,CAACS,YAAaD,EAAWhS,IAAK+I,OAAQiJ,EAAWjJ,UAfvD,2CAAH,sDAkBZyI,EAAyB,SAAC,GAA6C,IAA5CS,EAA2C,EAA3CA,YAAalJ,EAA8B,EAA9BA,OAC5C4H,GAAe,SAAA7L,GACb,IAAMoN,EAAWpN,EAAMrC,MAAK,SAACuC,GAAD,OAAOA,EAAEjB,KAAOgF,KAM5C,OALAmJ,EAAStO,oBAAT,uBACKsO,EAAStO,qBADd,CAEE,CAACG,GAAIkO,KAEP/B,EAAMtE,QAAQ7C,GAAUmJ,EACjB,aAAIpN,OAGTsG,EAAa,SAAC+F,GAClBR,GAAe,SAAC7L,GACd,IAAMqN,EAAYrN,EAAMsN,WACtB,SAACpN,GAAD,OAAOA,EAAEjB,MAAQoN,EAAIpI,QAAUoI,EAAInR,QAErC,GAAImR,EAAI7O,GAAI,CACV,GAAGwC,EAAMqN,GAAW7P,KAAO6O,EAAI7O,GAAI,OAAOwC,EAC1C+H,EAAQjB,QAAQ0B,UAA6B,CAC3CJ,OAAQ,sCACRU,QAAS,CACPuD,IAAKA,EACLkB,SAAUvN,EAAMqN,GAAW7P,MAG/BwC,EAAMqN,GAAW7P,GAAK6O,EAAI7O,OAEvB,CACH,IAAMgQ,EAAUxN,EAAMqN,GAAW1O,UAAU2O,WACzC,SAACzO,GAAD,OAAOA,EAAEI,KAAOoN,EAAInR,OAEtB,GAAG8E,EAAMqN,GAAW1O,UAAU6O,GAAS9P,KAAO2O,EAAI3O,GAAI,OAAOsC,EAC7D+H,EAAQjB,QAAQ0B,UAA6B,CAC3CJ,OAAQ,sCACRU,QAAS,CACPuD,IAAKA,EACLkB,SAAUvN,EAAMqN,GAAW1O,UAAU6O,GAAS9P,MAGlDsC,EAAMqN,GAAW1O,UAAU6O,GAAS9P,GAAK2O,EAAI3O,GAQ/C,OANA2N,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAGVrC,EAAMtE,QAAQuF,EAAIpI,QAAUoI,EAAInR,KAAO8E,EAAMqN,GACtC,aAAIrN,OAIT+M,EAAsC,SAAC/U,GAC3C0V,EAA+B1V,EAAKqU,MAEhCW,EAAsC,SAAChV,GAC3C,IAAMqU,EAAG,eAAOrU,EAAKqU,KACrBA,EAAI7O,GAAK6O,EAAI7O,GAAKxF,EAAKuV,SAAW,GAClClB,EAAI3O,GAAK2O,EAAI3O,GAAK1F,EAAKuV,SAAW,GAClCG,EAA+BrB,IAE3BqB,EAAiC,SAACrB,GACtCR,GAAe,SAAC7L,GACd,IAAMqN,EAAYrN,EAAMsN,WACtB,SAACpN,GAAD,OAAOA,EAAEjB,MAAQoN,EAAIpI,QAAUoI,EAAInR,QAErC,GAAImR,EAAI7O,GACNwC,EAAMqN,GAAW7P,GAAK6O,EAAI7O,OACrB,CACL,IAAMgQ,EAAUxN,EAAMqN,GAAW1O,UAAU2O,WACzC,SAACzO,GAAD,OAAOA,EAAEI,KAAOoN,EAAInR,OAEtB8E,EAAMqN,GAAW1O,UAAU6O,GAAS9P,GAAK2O,EAAI3O,GAG/C,OADA0N,EAAMtE,QAAQuF,EAAIpI,QAAUoI,EAAInR,KAAO8E,EAAMqN,GACtC,aAAIrN,OA0CT6M,EAAgC,SAAC7U,GAAuB,IACrDiH,EAAcjH,EAAdiH,GAAIgF,EAAUjM,EAAViM,OACL3K,EAAYtB,EAAKsB,KACvBqU,EAA+BrU,EAAM2F,EAAIgF,IAErC6I,EAAgC,SAAC9U,GAAuB,IACrDiH,EAAcjH,EAAdiH,GAAIgF,EAAUjM,EAAViM,OACL3K,EAAYtB,EAAK4V,QACvBD,EAA+BrU,EAAM2F,EAAIgF,IAErC0J,EAAiC,SAACrU,EAAoB2F,EAAYgF,GACtE4H,GAAe,SAAC7L,GACd,IAAMqN,EAAYrN,EAAMsN,WAAU,SAACpN,GAAD,OAAOA,EAAEjB,MAAQgF,GAAUhF,MAC7D,GAAKgF,EAEE,CACL,IAAMuJ,EAAUxN,EAAMqN,GAAW1O,UAAU2O,WACzC,SAACzO,GAAD,OAAOA,EAAEI,KAAOA,KAElBe,EAAMqN,GAAW1O,UAAU6O,GAASlU,KAAOA,OAL3C0G,EAAMqN,GAAW/T,KAAOA,EAQ1B,OADA8R,EAAMtE,QAAQ7C,GAAUhF,GAAMe,EAAMqN,GAC7B,aAAIrN,OAIT6N,EAAS,uCAAG,WAAOpV,GAAP,iBAAAC,EAAA,6DAChB2S,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAHM,SAMEvC,EAAmB,CACnCvS,UAAW,CACTmV,SAAUlU,EAAMkU,SAChBxU,KAAMb,EAAOa,KACbkE,GAAI/E,EAAO+E,GACXmB,UAAWlG,EAAOkG,aAXN,OAMVnC,EANU,OAcVxE,EAAcwE,EAAIxE,KAAKmL,gCAC7B4E,EAAQjB,QAAQ0B,UAAU,CACxBM,QAAS9Q,EAAKiH,GACdmJ,OAAQ,qBAEVyD,GAAe,SAAC7L,GACd,MAAM,GAAN,oBAAWA,GAAX,CAAkBhI,OApBJ,2CAAH,sDAwBT+V,EAAqB,SAAC9J,EAAgBjM,GAC1C,IAAMsV,EAAY1B,EAAY0B,WAAU,SAACpN,GAAD,OAAOA,EAAEjB,KAAOgF,MAIzC,IAHD2H,EAAY0B,GAAW3O,UAAU2O,WAC7C,SAACzO,GAAD,OAAOA,EAAEI,KAAOjH,EAAKiH,QAGrB2M,EAAY0B,GAAW3O,UAAUuJ,KAAKlQ,GACtC6T,EAAe,aAAID,MAIjBoC,EAAe,WACnB7C,EAAe,CACbxS,UAAW,CACTX,KAAM,CACJ8V,SAAUlU,EAAMkU,SAChB9N,MAAO1D,OAAO7D,OAAO2S,EAAMtE,SAAS3G,KAAI,SAACD,GAAD,MAAQ,CAC9C5G,KAAM4G,EAAE5G,KACR2F,GAAIiB,EAAEjB,GACNH,oBAAqBoB,EAAEpB,oBAAoBqB,KAAI,SAACnB,GAAD,OAAOA,EAAEC,MACxDN,UAAWuB,EAAEvB,UAAUwB,KAAI,SAACtB,GAAD,MAAQ,CACjCI,GAAIJ,EAAEI,GACN3F,KAAMuF,EAAEvF,KACRoE,GAAImB,EAAEnB,WAGVuC,gBAAiBA,EAAgBE,KAAI,SAACnB,GAAD,OAAOA,EAAEC,UAGjDgP,MAAK,SAACzR,GACP4O,EAAMtE,QAAU,GAChByE,GAAY,GACZE,GAAY,GACZJ,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,SAyBRb,EAA+B,SAAC,GAA6C,IAA5C3I,EAA2C,EAA3CA,OAAQkJ,EAAmC,EAAnCA,YAC7CtB,GAAe,SAAA7L,GACb,IAAMsN,EAAYtN,EAAMsN,WAAU,SAAApN,GAAC,OAAIA,EAAEjB,KAAOgF,KAEhD,OADAjE,EAAMsN,GAAWxO,oBAAsBkB,EAAMsN,GAAWxO,oBAAoBF,QAAO,SAAAI,GAAC,OAAIA,EAAEC,KAAOkO,KAC1F,aAAInN,OAIf,OACE,kBAAC,KAAD,CACE6C,UAAU,EACVzD,YAAY,EACZiB,WAAYA,EACZnD,WAAY6O,EACZ7M,YAAY,EACZC,KAAM,QACN+O,aAAc,iBAAM,gBACpBnS,MAAO,kBACL,kBAAC,GAAD,CACEmI,MAAO2J,EACPzE,SAAU4E,EACV3E,cAAeA,EACflO,WAAUmO,GAAWhH,GAAc8I,EAAMtE,SACzC6C,oBAAqBgC,EACrBlC,cAAe1B,EAAQjB,QAAQkC,SAC/BO,cAAexB,EAAQjB,QAAQmC,SAC/BS,OAAQ3B,EAAQjB,QAAQ8B,KACxBY,OAAQzB,EAAQjB,QAAQiC,KACxB/S,OAAQ4D,EAAMmC,MACduN,SAAUkC,EACV3B,aAAcS,GACdR,SAAS,eAIb,kBAAC,GAAD,CACE/N,MAAM,KACNC,UAAU,KACVd,IAAI,KACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA1D,UAAW,KACXD,MAAO,KACPuK,WAAYA,MAGhB,kBAAC,GAAD,CACEvK,MAAM,KACNC,UAAU,KACVd,IAAI,KACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA2G,UAAU,EACVrK,UAAW,KACXD,MAAO,KACPuK,WAAYA,MAGhB,kBAAC,GAAD,CACEvK,MAAM,iBACNC,UAAU,OACVd,IAAI,OACJmE,MAAM,MACNpD,OAAQ,SACN3C,EACAoG,GAEA,OACE,kBAAC,GAAD,CACEqD,MAAOzJ,EACP4Q,SAAU,SAAC5Q,GAAD,OA5NG,SAACA,EAAoB2F,EAAYgF,GACxDoH,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAGV5B,GAAe,SAAC7L,GACd,IAAMqN,EAAYrN,EAAMsN,WAAU,SAACpN,GAAD,OAAOA,EAAEjB,MAAQgF,GAAUhF,MAC7D,GAAKgF,EAWE,CACL,IAAMuJ,EAAUxN,EAAMqN,GAAW1O,UAAU2O,WACzC,SAACzO,GAAD,OAAOA,EAAEI,KAAOA,KAElB8I,EAAQjB,QAAQ0B,UAAuB,CACrCJ,OAAQ,gCACRU,QAAS,CACP7E,SACAhF,KACA2O,QAAS5N,EAAMqN,GAAW1O,UAAU6O,GAASlU,KAC7CA,UAGJ0G,EAAMqN,GAAW1O,UAAU6O,GAASlU,KAAOA,OAvB3CyO,EAAQjB,QAAQ0B,UAAuB,CACrCJ,OAAQ,gCACRU,QAAS,CACP7E,SACAhF,KACA2O,QAAS5N,EAAMqN,GAAW/T,KAC1BA,UAGJ0G,EAAMqN,GAAW/T,KAAOA,EAiB1B,OADA8R,EAAMtE,QAAQ7C,GAAUhF,GAAMe,EAAMqN,GAC7B,aAAIrN,MA0LDmO,CAAiB7U,EAAMoG,EAAOxE,IAAKwE,EAAOuE,cAMpD,kBAAC,GAAD,CACElI,MAAM,YACNC,UAAU,YACVC,OAAQ,SAACmS,EAAW1O,GAClB,IAAM2O,GAAQ3O,EAAOuE,OACfA,EAASoK,EAAO3O,EAAOxE,IAAMwE,EAAOuE,OACpCkJ,EAAckB,OAAOxO,EAAYH,EAAOxE,IAE9C,OAAIwE,EAAOyM,SAEP,kBAAC,IAAD,CACEhN,KAAK,QACL+F,MAAM,iBACNG,KAAM,kBAAC2E,GAAA,EAAD,MACN5E,QAAS,kBAhHF,SAAC,GAAqE,IAApE+H,EAAmE,EAAnEA,YAAalJ,EAAsD,EAAtDA,OAC9BkJ,GACFpF,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,wBACRU,QAAS,CAACqE,cAAalJ,YAEzB2I,EAA6B,CAACO,cAAalJ,aAE3C8D,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,mBACRU,QAAS7E,IAEX6H,GAAmB,SAAAS,GACjB,OAAOA,EAAI3N,QAAO,SAAAI,GAAC,OAAIA,EAAEC,KAAOgF,QAElCsH,GAAY,IAiGa+C,CAAa,CAACrK,SAAQkJ,mBAIvCzN,EAAOwM,OAA0B,IAAjBxM,EAAOwM,MAClB,KAIP,kBAAC,IAAD,CAAK1R,MAAM,UACR6T,GACC,kBAAC,GAAD,CACEpK,OAAQvE,EAAOxE,IACfgJ,MAAO6J,IAGX,kBAAC,IAAD,CACEQ,QAAM,EACNpP,KAAK,QACL+F,MAAM,SACNG,KAAM,kBAACmJ,GAAA,EAAD,MACNpJ,QAAS,kBAAM6H,EAAa,eAAIvN,aC9fxCoE,GAAWC,IAAXD,OAiDO2K,GA/Cc,SAAC,GAAyD,IAAvDzK,EAAsD,EAAtDA,QAASE,EAA6C,EAA7CA,MAAOlO,EAAsC,EAAtCA,OAAsC,EAC7C2B,YAAYqL,GAASM,iBADwB,mBAC7EoL,EAD6E,KACzDtK,EADyD,KACzDA,QADyD,EAErE4B,IAAKC,UAAbC,EAF6E,oBAI9E3N,EAAQ,uCAAG,WAAOE,GAAP,SAAAC,EAAA,sDACfwL,EAAMzL,GACNuL,IAFe,2CAAH,sDAKRK,EAAY,uCAAG,WAAOtB,EAAe2H,GAAtB,iBAAAhS,EAAA,6DACnBgS,EAAMC,iBADa,SAED+D,EAAkB,CAClC/V,UAAW,CACTkI,OAAQkC,EACR/M,YALe,UAQH,QANVwG,EAFa,QAQZxE,KARY,iDASb6I,EAAkBrE,EAAIxE,KAAKsL,gBACjC4C,EAAKe,eAAe,CAClBvJ,GAAImD,EAAOnD,KAXM,2CAAH,wDAelB,OACE,kBAAC,IAAD,CAAM7E,KAAK,QAAQN,SAAUA,EAAU2N,KAAMA,GAC3C,kBAAC,IAAKlN,KAAN,CACEH,KAAK,SACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,+BAEnC,kBAAC,GAAD,CAAQmL,SAAUF,EAAcC,YAAY,SAASG,aAAW,EAACL,QAASA,KAE5E,kBAAC,IAAM6F,MAAP,CAAa0E,SAAO,EAACxP,KAAK,WACxB,kBAAC,IAAKnG,KAAN,CACEH,KAAK,KACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,KACE,kBAAC,IAAD,CAAQM,KAAK,UAAUC,SAAS,SAAS8L,KAAM,kBAACC,GAAA,EAAD,YCtCjD/G,GAAWC,KAAXD,OAmROqQ,GAlQS,SAAChV,GAAkC,IAAD,EAC5BjC,YAAYqL,GAASM,iBAA1CoL,EADiD,sBAE5B/W,YAAYqL,GAASQ,cAA1CqL,EAFiD,sBAGpBlX,YAAYqL,GAASU,sBAHD,mBAGjDyH,EAHiD,KAGhC/G,EAHgC,KAGhCA,QAHgC,EAI1B9C,mBAAS1H,EAAM8G,SAJW,mBAIjDA,EAJiD,KAIxCoO,EAJwC,OAKdxN,mBAAS1H,EAAM+G,mBALD,mBAKjDoO,EALiD,KAKlCC,EALkC,OAMxB1N,mBAAS1H,EAAM0P,UANS,mBAMjDA,EANiD,KAMvCiC,EANuC,OAOxBjK,mBAAS1H,EAAM0P,UAPS,mBAOjDkC,EAPiD,KAOvCC,EAPuC,KAQlDJ,EAASC,cARyC,EAShBhK,mBAAS,GATO,mBASjDoK,EATiD,KASlCC,EATkC,KAUlDP,EAAQzE,iBAAO,IACfoB,EAAUpB,iBAAO,IAAImB,IAErBzH,EAAa,CACjBC,KAAM,CACJ+L,IAAKvG,GACLvF,KAAM6F,KAIVS,qBAAU,WACRkB,EAAQjB,QAAQmB,WAAW,CACzBgH,aAAc,SAAChQ,GACb+P,GAAiB,SAACzC,GAChB,MAAM,GAAN,oBAAWA,GAAX,CAAgB,CAACtN,YAGrBiQ,cAAe,SAACjQ,GACd+P,GAAiB,SAACzC,GAChB,OAAOA,EAAI3N,QAAO,SAAAI,GAAC,OAAIA,EAAEC,KAAOA,WAItC8I,EAAQjB,QAAQmB,WAAW,CACzBkH,wBAAyB,SAAC9S,GACxB8S,EAAwB9S,IAE1B+S,wBAAyB,SAAC/S,GACxB+S,EAAwB/S,QAG3B,IAEH,IAAMiK,EAAU,uCAAG,WAAO+F,GAAP,eAAA3T,EAAA,yDACXqN,EAAQrF,EAAQ4M,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAOoN,EAAIpN,MAC/CyB,EAAQqF,GAAOlF,SAAWwL,EAAIxL,QAAUH,EAAQqF,GAAOrI,KAAO2O,EAAI3O,GAFpD,iDAGjB2N,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAGVrC,EAAMtE,QAAQuF,EAAIpN,IAAMoN,EACxBtE,EAAQjB,QAAQ0B,UAAyB,CACvCM,QAAS,CACPyE,SAAS,eAAK7M,EAAQqF,IACtBsJ,SAAS,eAAKhD,IAEhBjE,OAAQ,4BAEViE,EAAIzE,mBAAqByE,EAAIzE,kBAC7BlH,EAAQqF,GAASsG,EACjByC,GAAW,SAAAlO,GACT,OAAO,aAAIA,MAnBI,2CAAH,sDAuBVuO,EAA0B,SAAC9S,GAC/BiT,EAAyBjT,EAAIgT,WAEzBD,EAA0B,SAAC/S,GAC/BiT,EAAyBjT,EAAIkR,WAGzB+B,EAAwB,uCAAG,WAAOjD,GAAP,SAAA3T,EAAA,sDAC/BoW,GAAW,SAAApO,GACT0K,EAAMtE,QAAQuF,EAAIpN,IAAMoN,EACxB,IAAMtG,EAAQrF,EAAQ4M,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAOoN,EAAIpN,MAElD,OADAyB,EAAQqF,GAASsG,EACV,aAAI3L,MALkB,2CAAH,sDAqBxBsN,EAAe,WACnB7C,EAAe,CACbxS,UAAW,CACTX,KAAM,CACJ8V,SAAUlU,EAAMkU,SAChBnN,kBAAmBoO,EAAc5O,KAAI,SAAAnB,GAAC,OAAIA,EAAEC,MAC5CyB,QAASpE,OAAO7D,OAAO2S,EAAMtE,SAAS3G,KAAI,SAAAS,GAAC,MAAK,CAC9C3B,GAAI2B,EAAE3B,GACNvB,GAAIkD,EAAElD,GACNmD,OAAQD,EAAEC,eAIfoN,MAAK,WACN7C,EAAMtE,QAAU,GAChByE,GAAY,GACZE,GAAY,GACZJ,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,SAMRI,EAAS,uCAAG,WAAO9K,GAAP,iBAAArK,EAAA,6DAChB2S,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAHM,SAMGoB,EAAkB,CACnClW,UAAW,CACTkI,OAAQkC,EAAMlC,OACdnD,GAAIqF,EAAMrF,GACVoQ,SAAUlU,EAAMkU,YAVJ,OAMVtR,EANU,OAaVqE,EAAkBrE,EAAIxE,KAAKwL,aACjCsL,GAAW,SAAAlO,GACT,MAAM,GAAN,oBAAWA,GAAX,CAAcC,OAfA,2CAAH,sDAmBT0F,EAAe,uCAAG,WAAOxD,GAAP,mBAAArK,EAAA,sEACJgW,EAAkB,CAClC/V,UAAW,CACTkI,OAAQkC,EAAMlC,OACd7K,OAAQ4D,EAAMmC,SAJI,UAON,QANVS,EADgB,QAOfxE,KAPe,uBAQd+N,EAAQrF,EAAQ4M,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAO8D,EAAM9D,MACpD8D,EAAM6E,mBAAoB,EAC1BlH,EAAQqF,GAAShD,EACjB+L,GAAW,SAAAlO,GACT,OAAO,aAAIA,MAZO,iCAgBhBC,EAAkBrE,EAAIxE,KAAKsL,gBACjCP,EAAMrF,GAAKmD,EAAOnD,GAjBI,UAkBhB4I,EAAWvD,GAlBK,4CAAH,sDAqBfwM,EAAiB7D,EAC0ChL,EAA/DA,EAAQ9B,QAAO,SAAAgC,GAAC,OAAKmO,EAAchQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAO2B,EAAE3B,SAc1D,OACE,kBAAC,KAAD,CACE4D,UAAU,EACVzD,YAAY,EACZiB,WAAYA,EACZnD,WAAYqS,EACZrQ,YAAY,EACZC,KAAM,QACN+O,aAAc,iBAAM,gBACpBnS,MAAO,kBACL,kBAAC,GAAD,CACEmI,MAAO2J,EACPzE,SAAU4E,EACV3E,cAAejF,EACfjJ,WAAUmO,GAAWhH,GAAc8I,EAAMtE,SACzC9Q,OAAQ4D,EAAMmC,MACduN,SAAUkC,EACVhC,OAAQzB,EAAQjB,QAAQiC,KACxBW,OAAQ3B,EAAQjB,QAAQ8B,KACxBa,cAAe1B,EAAQjB,QAAQkC,SAC/BO,cAAexB,EAAQjB,QAAQmC,SAC/BU,oBAAqBgC,EACrB9B,aAAc4E,GACd3E,SAAS,iBAIb,kBAAC,GAAD,CACE/N,MAAM,SACNC,UAAU,SACVd,IAAI,SACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA2G,UAAU,EACVvE,OAAO,EACP9F,UAAW,SACXD,MAAO,SACPuK,WAAYA,EACZC,sBAGJ,kBAAC,GAAD,CACExK,MAAM,KACNC,UAAU,KACVd,IAAI,KACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA2G,UAAU,EACVrK,UAAW,KACXD,MAAO,KACPuK,WAAYA,MAGhB,kBAAC,GAAD,CACEvK,MAAM,YACNC,UAAU,YACVC,OAAQ,SAACmS,EAAW1O,GAClB,OAAGqP,EAAchQ,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOS,EAAOT,MAEvC,kBAAC,IAAD,CACEE,KAAK,QACL+F,MAAM,iBACNG,KAAM,kBAAC2E,GAAA,EAAD,MACN5E,QAAS,kBA7EDnG,EA6EoBS,EAAOT,GA5E/C+P,GAAiB,SAAAtO,GACf,OAAOA,EAAQ9B,QAAO,SAAAgC,GAAC,OAAIA,EAAE3B,KAAOA,QAGtC8I,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,gBACRU,QAAS7J,SAEXsM,GAAY,GATd,IAAsBtM,KAkFZ,kBAAC,IAAD,CACEsP,QAAM,EACNpP,KAAK,QACL+F,MAAM,SACNG,KAAM,kBAACmJ,GAAA,EAAD,MACNpJ,QAAS,kBAvKCiH,EAuKkB,eAAK3M,GAtK3CsP,GAAiB,SAAApO,GACf,MAAM,GAAN,oBAAWA,GAAX,CAAc,CAAC3B,GAAIoN,EAAIpN,SAEzB8I,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,eACRU,QAASuD,EAAIpN,UAGfsM,GAAY,GATO,IAACc,U,UCvGhBvI,GAAWC,IAAXD,OAiDO0L,GA/CgB,SAAC,GAAyD,IAAvDxL,EAAsD,EAAtDA,QAASE,EAA6C,EAA7CA,MAAOlO,EAAsC,EAAtCA,OAAsC,EAC/C2B,YAAYqL,GAASO,mBAD0B,mBAC/EmL,EAD+E,KAC3DtK,EAD2D,KAC3DA,QAD2D,EAEvE4B,IAAKC,UAAbC,EAF+E,oBAIhF3N,EAAQ,uCAAG,WAAOE,GAAP,SAAAC,EAAA,sDACfwL,EAAMzL,GACNuL,IAFe,2CAAH,sDAKRK,EAAY,uCAAG,WAAOtB,EAAe2H,GAAtB,iBAAAhS,EAAA,6DACnBgS,EAAMC,iBADa,SAED+D,EAAkB,CAClC/V,UAAW,CACTuI,SAAU6B,EACV/M,YALe,UAQH,QANVwG,EAFa,QAQZxE,KARY,iDASbkJ,EAAsB1E,EAAIxE,KAAKuL,kBACrC2C,EAAKe,eAAe,CAClBvJ,GAAIwD,EAASxD,KAXI,2CAAH,wDAelB,OACE,kBAAC,IAAD,CAAM7E,KAAK,QAAQN,SAAUA,EAAU2N,KAAMA,GAC3C,kBAAC,IAAKlN,KAAN,CACEH,KAAK,WACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,GAAD,CAAQmL,SAAUF,EAAcC,YAAY,WAAWG,aAAW,EAACL,QAASA,KAE9E,kBAAC,IAAM6F,MAAP,CAAa0E,SAAO,EAACxP,KAAK,WACxB,kBAAC,IAAKnG,KAAN,CACEH,KAAK,KACLK,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCAEnC,kBAAC,IAAD,OAEF,kBAAC,IAAKJ,KAAN,KACE,kBAAC,IAAD,CAAQM,KAAK,UAAUC,SAAS,SAAS8L,KAAM,kBAACC,GAAA,EAAD,YCrCjD/G,GAAWC,KAAXD,OAwROkR,GArQW,SAAC7V,GAAkC,IAAD,EAC9BjC,YAAYqL,GAASO,mBAA1CmL,EADmD,sBAE5B/W,YAAYqL,GAASS,gBAA5CiM,EAFmD,sBAGtB/X,YAAYqL,GAASW,yBAHC,mBAGnDwH,EAHmD,KAGlC/G,EAHkC,KAGlCA,QAHkC,EAIxB9C,mBAAS1H,EAAMmH,WAJS,mBAInDA,EAJmD,KAIxC4O,EAJwC,OAKZrO,mBAAS1H,EAAMoH,qBALH,mBAKnD4O,EALmD,KAKlCC,EALkC,OAM1BvO,mBAAS1H,EAAM0P,UANW,mBAMnDA,EANmD,KAMzCiC,EANyC,OAO1BjK,mBAAS1H,EAAM0P,UAPW,mBAOnDkC,EAPmD,KAOzCC,EAPyC,KAQpDJ,EAASC,cAR2C,EASlBhK,mBAAS,GATS,mBASnDoK,EATmD,KASpCC,EAToC,KAUpDP,EAAQzE,iBAAO,IACfoB,EAAUpB,iBAAO,IAAImB,IAErBzH,EAAa,CACjBC,KAAM,CACJ+L,IAAKvG,GACLvF,KAAM6F,KAKVS,qBAAU,WACRkB,EAAQjB,QAAQmB,WAAW,CACzB6H,eAAgB,SAAC7Q,GACf4Q,GAAmB,SAACtD,GAClB,MAAM,GAAN,oBAAWA,GAAX,CAAgB,CAACtN,YAGrB8Q,gBAAiB,SAAC9Q,GAChB4Q,GAAmB,SAACtD,GAClB,OAAOA,EAAI3N,QAAO,SAAAI,GAAC,OAAIA,EAAEC,KAAOA,WAItC8I,EAAQjB,QAAQmB,WAAW,CACzBkH,wBAAyB,SAAC9S,GACxB8S,EAAwB9S,IAE1B+S,wBAAyB,SAAC/S,GACxB+S,EAAwB/S,QAI3B,IAEH,IAAMiK,EAAU,uCAAG,WAAO+F,GAAP,eAAA3T,EAAA,yDACXqN,EAAQhF,EAAUuM,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAOoN,EAAIpN,MACjD8B,EAAUgF,GAAO7E,WAAamL,EAAInL,UAAYH,EAAUgF,GAAOrI,KAAO2O,EAAI3O,GAF5D,iDAGjB2N,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAGVrC,EAAMtE,QAAQuF,EAAIpN,IAAMoN,EACxBtE,EAAQjB,QAAQ0B,UAAyB,CACvCM,QAAS,CACPyE,SAAS,eAAKxM,EAAUgF,IACxBsJ,SAAS,eAAKhD,IAEhBjE,OAAQ,4BAEViE,EAAIzE,mBAAqByE,EAAIzE,kBAC7B7G,EAAUgF,GAASsG,EACnBsD,GAAa,SAAA/O,GACX,OAAO,aAAIA,MAnBI,2CAAH,sDAwBVuO,EAA0B,SAAC9S,GAC/BiT,EAAyBjT,EAAIgT,WAEzBD,EAA0B,SAAC/S,GAC/BiT,EAAyBjT,EAAIkR,WAGzB+B,EAAwB,uCAAG,WAAOjD,GAAP,SAAA3T,EAAA,sDAC/BiX,GAAa,SAAA5O,GACXqK,EAAMtE,QAAQuF,EAAIpN,IAAMoN,EACxB,IAAMtG,EAAQhF,EAAUuM,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAOoN,EAAIpN,MAEpD,OADA8B,EAAUgF,GAASsG,EACZ,aAAItL,MALkB,2CAAH,sDAsBxBiN,EAAe,WACnB7C,EAAe,CACbxS,UAAW,CACTX,KAAM,CACJ8V,SAAUlU,EAAMkU,SAChB9M,oBAAqB4O,EAAgBzP,KAAI,SAAAnB,GAAC,OAAIA,EAAEC,MAChD8B,UAAWzE,OAAO7D,OAAO2S,EAAMtE,SAAS3G,KAAI,SAAAS,GAAC,MAAK,CAChD3B,GAAI2B,EAAE3B,GACNvB,GAAIkD,EAAElD,GACNwD,SAAUN,EAAEM,iBAIjB+M,MAAK,WACN7C,EAAMtE,QAAU,GAChByE,GAAY,GACZE,GAAY,GACZJ,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,SAMRI,EAAS,uCAAG,WAAO9K,GAAP,iBAAArK,EAAA,6DAChB2S,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,KAHM,SAMGiC,EAAoB,CACrC/W,UAAW,CACTuI,SAAU6B,EAAM7B,SAChBxD,GAAIqF,EAAMrF,GACVoQ,SAAUlU,EAAMkU,YAVJ,OAMVtR,EANU,OAaVuE,EAAuBvE,EAAIxE,KAAKyL,eACtCkM,GAAa,SAAA/O,GACX,MAAM,GAAN,oBAAWA,GAAX,CAAcG,OAfA,2CAAH,sDAmBTwF,EAAe,uCAAG,WAAOxD,GAAP,mBAAArK,EAAA,sEACJgW,EAAkB,CAClC/V,UAAW,CACTuI,SAAU6B,EAAM7B,SAChBlL,OAAQ4D,EAAMmC,SAJI,UAON,QANVS,EADgB,QAOfxE,KAPe,uBAQd+N,EAAQhF,EAAUuM,WAAU,SAAA1M,GAAC,OAAIA,EAAE3B,KAAO8D,EAAM9D,MACtD8D,EAAM6E,mBAAoB,EAC1B7G,EAAUgF,GAAShD,EACnB4M,GAAa,SAAA/O,GACX,OAAO,aAAIA,MAZO,iCAgBhBM,EAAsB1E,EAAIxE,KAAKuL,kBACrCR,EAAMrF,GAAKwD,EAASxD,GAjBE,UAkBhB4I,EAAWvD,GAlBK,4CAAH,sDAqBfiN,EAAmBtE,EAC4C3K,EAAnEA,EAAUnC,QAAO,SAAAgC,GAAC,OAAKgP,EAAgB7Q,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAO2B,EAAE3B,SAa9D,OACE,kBAAC,KAAD,CACE4D,UAAU,EACVzD,YAAY,EACZiB,WAAYA,EACZnD,WAAY8S,EACZ9Q,YAAY,EACZC,KAAM,QACN+O,aAAc,iBAAM,gBACpBnS,MAAO,kBACL,kBAAC,GAAD,CACEmI,MAAO2J,EACPzE,SAAU4E,EACV3E,cAAejF,EACfjJ,WAAUmO,GAAWhH,GAAc8I,EAAMtE,SACzC9Q,OAAQ4D,EAAMmC,MACduN,SAAUkC,EACVhC,OAAQzB,EAAQjB,QAAQiC,KACxBW,OAAQ3B,EAAQjB,QAAQ8B,KACxBa,cAAe1B,EAAQjB,QAAQkC,SAC/BO,cAAexB,EAAQjB,QAAQmC,SAC/BU,oBAAqBgC,EACrB9B,aAAc2F,GACd1F,SAAS,mBAIb,kBAAC,GAAD,CACE/N,MAAM,WACNC,UAAU,WACVd,IAAI,WACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA2G,UAAU,EACVvE,OAAO,EACP9F,UAAW,WACXD,MAAO,WACPuK,WAAYA,EACZC,sBAGJ,kBAAC,GAAD,CACExK,MAAM,KACNC,UAAU,KACVd,IAAI,KACJmE,MAAM,MACNmB,OAAQ,SAACd,GAAD,MAAa,CACnBA,SACA2G,UAAU,EACVrK,UAAW,KACXD,MAAO,KACPuK,WAAYA,MAGhB,kBAAC,GAAD,CACEvK,MAAM,YACNC,UAAU,YACVC,OAAQ,SAACmS,EAAW1O,GAClB,OAAGkQ,EAAgB7Q,MAAK,SAAAC,GAAC,OAAIA,EAAEC,KAAOS,EAAOT,MAEzC,kBAAC,IAAD,CACEE,KAAK,QACL+F,MAAM,iBACNG,KAAM,kBAAC2E,GAAA,EAAD,MACN5E,QAAS,kBA5EDnG,EA4EoBS,EAAOT,GA3E/C4Q,GAAmB,SAAA9O,GACjB,OAAOA,EAAUnC,QAAO,SAAAgC,GAAC,OAAIA,EAAE3B,KAAOA,QAGxC8I,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,kBACRU,QAAS7J,SAEXsM,GAAY,GATd,IAAsBtM,KAiFZ,kBAAC,IAAD,CACEsP,QAAM,EACNpP,KAAK,QACL+F,MAAM,SACNG,KAAM,kBAACmJ,GAAA,EAAD,MACNpJ,QAAS,kBAtKCiH,EAsKkB,eAAK3M,GArK3CmQ,GAAmB,SAAAjP,GACjB,MAAM,GAAN,oBAAWA,GAAX,CAAc,CAAC3B,GAAIoN,EAAIpN,SAEzB8I,EAAQjB,QAAQ0B,UAAU,CACxBJ,OAAQ,iBACRU,QAASuD,EAAIpN,UAGfsM,GAAY,GATO,IAACc,UC9GjB4D,GAASC,KAATD,MA8CQE,GAxCQ,SAAC,GAAsC,IAApCna,EAAmC,EAAnCA,OACxB,OACE,kBAAC,KAAD,CACE6M,UAAU,EACVhI,iBAAkB,CAAC,KACnBuV,WAAY,gBAAGC,EAAH,EAAGA,SAAH,OAAkB,kBAACC,GAAA,EAAD,CAAoBC,OAAQF,GAAY,GAAK,KAC3E5V,UAAU,gCACV+V,mBAAoB,SAEpB,kBAACP,GAAD,CAAOQ,OAAO,QAAQvV,IAAI,IAAIT,UAAU,8BACtC,kBAAC,GAAD,CACEuF,MAAOhK,EAAOgK,MACdC,gBAAiBjK,EAAOiK,gBACxB6N,SAAU9X,EAAOiJ,GACjBlD,MAAO/F,EAAO+F,MACduN,SAAUtT,EAAOsT,YAGrB,kBAAC2G,GAAD,CAAOQ,OAAO,UAAUvV,IAAI,IAAIT,UAAU,8BACxC,kBAAC,GAAD,CACEiG,QAAS1K,EAAO0K,QAChBC,kBAAmB3K,EAAO2K,kBAC1BmN,SAAU9X,EAAOiJ,GACjBlD,MAAO/F,EAAO+F,MACduN,SAAUtT,EAAOsT,YAGrB,kBAAC2G,GAAD,CAAOQ,OAAO,YAAYvV,IAAI,IAAIT,UAAU,8BAC1C,kBAAC,GAAD,CACEsG,UAAW/K,EAAO+K,UAClBC,oBAAqBhL,EAAOgL,oBAC5B8M,SAAU9X,EAAOiJ,GACjBlD,MAAO/F,EAAO+F,MACduN,SAAUtT,EAAOsT,c,wCCrCpBxF,GAAUC,IAAVD,OACA4M,GAAQC,KAARD,KAyFQE,GAvFI,SAAChX,GAA+C,IAAD,EAChC0H,mBAAS,IADuB,mBACzDU,EADyD,KAC/C6O,EAD+C,OAElClZ,YAAYqL,GAASY,sBAA5CkN,EAFyD,sBAGrDjX,YAAS3D,EAAQa,UAAW,CACrCga,MAAOnX,EAAMK,SAASC,MACtBvB,UAAW,CACTsG,GAAIrF,EAAMK,SAASC,OAASN,EAAMK,SAASC,MAAM+E,IAEnD+R,YAAa,SAAAhb,GACXoR,QAAQC,IAAIrR,GACTA,GACD6a,EAAY,CAAC7a,EAAOe,eAXsC,gBAchE,IAAMsU,EAASC,cACFmC,EAAQ5T,YAAS3D,EAAQK,iBAA/ByB,KACAA,EAAQ6B,YAAS3D,EAAQiB,oBAAzBa,KAhByD,EAiBtBsJ,mBAAStJ,EAAOA,EAAKiZ,iBAAmB,GAjBlB,mBAiBzDC,EAjByD,KAiB1CC,EAjB0C,KAmB1DC,EAAY,uCAAG,WAAOC,GAAP,eAAA3Y,EAAA,sEACDoY,EAAoB,CACpCnY,UAAW,CACT+F,KAAM2S,EAAOC,iBAHE,QACb9U,EADa,QAMXxE,OACN6Y,EAAYrU,EAAIxE,KAAKuZ,mBACrBlG,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,MAVO,2CAAH,sDAgBlB5G,qBAAU,WACRwE,EAAOtT,UAAU,CACfC,KAAM,CACJyV,KAAM,OAGT,IAEH5G,qBAAU,WACS,IAAd4G,EAAKA,MACN+D,YAAW,WACTL,EAAiB,KAChB,OAEJ,CAAC1D,EAAKA,OAET,IAAMgE,IAAUzP,EAASO,OAAS,KAAKP,EAAS,GAAGsH,SACnD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAKhS,KAAM,IACT,kBAAC,KAAD,CAAM6H,KAAM,SAERsS,GAAWP,GAAiB,GAC1B,kBAAC,KAAD,CAAOpK,QAAS2G,EAAKA,MACnB,kBAACiD,GAAD,CAAMrL,KAAM,kBAACqM,GAAA,EAAD,MAAsB3V,MAAM,aAAa4V,YAAY,0BACjE,kBAACjB,GAAD,CAAMrL,KAAM,kBAACuM,GAAA,EAAD,MAAkB7V,MAAM,SAAS4V,YAAY,eACzD,kBAACjB,GAAD,CAAMrL,KAAM,kBAACwM,GAAA,EAAD,MAAyB9V,MAAM,OAAO4V,YAAY,gCAC9D,kBAACjB,GAAD,CAAMrL,KAAM,kBAACyM,GAAA,EAAD,MAAmB/V,MAAM,sBAAsB4V,YAAY,sBAI7E,kBAAC,GAAD,CACErN,YAAY,uCACZG,YAAY,SACZtF,KAAK,QACLoF,SAAU6M,MAKdpP,EAAS7B,KAAI,SAAC8B,EAAQ8D,GACpB,OACE,kBAAC,IAAD,CAAKgM,KAAK,IAAI7W,IAAK+G,EAAEhD,IAAM8G,GACzB,kBAAC,GAAD,CAAgB/P,OAAQiM,UCxE9BT,GAAmBwQ,KAAnBxQ,QAASyQ,GAAUD,KAAVC,MA0DF5W,OAxDI,SAACzB,GAClB,IAAIsY,EAAkBtY,EAAMuY,MAAMC,OAAZ,MAA8B,QAC9C/G,EAASC,cACTvD,EAAUsK,cAHsC,EAI9B7W,KAAjBC,EAJ+C,EAI/CA,QAAS1F,EAJsC,EAItCA,KAJsC,EAKpBuL,oBAAS,GALW,mBAK/CgR,EAL+C,KAKpCC,EALoC,KAUhDC,EAAU,uCAAG,sBAAA9Z,EAAA,sEACX2S,EAAOD,MAAMqH,QADF,OAEjBra,aAAasa,WAAW,SACxB3K,EAAQ4K,QAAQ,KAHC,2CAAH,qDAMhB,OACE,kBAAC,KAAD,CAAQpL,MAAO,CAAEqL,UAAW,UAC1B,kBAACX,GAAD,CAAOY,aAAW,EAACP,UAAWA,EAAWQ,WAZ1B,SAACR,GAClBC,EAAaD,IAWsDS,MAAO,SACtE,yBAAKtY,UAAWC,IAAIsY,SACjBjd,GAAI,UAAQA,EAAK8C,KAAb,YAAqB9C,EAAKkd,WAEjC,kBAAC,KAAD,CAAMF,MAAM,QAAQG,aAAc,CAAChB,GAAUrH,KAAK,UAChD,kBAAC,KAAK7R,KAAN,CAAWkC,IAAI,SAASmK,KAAM,kBAAC8N,GAAA,EAAD,MAAwB/N,QAAS,kBAAMxL,EAAMmO,QAAQG,KAAK,kBAAxF,UAGA,kBAAC,KAAKlP,KAAN,CAAWkC,IAAI,QAAQmK,KAAM,kBAAC+N,GAAA,EAAD,MAAsBhO,QAAS,kBAAMxL,EAAMmO,QAAQG,KAAK,iBAArF,SAIEzM,GACE,kBAAC,KAAKzC,KAAN,CAAWkC,IAAI,QAAQmK,KAAM,kBAACgO,GAAA,EAAD,MAAkBjO,QAAS,kBAAMxL,EAAMmO,QAAQG,KAAK,iBAAjF,SAKJ,kBAAC,KAAKlP,KAAN,CAAWkC,IAAI,OAAOmK,KAAM,kBAACiO,GAAA,EAAD,MAAoBlO,QAASoN,GAAzD,UAMJ,kBAAC,KAAD,CAAQ/X,UAAU,eAChB,kBAAC,GAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAO8Y,KAAK,cAAcnS,UAAW3E,KACrC,kBAAC,IAAD,CAAO8W,KAAK,cAAcnS,UAAWW,KACrC,kBAAC,IAAD,CAAOwR,KAAK,eAAenS,UAAWwP,KACtC,kBAAC,IAAD,CAAOxP,UAAWc,Y,yOCrD9BkF,QAAQC,IAAImM,+HACZ,IAAMC,GAAY1Z,cAAQ,YAAyE,IAAD,IAArE2Z,qBAAqE,MAArD,GAAqD,EAAjDC,EAAiD,EAAjDA,aAAcC,EAAmC,EAAnCA,UAAWC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SACjF1M,QAAQC,IAAI,CAAEqM,gBAAeC,eAAcC,YAAWC,UAASC,aAC/D1M,QAAQC,IAAImM,cASVE,EAAcvT,KAAI,SAAC8B,GACjB8R,IAAavb,MAAM,CACjBY,QAAS6I,EAAE7I,gBAMb4a,GAAgB,IAAIC,MAAW,SAACL,EAAWC,GAK/C,OAJAD,EAAUM,YAAW,gBAAGC,EAAH,EAAGA,QAAH,MAAuB,CAAEA,QAAQ,aAClDC,cAAc,UAAD,OAAYhc,aAAaic,QAAQ,WAC3CF,OAEAN,EAAQD,MAEXU,GAAO,IAAIC,KAAS,CACxBC,IAAuD,6CAGnDpJ,GAAa,IAAIqJ,KACjBpJ,GAAS,IAAIqJ,KAAa,CAC9BtJ,MAAOA,GACPkJ,KAAMna,aAAK,CACT6Z,GACAP,GACAa,KAEFK,mBAAmB,EACnBC,eAAgB,CACdC,OAAQ,CACNC,YAAa,UAEfC,MAAO,CACLD,YAAa,WAGjBE,UAAW,CACTC,MAAO,CACLle,UAAW,SAACme,EAAD,KAAoC,IAA/BjW,EAA8B,EAA9BA,GAAMmM,EAAwB,EAAxBA,MAAO+J,EAAiB,EAAjBA,YAS3B,OARY/J,EAAMgK,aAAa,CAC7BnW,GAAIkW,EAAY,CAACE,WAAY,SAAUpW,OACvCqW,SAAUlf,YAAF,KAEEN,EAAUE,eAU9BoV,GAAMrT,UAAU,CACdC,KAAM,CACJC,QAAQ,EACRC,YAAa,KACbuV,KAAM,KAuCK8H,OApCf,WACE,IAAM/T,EAAU,WAAO,IAAD,EACF7J,YAAYzB,EAAQM,aAAc,CAClDoB,OAAQ,SAACC,EAAOC,GACdD,EAAME,UAAU,CACdC,KAAM,CACJC,QAAQ,EACRC,YAAaJ,EAAeE,KAAKwd,kBALlCC,EADa,oBAgBpB,OAJA5O,qBAAU,WACR4O,MACC,IAGD,yBAAKhb,UAAU,OACX,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOib,OAAK,EAACnC,KAAK,IAAInS,UAAWuU,IACjC,kBAAC,IAAD,CAAOpC,KAAK,eAAenS,UAAWwU,QAMhD,OACE,kBAAC,KAAD,CAAgBvK,OAAQA,IACtB,kBAAC,IAAD,CAAYwK,SAAS,eACnB,kBAACrU,EAAD,S,cChHRsU,IAAS7Z,OACP,kBAAC,IAAM8Z,WAAP,KACE,kBAAC,GAAD,OAEFC,SAASC,eAAe,W","file":"static/js/main.8fedd6c2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"authFull\":\"Style_authFull__11haa\",\"blockAuth\":\"Style_blockAuth__11LZX\",\"profile\":\"Style_profile__3YvBD\",\"version\":\"Style_version__39Mvu\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"entityCard\":\"WordsPage_entityCard__1t-xY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"btnCreate\":\"TableEditWords_btnCreate__1I1nf\"};","import { gql } from 'apollo-boost';\n\nconst FRAGMENTS = {\n  user: `\n      name\n      lastName\n      email\n      id\n      role\n  `,\n  entity: `\n   id,\n    title,\n    irrverb {\n      form1EN,\n      form2EN,\n      form3EN,\n      ru\n    },\n    isNeededEdit,\n    isCreate,\n    words {\n      id,\n      en,\n      type,\n      disconnectTranslate {\n        id\n      }\n      translate {\n        ru,\n        id,\n        type\n      },\n    },\n    phrases {\n      id,\n      phrase,\n      ru\n    },\n    sentences {\n      id, \n      sentence,\n      ru\n    },\n    disconnectWords {\n      id\n    },\n    disconnectPhrases {\n      id\n    },\n    disconnectSentences {\n      id\n    }\n  `,\n};\n\nexport default FRAGMENTS;\n","import {gql} from 'apollo-boost';\nimport FRAGMENTS from './fragments';\n\nconst QUERIES = {\n  LOGIN: gql`\n      mutation login($loginData: LoginUserInput!) {\n          login(data: $loginData) {\n              user {\n                  ${FRAGMENTS.user}\n              }\n              token\n          }\n      }\n  `,\n  SIGNUP: gql`\n      mutation signUp($data: UserSignUpInput!) {\n          signup(data: $data) {\n              user {\n                  ${FRAGMENTS.user}\n              }\n              token\n          }\n      }\n  `,\n  CURRENT_USER: gql`\n      {\n          currentUser @client {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  GET_STEP_CLIENT: gql`\n      {\n          step @client\n      }\n  `,\n  REFRESH_USER: gql`\n      mutation {\n          refreshUser {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  IS_AUTH: gql`\n      {\n          isAuth @client\n      }\n  `,\n  USERS: gql`\n      query users {\n          users {\n              ${FRAGMENTS.user}\n          }\n      }\n  `,\n  COUNT_ENTITY: gql`\n      query countEntity {\n          aggregateEntity{\n              count\n          }\n      }\n  `,\n  COUNT_WORDS: gql`\n      query countWords {\n          aggregateWord{\n              count\n          }\n      }\n  `,\n  COUNT_TRANSLATE: gql`\n      query countTranslate {\n          aggregateTranslate{\n              count\n          }\n      }\n  `,\n  GET_ENTITIES: gql`\n      query getEntities($id: Int) {\n          entities(where: {userId: {equals: $id}, isCreate: {equals: true}}, orderBy: {updatedAt: desc}) {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n  getEntity: gql`\n      query getEntity($id: Int!) {\n          getEntity(id: $id) @client\n      }\n  `,\n  GET_ENTITIES_BY_WORD_CLIENT: gql`\n      query getEntitiesByWord($word: String!) {\n          getEntitiesByWord(word: $word) @client {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n  GET_PART_OF_SPEECH: gql`\n      query PartOfSpeech {\n          partOfSpeechDescs {\n              id,\n              type,\n              ru,\n              ua,\n              en\n          }\n      }\n  `,\n  GET_WORD: gql`\n      query getWord($entityId: Int!) {\n          entity(where: {\n              id: $entityId\n          }) {\n              id,\n              words {\n                  id,\n                  en,\n                  type,\n                  disconnectEntities {\n                      id\n                  }\n                  translate {\n                      id,\n                      ru,\n                      type,\n                      disconnectWords {\n                          id\n                      }\n                  }\n              }\n          }\n      }\n  `,\n  GET_COUNT_ENTITIES: gql`\n      query getCountEntities {\n          getCountEntities\n      }\n  `\n};\n\nexport default QUERIES;\n","export interface IUser {\n  name: string;\n  lastName: string;\n  email: string;\n  id: number;\n  role: UserRole\n}\n\nexport enum UserRole {\n  ADMIN = 'ADMIN',\n  STANDARD = 'STANDARD'\n}\n","import React from 'react';\nimport { Button, Checkbox, Form, Input } from 'antd';\nimport { useMutation } from '@apollo/react-hooks';\nimport QUERIES from '../../graphql/queries';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst LoginForm = () => {\n  const [login, { data, error }] = useMutation(QUERIES.LOGIN, {\n    update: (proxy, mutationResult) => {\n      proxy.writeData({\n        data: {\n          isAuth: true,\n          currentUser: mutationResult.data.login.user\n        }\n      });\n      localStorage.setItem('token', mutationResult.data.login.token);\n    }\n  });\n\n  const onFinish = async (values: any) => {\n    await login({\n      variables: {\n        loginData: values,\n      },\n    });\n  };\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default LoginForm;\n","import React from 'react';\nimport { Button, Form, Input } from 'antd';\nimport { useMutation } from '@apollo/react-hooks';\nimport QUERIES from '../../graphql/queries';\n\nconst layout = {\n  labelCol: { span: 8 },\n  wrapperCol: { span: 16 },\n};\nconst tailLayout = {\n  wrapperCol: { offset: 8, span: 16 },\n};\n\nconst SignUpForm = () => {\n  const [signup, { data }] = useMutation(QUERIES.SIGNUP, {\n    update: (proxy, mutationResult) => {\n      proxy.writeData({\n        data: {\n          isAuth: true,\n          currentUser: mutationResult.data.login.user\n        }\n      });\n      localStorage.setItem('token', mutationResult.data.login.token);\n    }\n  });\n  const onFinish = async (values: any) => {\n    const res = await signup({\n      variables: {\n        data: values,\n      },\n    });\n  };\n\n  return (\n    <Form\n      {...layout}\n      name=\"basic\"\n      initialValues={{ remember: true }}\n      onFinish={onFinish}\n    >\n      <Form.Item\n        label=\"Username\"\n        name=\"name\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Last name\"\n        name=\"lastName\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n      <Form.Item\n        label=\"Email\"\n        name=\"email\"\n        rules={[{ required: true, message: 'Please input your username!' }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Password\"\n        name=\"password\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        label=\"Repeat password\"\n        name=\"repeatPassword\"\n        rules={[{ required: true, message: 'Please input your password!' }]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item {...tailLayout}>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Submit\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n};\n\nexport default SignUpForm;\n","import React from 'react';\nimport {Redirect, RouteComponentProps} from 'react-router';\nimport {useApolloClient, useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\n\n//only page component\nconst withAuthRedirect = (Component: any) => {\n  return (props: RouteComponentProps | any) => {\n    const {data} = useQuery(QUERIES.IS_AUTH, {\n      fetchPolicy: 'cache-only',\n      onError: error => {},\n\n    });\n\n    let redirect = '/main/words';\n    if(props.location.state && props.location.state.from) {\n      redirect = props.location.state.from;\n    }\n    if (data && data.isAuth) {\n      return <Redirect to={redirect}/>;\n    }\n\n    return <Component {...props} />;\n  };\n};\n\nexport default withAuthRedirect;\n","import React from 'react';\nimport { Tabs, Row, Col } from 'antd';\nimport LoginForm from '../components/AuthPage/LoginForm';\nimport SignUpForm from '../components/AuthPage/SignUpForm';\nimport css from './Style.module.css';\nimport withAuthRedirect from '../useHooks/withAuthRedirect';\n\nconst { TabPane } = Tabs;\n\nconst AuthPage = () => {\n  return (\n    <Row justify=\"center\" align=\"middle\" className={css.authFull}>\n      <Col span={6} className={css.blockAuth}>\n        <Tabs defaultActiveKey=\"1\" animated={{inkBar: true, tabPane: false}}>\n          <TabPane tab=\"Login\" key=\"1\">\n            <LoginForm/>\n          </TabPane>\n          <TabPane tab=\"Sign up\" key=\"2\" disabled >\n            <SignUpForm/>\n          </TabPane>\n        </Tabs>\n      </Col>\n      <p className={css.version}>v.0.0.2</p>\n    </Row>\n  )\n};\n\nexport default withAuthRedirect(AuthPage);\n","import React from 'react';\nimport {Redirect, RouteComponentProps} from 'react-router';\nimport { useQuery } from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\n\n//only page component\nconst withProtected = (Component: any) => {\n  return (props: RouteComponentProps) => {\n    const {data} = useQuery(QUERIES.IS_AUTH, {\n      fetchPolicy: 'cache-only'\n    });\n\n    if (!(data && data.isAuth)) {\n      return <Redirect to={{\n        pathname: '/',\n        state: {\n          from: props.location.pathname\n        }\n      }}/>;\n    }\n\n    return <Component {...props} />;\n  };\n};\n\nexport default withProtected;\n","import {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {IUser, UserRole} from '../typings/IUser';\n\nexport const useCurrentUser = () => {\n  const {data} = useQuery(QUERIES.CURRENT_USER, {\n    onError: error => {}\n  });\n  let user: IUser | null = null;\n  let isAdmin = false;\n  if(data && data.currentUser) {\n    user = data.currentUser;\n    isAdmin = user!.role === UserRole.ADMIN;\n  }\n  return {user, isAdmin};\n};\n","export enum PartOfSpeech {\n  ADJ = 'ADJ',\n  ADV = 'ADV',\n  CONJ = 'CONJ',\n  DET = 'DET',\n  MODAL = 'MODAL',\n  NOUN = 'NOUN',\n  PREP = 'PREP',\n  PRON = 'PRON',\n  VERB = 'VERB',\n  OTHER = 'OTHER',\n}\n\nexport interface IPartOfSpeech {\n  \"id\": number,\n  \"type\": PartOfSpeech,\n  \"ru\": string,\n  \"ua\": string,\n  \"en\": string,\n}\n","import {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {IPartOfSpeech} from '../typings/PartOfSpeech';\n\nexport const usePartOfSpeech = () => {\n  const {data} = useQuery(QUERIES.GET_PART_OF_SPEECH, {\n    fetchPolicy: 'cache-first',\n  });\n  return (data ? data.partOfSpeechDescs : []) as IPartOfSpeech[];\n};\n","import React from 'react';\nimport {Col, Descriptions, Row, Table, Tag} from 'antd';\nimport {UserRole} from '../typings/IUser';\nimport {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\n\nconst columns = [\n  {\n    title: 'Id',\n    dataIndex: 'id',\n    key: 'id',\n  },\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Last name',\n    dataIndex: 'lastName',\n    key: 'lastName',\n  },\n  {\n    title: 'Email',\n    dataIndex: 'email',\n    key: 'email',\n  },\n  {\n    title: 'Role',\n    key: 'role',\n    dataIndex: 'role',\n    render: (role: UserRole) => {\n      let color = role === UserRole.ADMIN ? 'geekblue' : 'green';\n      return (\n        <Tag color={color} key={role}>\n          {role.toUpperCase()}\n        </Tag>\n      );\n    },\n  },\n];\n\nconst recurse = (obj: any, name: string) => {\n  for (const key of Object.keys(obj)) {\n    if(key === name) {\n      return obj[key];\n    }\n    if(typeof obj[key] === 'object') {\n      const res: any = recurse(obj[key], name);\n      if(res) return res;\n    }\n  }\n};\n\nconst UsersPage = () => {\n  const d = usePartOfSpeech();\n  const {data} = useQuery(QUERIES.USERS, {});\n  const {data: dataTranslate} = useQuery(QUERIES.COUNT_TRANSLATE, {\n    returnPartialData: true,\n  });\n  const {data: dataWords} = useQuery(QUERIES.COUNT_WORDS, {\n    returnPartialData: true,\n  });\n  const {data: dataEntity} = useQuery(QUERIES.COUNT_ENTITY, {\n    returnPartialData: true,\n  });\n  const users = data ? data.users : [];\n  const countTranslate = recurse(dataTranslate, 'count');\n  const countWords = recurse(dataWords, 'count');\n  const countEntity = recurse(dataEntity, 'count');\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Descriptions title=\"Vocabulary Info\">\n          {countEntity &&  <Descriptions.Item label=\"Entity\">{countEntity}</Descriptions.Item>}\n          {countWords &&  <Descriptions.Item label=\"Words\">{countWords}</Descriptions.Item>}\n          {countTranslate &&  <Descriptions.Item label=\"Translate\">{countTranslate}</Descriptions.Item>}\n        </Descriptions>\n      </Col>\n      <Col span={24}>\n      <Table columns={columns} dataSource={users}/>\n      </Col>\n    </Row>\n  )\n};\n\nexport default UsersPage;\n","import {PartOfSpeech} from '../typings/PartOfSpeech';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\nimport {Tag} from 'antd';\nimport React from 'react';\n\ninterface ITagPartOfSpeechProps {\n  type: PartOfSpeech;\n}\n\nexport const TagPartOfSpeech = ({type}: ITagPartOfSpeechProps) => {\n  const findItem = useFindPartOfSpeech(type);\n  if (typeof findItem === 'object') {\n    const color = defineTagColor(findItem.type);\n    return (\n      <React.Fragment>\n        <Tag color={color}>{findItem.en.toUpperCase()}</Tag>\n        <Tag color={color}>{findItem.ua.toUpperCase()}</Tag>\n        <Tag color={color}>{findItem.ru.toUpperCase()}</Tag>\n      </React.Fragment>\n    )\n  }\n\n  return <Tag color={defineTagColor(type)}>{type.toUpperCase()}</Tag>\n};\nexport const useFindPartOfSpeech = (type: PartOfSpeech) => {\n  const parts = usePartOfSpeech();\n  const findItem = parts.find(item => item.type === type);\n  if (findItem === null) {\n    return type;\n  }\n  return findItem;\n};\n\nexport const defineTagColor = (type: PartOfSpeech) => {\n  switch (type) {\n    case PartOfSpeech.ADJ:\n      return 'magenta';\n    case PartOfSpeech.ADV:\n      return 'gold';\n    case PartOfSpeech.OTHER:\n      return 'default';\n    case PartOfSpeech.VERB:\n      return 'geekblue';\n    case PartOfSpeech.NOUN:\n      return 'green';\n    case PartOfSpeech.CONJ:\n      return 'lime';\n    case PartOfSpeech.MODAL:\n      return 'blue';\n    case PartOfSpeech.DET:\n      return 'default';\n    case PartOfSpeech.PREP:\n      return 'cyan';\n    case PartOfSpeech.PRON:\n      return 'purple';\n  }\n  return 'default';\n}\n","import React from 'react';\nimport {IWord} from '../../typings/IEntity';\nimport {Table} from 'antd';\nimport {TagPartOfSpeech} from '../../utils/tagPartOfSpeech';\n\nconst { Column } = Table;\n\ninterface ITranslateContentProps {\n  word: IWord;\n}\n\nconst TranslateContent = ({word}: ITranslateContentProps) => {\n  word.translate = word.translate.filter(t => !word.disconnectTranslate.some(d => d.id === t.id));\n  return (\n    <Table dataSource={word.translate} pagination={false} size={'small'} showHeader={false}>\n      <Column title=\"RU\" dataIndex=\"ru\" key=\"ru\" width=\"50%\" />\n      <Column\n        width=\"50%\"\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        render={tags => {\n          return <TagPartOfSpeech type={tags} />\n        }}\n      />\n    </Table>\n  )\n};\n\nexport default TranslateContent;\n","import React from 'react';\nimport { IDeleteSmth, IWord } from '../../typings/IEntity';\nimport {Col, Table, Typography} from 'antd';\nimport { TagPartOfSpeech } from '../../utils/tagPartOfSpeech';\n\nconst { Column } = Table;\nconst { Text } = Typography;\n\ninterface IWordsContentProps {\n  words: IWord[];\n  disconnectWords: IDeleteSmth[];\n}\nconst Cell = ({dataIndex, record, children, ...restProps}: any) => {\n  if (dataIndex === 'en' && record.children === undefined) return null;\n  if (dataIndex === 'ru' && record.children) return null;\n  return <td {...restProps}>\n    {\n      dataIndex === 'en' ? (\n        <Text strong>{children}</Text>\n      ) : (\n        <Text type=\"secondary\">{children}</Text>\n      )\n    }\n  </td>;\n};\n\nconst WordsContent = ({ words, disconnectWords }: IWordsContentProps) => {\n  const data = words\n    .filter((w) => !disconnectWords.some((d) => d.id === w.id!))\n    .map((w, i) => ({\n      key: w.id,\n      en: w.en,\n      type: w.type,\n      children: w.translate,\n    }));\n\n  return (\n    <Table\n      dataSource={data}\n      pagination={false}\n      size={'small'}\n      showHeader={false}\n      components={{\n        body: {\n          cell: Cell\n        }\n      }}\n    >\n      <Column title=\"EN\" dataIndex=\"en\" key=\"en\" width=\"40%\"\n              onCell={(record) => ({\n                record,\n                dataIndex: 'en',\n                title: 'EN'\n              })}\n      />\n      <Column title=\"RU\" dataIndex=\"ru\" key=\"ru\"\n              onCell={(record) => ({\n                record,\n                dataIndex: 'ru',\n                title: 'RU',\n              })}\n      />\n      <Column\n        width=\"60%\"\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        render={(tags) => {\n          return <TagPartOfSpeech type={tags} />;\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default WordsContent;\n","import React from 'react';\nimport {IDeleteSmth, IPhrase} from '../../typings/IEntity';\nimport {Card, Col, Row} from 'antd';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\nconst gridStyle: any = {\n  width: '33.333333%',\n  textAlign: 'center'\n};\n\ninterface IPhrasesContentProps {\n  phrases: IPhrase[]\n  disconnectPhrases: IDeleteSmth[];\n}\nconst PhrasesContent = ({phrases, disconnectPhrases}: IPhrasesContentProps) => {\n  const data = phrases\n    .filter((p) => !disconnectPhrases.some((d) => d.id === p.id!));\n\n  return (\n    <Row>\n      {\n        data.map(p => {\n          return (\n            <>\n              <Col span={12}>\n                <Text strong>{p.phrase}</Text>\n                  <br/>\n                <Text type=\"secondary\">{p.ru}</Text>\n              </Col>\n            </>\n          )\n        })\n      }\n    </Row>\n  )\n};\n\nexport default PhrasesContent;\n","import React from 'react';\nimport {IDeleteSmth, IPhrase, ISentence} from '../../typings/IEntity';\nimport {Card, Col, Row} from 'antd';\nimport { Typography } from 'antd';\n\nconst { Text } = Typography;\n\ninterface ISentencesContentProps {\n  sentences: ISentence[]\n  disconnectSentences: IDeleteSmth[];\n}\nconst SentencesContent = ({sentences, disconnectSentences}: ISentencesContentProps) => {\n  const data = sentences\n    .filter((p) => !disconnectSentences.some((d) => d.id === p.id!));\n  return (\n    <Row>\n      {\n        data.map(s => {\n          return (\n            <>\n              <Col span={24}>\n                <Text strong>{s.sentence}</Text>\n                <br/>\n                <Text type=\"secondary\">{s.ru}</Text>\n              </Col>\n            </>\n          )\n        })\n      }\n    </Row>\n  )\n};\n\nexport default SentencesContent;\n","import React, {useState} from 'react';\nimport {Button, Card} from 'antd';\nimport {Link} from 'react-router-dom'\nimport {IEntity} from '../../typings/IEntity';\nimport TranslateContent from './TranslateContent';\nimport WordsContent from './WordsContent';\nimport PhrasesContent from './PhrasesContent';\nimport SentencesContent from './SentencesContent';\nimport css from './WordsPage.module.css';\n\nconst gridStyle: any = {\n\n};\n\nconst tabListNoTitle = [\n  {\n    key: 'translate',\n    tab: 'Translate',\n    component: TranslateContent\n  },\n  {\n    key: 'words',\n    tab: 'Words',\n    component: WordsContent\n  },\n  {\n    key: 'phrases',\n    tab: 'Phrases',\n    component: PhrasesContent\n  },\n  {\n    key: 'sentences',\n    tab: 'Sentences',\n    component: SentencesContent\n  },\n];\n\ninterface IEntityCardProps {\n  entity: IEntity;\n}\nconst EntityCard = ({entity}:IEntityCardProps) => {\n  const [key, setKey] = useState('translate');\n\n  const onTabChange = (key: string) => {\n    setKey(key);\n  };\n\n\n  const word = entity.words.find(w => w.en === entity.title)!;\n  const words = entity.words.filter(w => w.en !== entity.title);\n  const Content = tabListNoTitle.find(t => t.key === key)!.component;\n  return (\n    <Card.Grid className={css.entityCard}  >\n      <Card\n        tabList={tabListNoTitle}\n        activeTabKey={key}\n        onTabChange={onTabChange}\n        type={'inner'}\n        title={entity.title}\n        extra={<Link to={{\n          pathname: '/main/create/',\n          state: {\n            id: entity.id\n          }\n        }\n        }>Edit</Link>}\n      >\n        <Content\n          word={word}\n          sentences={entity.sentences}\n          disconnectWords={entity.disconnectWords}\n          words={words}\n          phrases={entity.phrases}\n          disconnectSentences={entity.disconnectSentences}\n          disconnectPhrases={entity.disconnectPhrases}\n        />\n      </Card>\n    </Card.Grid>\n  )\n};\n\nexport default EntityCard;\n","import React, {useState} from 'react';\nimport {Card, Col, Row} from 'antd';\nimport {useQuery} from '@apollo/react-hooks';\nimport QUERIES from '../graphql/queries';\nimport {useCurrentUser} from '../useHooks/useCurrentUser';\nimport {IEntity} from '../typings/IEntity';\nimport EntityCard from '../components/WordsPage/EntityCard';\nimport {usePartOfSpeech} from '../useHooks/usePartOfSpeech';\n\n\nconst WordsPage = () => {\n  const d = usePartOfSpeech();\n  const {user} = useCurrentUser();\n  const {data} = useQuery(QUERIES.GET_ENTITIES, {\n    variables: {\n      id: user!.id\n    },\n\n  });\n  const entities: IEntity[] = data ? data.entities : [];\n\n  return (\n    <Row>\n      <Col span={24}>\n        <Card title=\"Vocabulary\" size={'small'} >\n          {\n            entities.map(e => {\n              return (\n                <EntityCard key={e.id} entity={e}/>\n              )\n            })\n          }\n        </Card>\n      </Col>\n    </Row>\n  )\n};\n\nexport default WordsPage;\n","import React from 'react';\nimport {Button, Result} from 'antd';\nimport {Link} from 'react-router-dom';\n\nconst NotFoundPage = () => {\n  return <Result\n    status=\"404\"\n    title=\"404\"\n    subTitle=\"Sorry, the page you visited does not exist.\"\n    extra={<Link to=\"/main/words\" component={Button} type=\"primary\">Back Home</Link>}\n  />\n};\n\nexport default NotFoundPage;\n","export const isEmptyObject = (obj: any) => {\n  return Object.keys(obj).length === 0;\n};\n","import React from 'react';\nimport { TagPartOfSpeech } from '../../../utils/tagPartOfSpeech';\nimport { Select } from 'antd';\nimport { SelectProps } from 'antd/lib/select';\nimport { usePartOfSpeech } from '../../../useHooks/usePartOfSpeech';\nimport { PartOfSpeech } from '../../../typings/PartOfSpeech';\n\nconst { Option } = Select;\n\nfunction tagRender(props: any) {\n  const { label } = props;\n\n  return <TagPartOfSpeech type={label} />;\n}\nconst SelectPartOfSpeech = (props: SelectProps<PartOfSpeech>) => {\n  const parts = usePartOfSpeech();\n\n  return (\n    <Select\n      tagRender={tagRender}\n      bordered={false}\n      suffixIcon={null}\n      {...props}\n    >\n      {parts.map((p) => {\n        return (\n          <Option value={p.type} key={p.type}>\n            <TagPartOfSpeech type={p.type} />\n          </Option>\n        );\n      })}\n    </Select>\n  );\n};\n\nexport default SelectPartOfSpeech;\n","import {gql} from 'apollo-boost';\nimport FRAGMENTS from './fragments';\n\nexport const MUTATION = {\n  deleteWord: gql`\n      mutation deleteWord($idEntity: Int!, $idWord: Int!) {\n          updateWord(data: {\n              disconnectEntities: {\n                  connect: {\n                      id: $idEntity\n                  }\n              }\n          }, where: {id: $idWord}) {\n              id\n          }\n      }\n  `,\n  deleteTranslate: gql`\n      mutation deleteTranslate($idTransalte: Int!, $idWord: Int!) {\n          updateWord(data: {\n              disconnectTranslate: {\n                  connect: {\n                      id: $idTransalte\n                  }\n              }\n          }, where: {\n              id: $idWord\n          }) {\n              id,\n              disconnectTranslate {\n                  id\n              }\n          }\n      }\n  `,\n  createOrUpdateWordWithTranslate: gql`\n      mutation createOrUpdateWordWithTranslate($entityId: Float!,$type: PartOfSpeech!, $en: String!, $translate: [String!]!) {\n          createOrUpdateWordWithTranslate(entityId: $entityId, type: $type, en: $en, translate: $translate) {\n              id,\n              en,\n              type,\n              disconnectTranslate {\n                  id\n              },\n              translate {\n                  id,\n                  ru,\n                  type\n              }\n          }\n      }\n  `,\n  updateWordsByEntity: gql`\n      mutation updateWordsByEntity($data: TranslateWordWithParseInput!) {\n          updateWordsByEntity(data: $data)\n      }\n  `,\n  upsertTranslate: gql`\n      mutation upsertTranslate($idWord: Int!, $ru: String!) {\n          upsertTranslate(where: {\n              ru: $ru\n          }, create: {\n              ru: $ru,\n              type: OTHER,\n              words: {\n                  connect: {\n                      id: $idWord\n                  }\n              }\n          },\n              update: {\n                  words: {\n                      connect: {\n                          id: $idWord\n                      }\n                  }\n              }) {\n              id,\n              ru,\n              type,\n          }\n      }\n  `,\n  translatePhrase: gql`\n      mutation translatePhrase($phrase: String!, $entity: String!) {\n          translatePhrase(phrase: $phrase, entity: $entity) {\n              phrase,\n              ru\n          }\n      }\n  `,\n  translateSentence: gql`\n      mutation translateSentence($sentence: String!, $entity: String!) {\n          translateSentence(sentence: $sentence, entity: $entity) {\n              sentence,\n              ru\n          }\n      }\n  `,\n  upsertPhrase: gql`\n      mutation upsertPhrase($phrase: String!, $ru: String!, $entityId: Int!) {\n          upsertPhrase(where: {\n              phrase: $phrase\n          }, create: {\n              phrase: $phrase,\n              ru: $ru,\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }, update: {\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }) {\n              id,\n              phrase,\n              ru\n          }\n      }\n  `,\n  upsertSentence: gql`\n      mutation upsertSentence($sentence: String!, $ru: String!, $entityId: Int!) {\n          upsertSentence(where: {\n              sentence: $sentence\n          }, create: {\n              sentence: $sentence,\n              ru: $ru,\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }, update: {\n              entities: {\n                  connect: {\n                      id: $entityId\n                  }\n              }\n          }) {\n              id,\n              sentence,\n              ru\n          }\n      }\n  `,\n  updatePhraseByEntity: gql`\n      mutation updatePhraseByEntity($data: UpdatePhrasesInput!) {\n          updatePhraseByEntity(data: $data)\n      }\n  `,\n  updateSentencesByEntity: gql`\n      mutation updateSentencesByEntity($data: UpdateSentencesInput!) {\n          updateSentencesByEntity(data: $data)\n      }\n  `,\n  GET_ENTITIES_BY_WORD: gql`\n      mutation getEntitiesByWord($word: String!) {\n          getEntitiesByWord(word: $word) {\n              ${FRAGMENTS.entity}\n          }\n      }\n  `,\n  TRANSLATE_WORD: gql`\n      mutation translateWord($word: String!, $entity: String!) {\n          translateWord(word: $word, entity: $entity) {\n              type,\n              translate {\n                  type,\n                  ru\n              }\n          }\n      }\n  `,\n};\n","import React, { useState } from 'react';\nimport { Button, Popover, Input, Tooltip } from 'antd';\nimport { PlusOutlined } from '@ant-design/icons';\nimport { ITranslate } from '../../../typings/IEntity';\nimport { useMutation } from '@apollo/react-hooks';\nimport { MUTATION } from '../../../graphql/mutation';\nimport css from '../TableEditWords.module.css';\n\nconst { Search } = Input;\n\ninterface IContent {\n  onClose: any;\n  idWord: number;\n  onAdd: (idWord: number, data: ITranslate) => any;\n}\nconst Content = ({ onClose, idWord, onAdd }: IContent) => {\n  const [mutationAdd, { loading }] = useMutation(MUTATION.upsertTranslate);\n  const handleSearch = async (value: string) => {\n    if (value === '') return;\n    const res = await mutationAdd({\n      variables: {\n        idWord,\n        ru: value,\n      },\n    });\n    const data: ITranslate = res.data.upsertTranslate;\n    onAdd(idWord, data);\n    onClose();\n  };\n\n  return (\n    <Search\n      placeholder=\"input search text\"\n      onSearch={handleSearch}\n      allowClear\n      enterButton\n      loading={loading}\n    />\n  );\n};\n\ninterface IAddTranslateProps {\n  idWord: number;\n  onAdd: (idWord: number, data: ITranslate) => any;\n}\nconst CreateTranslateOfWord = ({ idWord, onAdd }: IAddTranslateProps) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleClose = () => {\n    setIsShow(false);\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setIsShow(visible);\n  };\n\n  return (\n    <Popover\n      content={<Content onClose={handleClose} idWord={idWord} onAdd={onAdd} />}\n      trigger=\"click\"\n      visible={isShow}\n      onVisibleChange={handleVisibleChange}\n      placement=\"rightBottom\"\n    >\n      <Button\n        size=\"middle\"\n        shape=\"circle\"\n        className={css.btnCreate}\n        onClick={() => setIsShow(true)}\n        icon={<PlusOutlined />}\n      />\n    </Popover>\n  );\n};\n\nexport default CreateTranslateOfWord;\n","export const generateClassName = (name: string, options: {\n  [name: string]: boolean;\n}) => {\n  let str = name;\n  Object.keys(options).forEach(key => {\n    if(options[key]) {\n      str = str + ' ' + key;\n    }\n  });\n  return str;\n};\n","import React, {useContext, useEffect, useRef, useState} from 'react';\nimport {Button, Form, Input, Tooltip} from 'antd';\nimport {generateClassName} from '../../utils/generateClassName';\nimport {ZhihuOutlined} from '@ant-design/icons';\nimport './table.css';\n\n\nconst EditableContext = React.createContext(null as any);\n\nexport const EditableRow = ({index, ...props}: any) => {\n  const [form] = Form.useForm();\n  return (\n    <Form form={form} component={false}>\n      <EditableContext.Provider value={form}>\n        <tr {...props} />\n      </EditableContext.Provider>\n    </Form>\n  );\n};\nexport const EditableCell = ({\n                               title,\n                               editable,\n                               extra,\n                               children,\n                               dataIndex,\n                               record,\n                               handleSave,\n                               handleTranslate,\n                               ...restProps\n                             }: any) => {\n  const [editing, setEditing] = useState(false);\n  const inputRef: any = useRef();\n  const form = useContext(EditableContext);\n  useEffect(() => {\n    if (editing) {\n      inputRef.current.focus();\n    }\n  }, [editing]);\n\n  const toggleEdit = () => {\n    setEditing(!editing);\n    form.setFieldsValue({\n      [dataIndex]: record[dataIndex],\n    });\n  };\n\n  const save = async (e: any) => {\n    try {\n      const values = await form.validateFields();\n      toggleEdit();\n      handleSave({...record, ...values, dataIndex});\n    } catch (errInfo) {\n      console.log('Save failed:', errInfo);\n    }\n  };\n\n  let childNode = children;\n\n  if (editable) {\n    childNode = editing ? (\n      <Form.Item\n        style={{\n          margin: 0,\n        }}\n        name={dataIndex}\n        rules={[\n          {\n            required: true,\n            message: `${title} is required.`,\n          },\n        ]}\n      >\n        <Input ref={inputRef} onPressEnter={save} onBlur={save}\n               className={generateClassName('editable-cell-value-wrap', {\n                 'cell-ru': dataIndex === 'ru'\n               })}/>\n      </Form.Item>\n    ) : (\n      <div\n        className={generateClassName('editable-cell-value-wrap', {\n          'cell-ru': dataIndex === 'ru'\n        })}\n        onClick={toggleEdit}\n      >\n        {children}\n        {\n          extra && record.isNeededTranslate && (\n            <Tooltip title=\"Translate\">\n              <Button onClick={() => handleTranslate({...record})} className=\"btnTranslate\" shape=\"round\"\n                      size=\"small\" icon={<ZhihuOutlined/>}>\n              </Button>\n            </Tooltip>\n          )\n        }\n      </div>\n    );\n  }\n  if (dataIndex === 'en' && record.children === undefined) return null;\n  if (dataIndex === 'ru' && record.children) return null;\n  return <td {...restProps}>{childNode}</td>;\n};\n","export class RedoHistory {\n  private history: IAction | null = null;\n  private current: IAction | null = null;\n  private handlers: any[] = [];\n\n  constructor() {\n    this.current = this.history = {\n      prevAction: null,\n      payload: '',\n      action: '',\n      nextAction: null,\n    }\n  }\n\n  public addHandler = (obj: any) => {\n    this.handlers.push(obj);\n  };\n\n  private getRevertAction = (action: string) => {\n    const findItem = this.handlers.find(h => {\n      return Object.keys(h).some(k => k === action)\n    });\n\n    const findName = Object.keys(findItem).filter(k => k !== action)[0];\n    return findItem[findName];\n  }\n  private getAction = (action: string) => {\n    const findItem = this.handlers.find(h => {\n      return Object.keys(h).some(k => k === action)\n    });\n\n    return findItem[action];\n  };\n\n  public addAction = <T>(action: IActionData<T>) => {\n    this.history = this.current;\n    const newAction: IAction<T> = {\n      nextAction: null,\n      prevAction: this.history,\n      ...action\n    };\n    this.history!.nextAction = newAction;\n    this.history = newAction;\n    this.current = this.history;\n  }\n\n  public prev = () => {\n    if (this.current === null || this.current.prevAction === null) {\n      return;\n    }\n    const revert = this.getRevertAction(this.current!.action);\n    revert(this.current!.payload);\n    this.current = this.current!.prevAction;\n  }\n\n  public next = () => {\n    if (this.current === null || this.current.nextAction === null) {\n      return;\n    }\n    this.current = this.current!.nextAction;\n    const action = this.getAction(this.current!.action);\n    action(this.current!.payload);\n  }\n\n  public isPrev = () => {\n    return this.current !== null ? this.current.prevAction !== null : false;\n  }\n\n  public isNext = () => {\n    return this.current !== null ? this.current.nextAction !== null : false;\n  }\n}\n\n\ninterface IAction<T = any> extends IActionData<T> {\n  //revertAction: string;\n  //\n  nextAction: IAction<T> | null;\n  prevAction: IAction<T> | null;\n}\n\ninterface IActionData<T = any> {\n  action: string;\n  payload: T;\n}\n","import React, {useState} from 'react';\nimport {Button, Popover, Radio, Row} from 'antd';\nimport {RedoOutlined, UndoOutlined} from '@ant-design/icons';\n\ninterface ITitleTableProps {\n  onAdd: any;\n  onUpdate: any;\n  loadingUpdate: boolean;\n  disabled: boolean;\n  onChangeShowDeleted: (value: number) => any;\n  onPrev: any;\n  onNext: any;\n  disabledPrev: boolean;\n  disabledNext: boolean;\n  entity: string;\n  isCreate: boolean;\n  addComponent: React.FC<IContentTitleTableProps>;\n  btnTitle: string;\n}\n\nexport interface IContentTitleTableProps {\n  onAdd: any;\n  onClose: any;\n  entity: string;\n}\n\nconst BasicTitleTable = ({\n                           disabled,\n                           onUpdate,\n                           onAdd,\n                           loadingUpdate,\n                           entity,\n                           isCreate,\n                           disabledNext,\n                           onNext,\n                           disabledPrev,\n                           onPrev,\n                           onChangeShowDeleted,\n                           addComponent: AddComponent,\n                           btnTitle\n                         }: ITitleTableProps) => {\n  const [isShow, setIsShow] = useState(false);\n\n  const handleOk = () => {\n    setIsShow(false);\n  };\n\n  const handleVisibleChange = (visible: boolean) => {\n    setIsShow(visible);\n  };\n\n  return (\n    <Row justify=\"space-between\">\n      <div>\n        <Button\n          size=\"small\"\n          type=\"link\"\n          onClick={onPrev}\n          disabled={disabledPrev}\n          icon={<UndoOutlined/>}\n        />\n        <Button\n          size=\"small\"\n          type=\"link\"\n          onClick={onNext}\n          disabled={disabledNext}\n          icon={<RedoOutlined/>}\n        />\n        <Radio.Group onChange={e => onChangeShowDeleted(e.target.value)} defaultValue={0} buttonStyle=\"solid\"\n                     size=\"small\">\n          <Radio.Button value={1}>Show</Radio.Button>\n          <Radio.Button value={0}>Hide</Radio.Button>\n        </Radio.Group>\n      </div>\n      <Button.Group>\n        <Button\n          onClick={onUpdate}\n          type=\"primary\"\n          disabled={disabled || loadingUpdate}\n          loading={loadingUpdate}\n        >\n          {isCreate ? 'Update' : 'Create'}\n        </Button>\n        <Popover\n          content={<AddComponent onClose={handleOk} onAdd={onAdd} entity={entity}/>}\n          trigger=\"click\"\n          visible={isShow}\n          onVisibleChange={handleVisibleChange}\n          placement=\"rightBottom\"\n        >\n          <Button onClick={() => setIsShow(true)}>{btnTitle}</Button>\n        </Popover>\n      </Button.Group>\n    </Row>\n  );\n};\n\nexport default BasicTitleTable;\n","import React, {useState} from 'react';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {Button, Form, Input, Row, Select} from 'antd';\nimport {PartOfSpeech} from '../../../typings/PartOfSpeech';\nimport SelectPartOfSpeech from './SelectPartOfSpeech';\nimport {IContentTitleTableProps} from '../../common/BasicTItleTable';\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst {Search} = Input;\nconst {Option} = Select;\n\nconst ContentPopoverWord = ({onClose, onAdd, entity}: IContentTitleTableProps) => {\n  const [options, setOptions] = useState([]);\n  const [mutationTranslateWord] = useMutation(MUTATION.TRANSLATE_WORD);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    onAdd(values);\n    onClose();\n  };\n\n  const handleChange = (value: PartOfSpeech) => {\n    form.setFieldsValue({type: value});\n  };\n\n  const handleSearch = async (value: string, event: any) => {\n    event.preventDefault();\n    if (value === '') return;\n    const res = await mutationTranslateWord({\n      variables: {\n        word: value,\n        entity\n      }\n    });\n\n    if(res.data === null) return ;\n    const translateWord: any = res.data.translateWord;\n    setOptions(translateWord.translate.map((t: any) => t.ru));\n    form.setFieldsValue({\n      translate: translateWord.translate.map((t: any) => t.ru),\n    });\n    handleChange(translateWord.type);\n  };\n\n  return (\n    <Form name=\"basic\" onFinish={onFinish} form={form} size={'middle'}>\n      <Form.Item\n        name=\"en\"\n        rules={[{required: true, message: 'Please input your word!'}]}\n      >\n        <Search onSearch={handleSearch} placeholder=\"Word\" enterButton/>\n      </Form.Item>\n      <Form.Item\n        name=\"translate\"\n        rules={[{required: true, message: 'Please input translate!'}]}\n      >\n        <Select mode=\"tags\" tokenSeparators={[',']}>\n          {options.map((o) => {\n            return <Option value={o}>{o}</Option>;\n          })}\n        </Select>\n      </Form.Item>\n      <Row>\n        <Form.Item\n          name=\"type\"\n          rules={[{required: true, message: 'Please select part of speech!'}]}\n          initialValue={PartOfSpeech.OTHER}\n        >\n          <SelectPartOfSpeech onChange={handleChange}/>\n        </Form.Item>\n        <Form.Item>\n          <Button\n            size=\"middle\"\n            type=\"primary\"\n            htmlType=\"submit\"\n            shape=\"circle\"\n            icon={<PlusOutlined/>}\n          />\n        </Form.Item>\n      </Row>\n    </Form>\n  );\n};\n\nexport default ContentPopoverWord;\n","import React, {useEffect, useRef, useState} from 'react';\nimport {Button, Row, Table} from 'antd';\nimport {isEmptyObject} from '../../../utils/isEmptyObject';\nimport {PartOfSpeech} from '../../../typings/PartOfSpeech';\nimport SelectPartOfSpeech from './SelectPartOfSpeech';\nimport CreateTranslateOfWord from './CreateTranslateOfWord';\nimport {IDeleteSmth, ITranslate, IWord} from '../../../typings/IEntity';\nimport {useApolloClient, useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {EditableCell, EditableRow} from '../../common/EditableTableComponent';\nimport {DeleteOutlined, RedoOutlined} from '@ant-design/icons';\nimport {RedoHistory} from '../../../utils/RedoHistory';\nimport BasicTitleTable from '../../common/BasicTItleTable';\nimport ContentPopoverWord from './ContentPopoverWord';\n\nconst {Column} = Table;\n\ninterface ITableEditWordsProps {\n  words: IWord[];\n  disconnectWords: IDeleteSmth[];\n  entityId: number;\n  title: string;\n  isCreate: boolean;\n}\n\ninterface ICreateWord {\n  en: string;\n  translate: string[];\n  type: PartOfSpeech;\n}\n\ninterface IDeleteTranslate {\n  idWord: number,\n  idTranslate?: number\n}\n\ninterface IDataColumn {\n  key: number;\n  en: string;\n  type: PartOfSpeech;\n  children: IDataChildColumn[];\n  dataIndex: string;\n  isDelete: boolean;\n}\n\ninterface IDataChildColumn {\n  key: number;\n  ru: string;\n  type: PartOfSpeech;\n  count: number;\n  idWord: number;\n  dataIndex: string;\n  isDelete: boolean;\n}\n\ninterface IChangeType {\n  type?: PartOfSpeech,\n  id: number,\n  idWord: number,\n  oldType?: PartOfSpeech\n}\n\ninterface IChangeInputValue {\n  row: IDataColumn & IDataChildColumn;\n  oldValue: string;\n}\n\ninterface ICache {\n  [id: string]: IWord;\n}\n\nconst getDataOfFilter = (words: IWord[], disconnectWords: IDeleteSmth[], isShowDelete: boolean) => {\n  return words\n    .filter((w) => !(isShowDelete ? [] : disconnectWords).some((d) => d.id === w.id!))\n    .map((w, i) => {\n\n      const filterTranslate = isShowDelete ? w.translate : w.translate.filter(\n        (t) => !w.disconnectTranslate.some((d) => d.id === t.id),\n      );\n      const count = w.translate.filter(\n        (t) => !w.disconnectTranslate.some((d) => d.id === t.id)).length;\n\n      return {\n        key: w.id || i,\n        en: w.en,\n        type: w.type,\n        isDelete: isShowDelete ? disconnectWords.some(d => d.id === w.id) : false,\n        children: filterTranslate.map((t, index) => ({\n          key: t.id || index,\n          ru: t.ru,\n          type: t.type,\n          count,\n          idWord: w.id,\n          isDelete: isShowDelete ? w.disconnectTranslate.some(d => d.id === t.id) : false,\n        })),\n      };\n    });\n};\nconst TableEditWords = (props: ITableEditWordsProps) => {\n  const [mutationCreateWord] = useMutation(\n    MUTATION.createOrUpdateWordWithTranslate,\n  );\n  const [mutationUpdate, {loading: loadingUpdate}] = useMutation(\n    MUTATION.updateWordsByEntity,\n  );\n  const cache = useRef({} as ICache);\n  const history = useRef(new RedoHistory());\n  const client = useApolloClient();\n  const [isCreate, setIsCreate] = useState(props.isCreate);\n  const [isUpdate, setIsUpdate] = useState(props.isCreate);\n  const [isShowDeleted, setShowDeleted] = useState(0);\n  const [noDataWords, setNoDataWords] = useState(props.words);\n  const [disconnectWords, setDisconnectWords] = useState(props.disconnectWords);\n  const truthDataWords = getDataOfFilter(noDataWords, disconnectWords, !!isShowDeleted);\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  useEffect(() => {\n    history.current.addHandler({\n      addDeleteWord: (id: number) => {\n        setDisconnectWords((dis) => {\n          return [...dis, {id}];\n        });\n      },\n      removeDeleteWord: (id: number) => {\n        setDisconnectWords((dis) => {\n          return dis.filter(d => d.id !== id);\n        });\n      }\n    });\n    history.current.addHandler({\n      addDeleteTranslate: (obj: IDeleteTranslate) => {\n        handlerDeleteTranslate(obj);\n      },\n      removeDeleteTranslate: (obj: IDeleteTranslate) => {\n        handlerRemoveDeleteTranslate(obj);\n      }\n    });\n    history.current.addHandler({\n      actionForHandleChangeTypeNext: (obj: IChangeType) => {\n        actionForHandleChangeTypeNext(obj)\n      },\n      actionForHandleChangeTypePrev: (obj: IChangeType) => {\n        actionForHandleChangeTypePrev(obj)\n      },\n    });\n    history.current.addHandler({\n      actionForHandleChangeInputValueNext: (obj: IChangeInputValue) => {\n        actionForHandleChangeInputValueNext(obj);\n      },\n      actionForHandleChangeInputValuePrev: (obj: IChangeInputValue) => {\n        actionForHandleChangeInputValuePrev(obj)\n      }\n    })\n  }, []);\n  const handleDelete = async (dataDelete: IDataColumn & IDataChildColumn) => {\n    if (dataDelete.children) {\n      history.current.addAction({\n        action: 'addDeleteWord',\n        payload: dataDelete.key\n      });\n      setDisconnectWords((dis) => {\n        return [...dis, {id: dataDelete.key}];\n      });\n      setIsCreate(false);\n    } else {\n      history.current.addAction({\n        action: 'addDeleteTranslate',\n        payload: {idTranslate: dataDelete.key, idWord: dataDelete.idWord}\n      });\n      handlerDeleteTranslate({idTranslate: dataDelete.key, idWord: dataDelete.idWord});\n    }\n  };\n  const handlerDeleteTranslate = ({idTranslate, idWord}: IDeleteTranslate) => {\n    setNoDataWords(words => {\n      const findWord = words.find((w) => w.id === idWord)!;\n      findWord.disconnectTranslate = [\n        ...findWord.disconnectTranslate,\n        {id: idTranslate!},\n      ];\n      cache.current[idWord] = findWord;\n      return [...words]\n    })\n  };\n  const handleSave = (row: IDataColumn & IDataChildColumn) => {\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex(\n        (w) => w.id === (row.idWord || row.key),\n      )!;\n      if (row.en) {\n        if(words[indexWord].en === row.en) return words;\n        history.current.addAction<IChangeInputValue>({\n          action: 'actionForHandleChangeInputValueNext',\n          payload: {\n            row: row,\n            oldValue: words[indexWord].en\n          }\n        });\n        words[indexWord].en = row.en;\n      }\n      else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === row.key,\n        )!;\n        if(words[indexWord].translate[indexRu].ru === row.ru) return words;\n        history.current.addAction<IChangeInputValue>({\n          action: 'actionForHandleChangeInputValueNext',\n          payload: {\n            row: row,\n            oldValue: words[indexWord].translate[indexRu].ru\n          }\n        });\n        words[indexWord].translate[indexRu].ru = row.ru;\n      }\n      client.writeData({\n        data: {\n          step: 2\n        }\n      });\n      cache.current[row.idWord || row.key] = words[indexWord];\n      return [...words];\n    });\n  };\n\n  const actionForHandleChangeInputValueNext = (data: IChangeInputValue) => {\n    basicActionForHandleInputValue(data.row);\n  };\n  const actionForHandleChangeInputValuePrev = (data: IChangeInputValue) => {\n    const row = {...data.row};\n    row.en = row.en ? data.oldValue : '';\n    row.ru = row.ru ? data.oldValue : '';\n    basicActionForHandleInputValue(row);\n  };\n  const basicActionForHandleInputValue = (row: IDataColumn & IDataChildColumn) => {\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex(\n        (w) => w.id === (row.idWord || row.key),\n      )!;\n      if (row.en) {\n        words[indexWord].en = row.en;\n      } else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === row.key,\n        )!;\n        words[indexWord].translate[indexRu].ru = row.ru;\n      }\n      cache.current[row.idWord || row.key] = words[indexWord];\n      return [...words];\n    });\n  };\n\n  const handleChangeType = (type: PartOfSpeech, id: number, idWord: number) => {\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex((w) => w.id === (idWord || id))!;\n      if (!idWord) {\n        history.current.addAction<IChangeType>({\n          action: 'actionForHandleChangeTypeNext',\n          payload: {\n            idWord,\n            id,\n            oldType: words[indexWord].type,\n            type\n          }\n        });\n        words[indexWord].type = type;\n      } else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === id,\n        )!;\n        history.current.addAction<IChangeType>({\n          action: 'actionForHandleChangeTypeNext',\n          payload: {\n            idWord,\n            id,\n            oldType: words[indexWord].translate[indexRu].type,\n            type\n          }\n        });\n        words[indexWord].translate[indexRu].type = type;\n      }\n      cache.current[idWord || id] = words[indexWord];\n      return [...words];\n    });\n  };\n  const actionForHandleChangeTypeNext = (data: IChangeType) => {\n    const {id, idWord} = data;\n    const type: any = data.type;\n    basicActionForHandleChangeType(type, id, idWord);\n  };\n  const actionForHandleChangeTypePrev = (data: IChangeType) => {\n    const {id, idWord} = data;\n    const type: any = data.oldType;\n    basicActionForHandleChangeType(type, id, idWord);\n  };\n  const basicActionForHandleChangeType = (type: PartOfSpeech, id: number, idWord: number) => {\n    setNoDataWords((words) => {\n      const indexWord = words.findIndex((w) => w.id === (idWord || id))!;\n      if (!idWord) {\n        words[indexWord].type = type;\n      } else {\n        const indexRu = words[indexWord].translate.findIndex(\n          (t) => t.id === id,\n        )!;\n        words[indexWord].translate[indexRu].type = type;\n      }\n      cache.current[idWord || id] = words[indexWord];\n      return [...words];\n    });\n  };\n\n  const handleAdd = async (values: ICreateWord) => {\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    const res = await mutationCreateWord({\n      variables: {\n        entityId: props.entityId,\n        type: values.type,\n        en: values.en,\n        translate: values.translate,\n      },\n    });\n    const data: IWord = res.data.createOrUpdateWordWithTranslate;\n    history.current.addAction({\n      payload: data.id,\n      action: 'removeDeleteWord'\n    });\n    setNoDataWords((words) => {\n      return [...words, data];\n    });\n  };\n\n  const handleAddTranslate = (idWord: number, data: ITranslate) => {\n    const findIndex = noDataWords.findIndex((w) => w.id === idWord);\n    const index = noDataWords[findIndex].translate.findIndex(\n      (t) => t.id === data.id,\n    );\n    if (index === -1) {\n      noDataWords[findIndex].translate.push(data);\n      setNoDataWords([...noDataWords]);\n    }\n  };\n\n  const handleUpdate = () => {\n    mutationUpdate({\n      variables: {\n        data: {\n          entityId: props.entityId,\n          words: Object.values(cache.current).map((w) => ({\n            type: w.type,\n            id: w.id,\n            disconnectTranslate: w.disconnectTranslate.map((d) => d.id),\n            translate: w.translate.map((t) => ({\n              id: t.id,\n              type: t.type,\n              ru: t.ru,\n            })),\n          })),\n          disconnectWords: disconnectWords.map((d) => d.id),\n        },\n      },\n    }).then((res) => {\n      cache.current = {};\n      setIsCreate(true);\n      setIsUpdate(true);\n      client.writeData({\n        data: {\n          step: 3\n        }\n      });\n    });\n  };\n\n  const handleReturn = ({idTranslate, idWord}: { idWord: number, idTranslate?: number }) => {\n    if (idTranslate) {\n      history.current.addAction({\n        action: 'removeDeleteTranslate',\n        payload: {idTranslate, idWord}\n      });\n      handlerRemoveDeleteTranslate({idTranslate, idWord});\n    } else {\n      history.current.addAction({\n        action: 'removeDeleteWord',\n        payload: idWord\n      });\n      setDisconnectWords(dis => {\n        return dis.filter(d => d.id !== idWord);\n      })\n      setIsCreate(false);\n    }\n  };\n\n  const handlerRemoveDeleteTranslate = ({idWord, idTranslate}: IDeleteTranslate) => {\n    setNoDataWords(words => {\n      const findIndex = words.findIndex(w => w.id === idWord);\n      words[findIndex].disconnectTranslate = words[findIndex].disconnectTranslate.filter(d => d.id !== idTranslate);\n      return [...words];\n    })\n  };\n\n  return (\n    <Table\n      bordered={false}\n      showHeader={false}\n      components={components}\n      dataSource={truthDataWords}\n      pagination={false}\n      size={'small'}\n      rowClassName={() => 'editable-row'}\n      title={() => (\n        <BasicTitleTable\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          loadingUpdate={loadingUpdate}\n          disabled={isCreate ? isEmptyObject(cache.current) : false}//false - onClick\n          onChangeShowDeleted={setShowDeleted}\n          disabledPrev={!history.current.isPrev()}\n          disabledNext={!history.current.isNext()}\n          onPrev={history.current.prev}\n          onNext={history.current.next}\n          entity={props.title}\n          isCreate={isUpdate}\n          addComponent={ContentPopoverWord}\n          btnTitle=\"Add word\"\n        />\n      )}\n    >\n      <Column\n        title=\"EN\"\n        dataIndex=\"en\"\n        key=\"en\"\n        width=\"40%\"\n        onCell={(record) => ({\n          record,\n          dataIndex: 'en',\n          title: 'EN',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"RU\"\n        dataIndex=\"ru\"\n        key=\"ru\"\n        width=\"45%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'ru',\n          title: 'RU',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"Part of speech\"\n        dataIndex=\"type\"\n        key=\"type\"\n        width=\"15%\"\n        render={(\n          type: PartOfSpeech,\n          record: IDataColumn & IDataChildColumn,\n        ) => {\n          return (\n            <SelectPartOfSpeech\n              value={type}\n              onChange={(type) =>\n                handleChangeType(type, record.key, record.idWord)\n              }\n            />\n          );\n        }}\n      />\n      <Column\n        title=\"Operation\"\n        dataIndex=\"operation\"\n        render={(text: any, record: IDataColumn & IDataChildColumn) => {\n          const isEn = !record.idWord;\n          const idWord = isEn ? record.key : record.idWord!;\n          const idTranslate = isEn ? undefined : record.key;\n\n          if (record.isDelete) {\n            return (\n              <Button\n                size=\"small\"\n                shape=\"circle-outline\"\n                icon={<RedoOutlined/>}\n                onClick={() => handleReturn({idWord, idTranslate})}\n              />\n            )\n          }\n          if (record.count && record.count === 1) {\n            return null;\n          }\n\n          return (\n            <Row align=\"middle\">\n              {isEn && (\n                <CreateTranslateOfWord\n                  idWord={record.key}\n                  onAdd={handleAddTranslate}\n                />\n              )}\n              <Button\n                danger\n                size=\"small\"\n                shape=\"circle\"\n                icon={<DeleteOutlined/>}\n                onClick={() => handleDelete({...record})}\n              />\n            </Row>\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default TableEditWords;\n","import React from 'react';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {Button, Form, Input} from 'antd';\nimport {IPhrase} from '../../../typings/IEntity';\nimport { PlusOutlined } from '@ant-design/icons';\nimport {IContentTitleTableProps} from '../../common/BasicTItleTable';\n\nconst { Search } = Input;\n\nconst ContentPopoverPhrase = ({ onClose, onAdd, entity }: IContentTitleTableProps) => {\n  const [mutationTranslate, {loading}] = useMutation(MUTATION.translatePhrase);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    onAdd(values);\n    onClose();\n  };\n\n  const handleSearch = async (value: string, event: any) => {\n    event.preventDefault();\n    const res = await mutationTranslate({\n      variables: {\n        phrase: value,\n        entity\n      }\n    });\n    if(res.data === null) return;\n    const phrase: IPhrase = res.data.translatePhrase;\n    form.setFieldsValue({\n      ru: phrase.ru\n    })\n  };\n\n  return (\n    <Form name=\"basic\" onFinish={onFinish} form={form}>\n      <Form.Item\n        name=\"phrase\"\n        rules={[{ required: true, message: 'Please input your phrase!' }]}\n      >\n        <Search onSearch={handleSearch} placeholder=\"Phrase\" enterButton loading={loading} />\n      </Form.Item>\n      <Input.Group compact size=\"default\">\n        <Form.Item\n          name=\"ru\"\n          rules={[{ required: true, message: 'Please input your username!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" icon={<PlusOutlined />} />\n        </Form.Item>\n      </Input.Group>\n    </Form>\n  );\n};\n\nexport default ContentPopoverPhrase;\n","import React, {useEffect, useRef, useState} from 'react';\nimport { Button, Col, Popconfirm, Row, Table, Tooltip } from 'antd';\nimport { EditableCell, EditableRow } from '../../common/EditableTableComponent';\nimport { IDeleteSmth, IPhrase } from '../../../typings/IEntity';\nimport { DeleteOutlined,RedoOutlined } from '@ant-design/icons';\nimport {useApolloClient, useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {isEmptyObject} from '../../../utils/isEmptyObject';\nimport {RedoHistory} from '../../../utils/RedoHistory';\nimport BasicTitleTable from '../../common/BasicTItleTable';\nimport ContentPopoverPhrase from './ContentPopoverPhrase';\n\nconst { Column } = Table;\n\ninterface ITableEditPhraseProps {\n  phrases: IPhrase[];\n  disconnectPhrases: IDeleteSmth[];\n  entityId: number;\n  title: string;\n  isCreate: boolean;\n}\ninterface IChangePhrase {\n  oldValue: IPhrase;\n  newValue: IPhrase;\n}\ninterface ICache {\n  [id: string]: IPhrase;\n}\n\nconst TableEditPhrase = (props: ITableEditPhraseProps) => {\n  const [mutationTranslate] = useMutation(MUTATION.translatePhrase);\n  const [mutationAddPhrase] = useMutation(MUTATION.upsertPhrase);\n  const [mutationUpdate, {loading}] = useMutation(MUTATION.updatePhraseByEntity);\n  const [phrases, setPhrases] = useState(props.phrases);\n  const [deletePhrases, setDeletePhrases] = useState(props.disconnectPhrases);\n  const [isCreate, setIsCreate] = useState(props.isCreate);\n  const [isUpdate, setIsUpdate] = useState(props.isCreate);\n  const client = useApolloClient();\n  const [isShowDeleted, setShowDeleted] = useState(0);\n  const cache = useRef({} as ICache);\n  const history = useRef(new RedoHistory());\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n  useEffect(() => {\n    history.current.addHandler({\n      deletePhrase: (id: number) => {\n        setDeletePhrases((dis) => {\n          return [...dis, {id}];\n        });\n      },\n      recoverPhrase: (id: number) => {\n        setDeletePhrases((dis) => {\n          return dis.filter(d => d.id !== id);\n        });\n      }\n    });\n    history.current.addHandler({\n      actionForHandleSaveNext: (obj: IChangePhrase) => {\n        actionForHandleSaveNext(obj);\n      },\n      actionForHandleSavePrev: (obj: IChangePhrase) => {\n        actionForHandleSavePrev(obj);\n      }\n    })\n  }, []);\n\n  const handleSave = async (row: IPhrase) => {\n    const index = phrases.findIndex(p => p.id === row.id);\n    if(phrases[index].phrase === row.phrase && phrases[index].ru === row.ru) return ;\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    cache.current[row.id] = row;\n    history.current.addAction<IChangePhrase>({\n      payload: {\n        oldValue: {...phrases[index]},\n        newValue: {...row}\n      },\n      action: 'actionForHandleSaveNext'\n    });\n    row.isNeededTranslate = !row.isNeededTranslate;\n    phrases[index] = row;\n    setPhrases(p => {\n      return [...p];\n    })\n  };\n\n  const actionForHandleSaveNext = (obj: IChangePhrase) => {\n    basicActionForHandleSave(obj.newValue);\n  };\n  const actionForHandleSavePrev = (obj: IChangePhrase) => {\n    basicActionForHandleSave(obj.oldValue);\n  };\n\n  const basicActionForHandleSave = async (row: IPhrase) => {\n    setPhrases(phrases => {\n      cache.current[row.id] = row;\n      const index = phrases.findIndex(p => p.id === row.id);\n      phrases[index] = row;\n      return [...phrases];\n    })\n\n  };\n  const handleDelete = (row: IPhrase) => {\n    setDeletePhrases(p => {\n      return [...p, {id: row.id}];\n    });\n    history.current.addAction({\n      action: 'deletePhrase',\n      payload: row.id\n    });\n\n    setIsCreate(false);\n  };\n\n  const handleUpdate = () => {\n    mutationUpdate({\n      variables: {\n        data: {\n          entityId: props.entityId,\n          disconnectPhrases: deletePhrases.map(d => d.id),\n          phrases: Object.values(cache.current).map(p => ({\n            id: p.id,\n            ru: p.ru,\n            phrase: p.phrase\n          }))\n        }\n      }\n    }).then(() => {\n      cache.current = {};\n      setIsCreate(true);\n      setIsUpdate(true);\n      client.writeData({\n        data: {\n          step: 3\n        }\n      });\n    })\n  };\n\n  const handleAdd = async (value: IPhrase) => {\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    const res =  await mutationAddPhrase({\n      variables: {\n        phrase: value.phrase,\n        ru: value.ru,\n        entityId: props.entityId,\n      }\n    });\n    const phrase: IPhrase = res.data.upsertPhrase;\n    setPhrases(p => {\n      return [...p, phrase]\n    });\n  };\n\n  const handleTranslate = async (value: IPhrase) => {\n    const res = await mutationTranslate({\n      variables: {\n        phrase: value.phrase,\n        entity: props.title\n      }\n    });\n    if(res.data === null) {\n      const index = phrases.findIndex(p => p.id === value.id);\n      value.isNeededTranslate = false;\n      phrases[index] = value;\n      setPhrases(p => {\n        return [...p];\n      });\n      return;\n    }\n    const phrase: IPhrase = res.data.translatePhrase;\n    value.ru = phrase.ru;\n    await handleSave(value);\n  };\n\n  const filterPhrases = !isShowDeleted ?\n    phrases.filter(p => !deletePhrases.some(d => d.id === p.id)) : phrases;\n\n  function handleReturn(id: number) {\n    setDeletePhrases(phrases => {\n      return phrases.filter(p => p.id !== id);\n    });\n\n    history.current.addAction({\n      action: 'recoverPhrase',\n      payload: id\n    });\n    setIsCreate(false);\n  }\n\n  return (\n    <Table\n      bordered={false}\n      showHeader={false}\n      components={components}\n      dataSource={filterPhrases}\n      pagination={false}\n      size={'small'}\n      rowClassName={() => 'editable-row'}\n      title={() => (\n        <BasicTitleTable\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          loadingUpdate={loading}\n          disabled={isCreate ? isEmptyObject(cache.current) : false}\n          entity={props.title}\n          isCreate={isUpdate}\n          onNext={history.current.next}\n          onPrev={history.current.prev}\n          disabledPrev={!history.current.isPrev()}\n          disabledNext={!history.current.isNext()}\n          onChangeShowDeleted={setShowDeleted}\n          addComponent={ContentPopoverPhrase}\n          btnTitle=\"Add phrase\"\n        />\n      )}\n    >\n      <Column\n        title=\"Phrase\"\n        dataIndex=\"phrase\"\n        key=\"phrase\"\n        width=\"40%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          extra: true,\n          dataIndex: 'phrase',\n          title: 'Phrase',\n          handleSave: handleSave,\n          handleTranslate,\n        })}\n      />\n      <Column\n        title=\"RU\"\n        dataIndex=\"ru\"\n        key=\"ru\"\n        width=\"45%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'ru',\n          title: 'RU',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"Operation\"\n        dataIndex=\"operation\"\n        render={(text: any, record: IPhrase) => {\n          if(deletePhrases.some(d => d.id === record.id)) {\n            return (\n              <Button\n                size=\"small\"\n                shape=\"circle-outline\"\n                icon={<RedoOutlined/>}\n                onClick={() => handleReturn(record.id)}\n              />\n            )\n          }\n          return (\n            <Button\n              danger\n              size=\"small\"\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              onClick={() => handleDelete({ ...record })}\n            />\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default TableEditPhrase;\n","import React from 'react';\nimport {useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {Button, Form, Input} from 'antd';\nimport {ISentence} from '../../../typings/IEntity';\nimport { PlusOutlined } from '@ant-design/icons';\nimport {IContentTitleTableProps} from '../../common/BasicTItleTable';\n\nconst { Search } = Input;\n\nconst ContentPopoverSentence = ({ onClose, onAdd, entity }: IContentTitleTableProps) => {\n  const [mutationTranslate, {loading}] = useMutation(MUTATION.translateSentence);\n  const [form] = Form.useForm();\n\n  const onFinish = async (values: any) => {\n    onAdd(values);\n    onClose();\n  };\n\n  const handleSearch = async (value: string, event: any) => {\n    event.preventDefault();\n    const res = await mutationTranslate({\n      variables: {\n        sentence: value,\n        entity\n      }\n    });\n    if(res.data === null) return;\n    const sentence: ISentence = res.data.translateSentence;\n    form.setFieldsValue({\n      ru: sentence.ru\n    })\n  };\n\n  return (\n    <Form name=\"basic\" onFinish={onFinish} form={form}>\n      <Form.Item\n        name=\"sentence\"\n        rules={[{ required: true, message: 'Please input your sentence!' }]}\n      >\n        <Search onSearch={handleSearch} placeholder=\"Sentence\" enterButton loading={loading} />\n      </Form.Item>\n      <Input.Group compact size=\"default\">\n        <Form.Item\n          name=\"ru\"\n          rules={[{ required: true, message: 'Please input your sentence!' }]}\n        >\n          <Input />\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\" icon={<PlusOutlined />} />\n        </Form.Item>\n      </Input.Group>\n    </Form>\n  );\n};\n\nexport default ContentPopoverSentence;\n","import React, {useEffect, useRef, useState} from 'react';\nimport {Button, Table} from 'antd';\nimport { DeleteOutlined,RedoOutlined } from '@ant-design/icons';\nimport {IDeleteSmth, IPhrase, ISentence} from '../../../typings/IEntity';\nimport {useApolloClient, useMutation} from '@apollo/react-hooks';\nimport {MUTATION} from '../../../graphql/mutation';\nimport {RedoHistory} from '../../../utils/RedoHistory';\nimport {EditableCell, EditableRow} from '../../common/EditableTableComponent';\nimport BasicTitleTable from '../../common/BasicTItleTable';\nimport {isEmptyObject} from '../../../utils/isEmptyObject';\nimport ContentPopoverPhrase from '../TableEditPhrase/ContentPopoverPhrase';\nimport ContentPopoverSentence from './ContentPopoverSentence';\n\nconst { Column } = Table;\n\ninterface ITableEditPhraseProps {\n  sentences: ISentence[];\n  disconnectSentences: IDeleteSmth[];\n  entityId: number;\n  title: string;\n  isCreate: boolean;\n}\n\ninterface IChangePhrase {\n  oldValue: ISentence;\n  newValue: ISentence;\n}\n\ninterface ICache {\n  [id: string]: ISentence;\n}\n\nconst TableEditSentence = (props: ITableEditPhraseProps) => {\n  const [mutationTranslate] = useMutation(MUTATION.translateSentence);\n  const [mutationAddSentence] = useMutation(MUTATION.upsertSentence);\n  const [mutationUpdate, {loading}] = useMutation(MUTATION.updateSentencesByEntity);\n  const [sentences, setSentences] = useState(props.sentences);\n  const [deleteSentences, setDeleteSentences] = useState(props.disconnectSentences);\n  const [isCreate, setIsCreate] = useState(props.isCreate);\n  const [isUpdate, setIsUpdate] = useState(props.isCreate);\n  const client = useApolloClient();\n  const [isShowDeleted, setShowDeleted] = useState(0);\n  const cache = useRef({} as ICache);\n  const history = useRef(new RedoHistory());\n\n  const components = {\n    body: {\n      row: EditableRow,\n      cell: EditableCell,\n    },\n  };\n\n\n  useEffect(() => {\n    history.current.addHandler({\n      deleteSentence: (id: number) => {\n        setDeleteSentences((dis) => {\n          return [...dis, {id}];\n        });\n      },\n      recoverSentence: (id: number) => {\n        setDeleteSentences((dis) => {\n          return dis.filter(d => d.id !== id);\n        });\n      }\n    });\n    history.current.addHandler({\n      actionForHandleSaveNext: (obj: IChangePhrase) => {\n        actionForHandleSaveNext(obj);\n      },\n      actionForHandleSavePrev: (obj: IChangePhrase) => {\n        actionForHandleSavePrev(obj);\n      }\n    });\n\n  }, []);\n\n  const handleSave = async (row: ISentence) => {\n    const index = sentences.findIndex(p => p.id === row.id);\n    if(sentences[index].sentence === row.sentence && sentences[index].ru === row.ru) return ;\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    cache.current[row.id] = row;\n    history.current.addAction<IChangePhrase>({\n      payload: {\n        oldValue: {...sentences[index]},\n        newValue: {...row}\n      },\n      action: 'actionForHandleSaveNext'\n    });\n    row.isNeededTranslate = !row.isNeededTranslate;\n    sentences[index] = row;\n    setSentences(p => {\n      return [...p];\n    })\n  };\n\n\n  const actionForHandleSaveNext = (obj: IChangePhrase) => {\n    basicActionForHandleSave(obj.newValue);\n  };\n  const actionForHandleSavePrev = (obj: IChangePhrase) => {\n    basicActionForHandleSave(obj.oldValue);\n  };\n\n  const basicActionForHandleSave = async (row: ISentence) => {\n    setSentences(sentences => {\n      cache.current[row.id] = row;\n      const index = sentences.findIndex(p => p.id === row.id);\n      sentences[index] = row;\n      return [...sentences];\n    })\n\n  };\n\n  const handleDelete = (row: IPhrase) => {\n    setDeleteSentences(p => {\n      return [...p, {id: row.id}];\n    });\n    history.current.addAction({\n      action: 'deleteSentence',\n      payload: row.id\n    });\n\n    setIsCreate(false);\n  };\n\n  const handleUpdate = () => {\n    mutationUpdate({\n      variables: {\n        data: {\n          entityId: props.entityId,\n          disconnectSentences: deleteSentences.map(d => d.id),\n          sentences: Object.values(cache.current).map(p => ({\n            id: p.id,\n            ru: p.ru,\n            sentence: p.sentence\n          }))\n        }\n      }\n    }).then(() => {\n      cache.current = {};\n      setIsCreate(true);\n      setIsUpdate(true);\n      client.writeData({\n        data: {\n          step: 3\n        }\n      });\n    })\n  };\n\n  const handleAdd = async (value: ISentence) => {\n    client.writeData({\n      data: {\n        step: 2\n      }\n    });\n    const res =  await mutationAddSentence({\n      variables: {\n        sentence: value.sentence,\n        ru: value.ru,\n        entityId: props.entityId,\n      }\n    });\n    const sentences: ISentence = res.data.upsertSentence;\n    setSentences(p => {\n      return [...p, sentences]\n    });\n  };\n\n  const handleTranslate = async (value: ISentence) => {\n    const res = await mutationTranslate({\n      variables: {\n        sentence: value.sentence,\n        entity: props.title\n      }\n    });\n    if(res.data === null) {\n      const index = sentences.findIndex(p => p.id === value.id);\n      value.isNeededTranslate = false;\n      sentences[index] = value;\n      setSentences(p => {\n        return [...p];\n      });\n      return;\n    }\n    const sentence: ISentence = res.data.translateSentence;\n    value.ru = sentence.ru;\n    await handleSave(value);\n  };\n\n  const filterSentences = !isShowDeleted ?\n    sentences.filter(p => !deleteSentences.some(d => d.id === p.id)) : sentences;\n\n  function handleReturn(id: number) {\n    setDeleteSentences(sentences => {\n      return sentences.filter(p => p.id !== id);\n    });\n\n    history.current.addAction({\n      action: 'recoverSentence',\n      payload: id\n    });\n    setIsCreate(false);\n  }\n  return (\n    <Table\n      bordered={false}\n      showHeader={false}\n      components={components}\n      dataSource={filterSentences}\n      pagination={false}\n      size={'small'}\n      rowClassName={() => 'editable-row'}\n      title={() => (\n        <BasicTitleTable\n          onAdd={handleAdd}\n          onUpdate={handleUpdate}\n          loadingUpdate={loading}\n          disabled={isCreate ? isEmptyObject(cache.current) : false}\n          entity={props.title}\n          isCreate={isUpdate}\n          onNext={history.current.next}\n          onPrev={history.current.prev}\n          disabledPrev={!history.current.isPrev()}\n          disabledNext={!history.current.isNext()}\n          onChangeShowDeleted={setShowDeleted}\n          addComponent={ContentPopoverSentence}\n          btnTitle=\"Add sentence\"\n        />\n      )}\n    >\n      <Column\n        title=\"Sentence\"\n        dataIndex=\"sentence\"\n        key=\"sentence\"\n        width=\"40%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          extra: true,\n          dataIndex: 'sentence',\n          title: 'Sentence',\n          handleSave: handleSave,\n          handleTranslate\n        })}\n      />\n      <Column\n        title=\"RU\"\n        dataIndex=\"ru\"\n        key=\"ru\"\n        width=\"45%\"\n        onCell={(record) => ({\n          record,\n          editable: true,\n          dataIndex: 'ru',\n          title: 'RU',\n          handleSave: handleSave,\n        })}\n      />\n      <Column\n        title=\"Operation\"\n        dataIndex=\"operation\"\n        render={(text: any, record: IPhrase) => {\n          if(deleteSentences.some(d => d.id === record.id)) {\n            return (\n              <Button\n                size=\"small\"\n                shape=\"circle-outline\"\n                icon={<RedoOutlined/>}\n                onClick={() => handleReturn(record.id)}\n              />\n            )\n          }\n          return (\n            <Button\n              danger\n              size=\"small\"\n              shape=\"circle\"\n              icon={<DeleteOutlined />}\n              onClick={() => handleDelete({ ...record })}\n            />\n          );\n        }}\n      />\n    </Table>\n  );\n};\n\nexport default TableEditSentence;\n","import React from 'react';\nimport { IEntity } from '../../typings/IEntity';\nimport {Collapse} from 'antd';\nimport TableEditWords from './TableEditWords/TableEditWords';\nimport TableEditPhrase from './TableEditPhrase/TableEditPhrase';\nimport { CaretRightOutlined } from '@ant-design/icons';\nimport TableEditSentence from './TableEditSentence/TableEditSentence';\n\nconst {Panel} = Collapse;\n\ninterface IEntityEditCardProps {\n  entity: IEntity;\n}\n\nconst EntityEditCard = ({ entity }: IEntityEditCardProps) => {\n  return (\n    <Collapse\n      bordered={false}\n      defaultActiveKey={['1']}\n      expandIcon={({ isActive }) => <CaretRightOutlined rotate={isActive ? -90 : 0} />}\n      className=\"site-collapse-custom-collapse\"\n      expandIconPosition={'right'}\n    >\n      <Panel header=\"Words\" key=\"1\" className=\"site-collapse-custom-panel\">\n        <TableEditWords\n          words={entity.words}\n          disconnectWords={entity.disconnectWords}\n          entityId={entity.id}\n          title={entity.title}\n          isCreate={entity.isCreate}\n        />\n      </Panel>\n      <Panel header=\"Phrases\" key=\"2\" className=\"site-collapse-custom-panel\">\n        <TableEditPhrase\n          phrases={entity.phrases}\n          disconnectPhrases={entity.disconnectPhrases}\n          entityId={entity.id}\n          title={entity.title}\n          isCreate={entity.isCreate}\n        />\n      </Panel>\n      <Panel header=\"Sentences\" key=\"3\" className=\"site-collapse-custom-panel\">\n        <TableEditSentence\n          sentences={entity.sentences}\n          disconnectSentences={entity.disconnectSentences}\n          entityId={entity.id}\n          title={entity.title}\n          isCreate={entity.isCreate}\n        />\n      </Panel>\n    </Collapse>\n  );\n};\n\nexport default EntityEditCard;\n","import React, {useEffect, useState} from 'react';\nimport {RouteComponentProps} from 'react-router-dom';\nimport {Card, Col, Input, Row, Steps} from 'antd';\nimport {useApolloClient, useMutation, useQuery} from '@apollo/react-hooks';\nimport {IEntity} from '../typings/IEntity';\nimport EntityEditCard from '../components/CreatePage/EntityEditCard';\nimport {MUTATION} from '../graphql/mutation';\nimport { FontSizeOutlined,EditOutlined, CrownOutlined, CloudUploadOutlined } from '@ant-design/icons';\nimport QUERIES from '../graphql/queries';\n\nconst {Search} = Input;\nconst {Step} = Steps;\n\nconst CreatePage = (props: RouteComponentProps<any, any, any>) => {\n  const [entities, setEntities] = useState([] as IEntity[]);\n  const [mutationGetEntities] = useMutation(MUTATION.GET_ENTITIES_BY_WORD);\n  const {} = useQuery(QUERIES.getEntity, {\n    skip: !props.location.state,\n    variables: {\n      id: props.location.state && props.location.state.id\n    },\n    onCompleted: entity => {\n      console.log(entity)\n      if(entity)\n        setEntities([entity.getEntity]);\n    }\n  });\n  const client = useApolloClient();\n  const {data: step} = useQuery(QUERIES.GET_STEP_CLIENT);\n  const {data} = useQuery(QUERIES.GET_COUNT_ENTITIES);\n  const [countEntities, setCountEntities] = useState(data ? data.getCountEntities : 1);\n\n  const handleFinish = async (search: string) => {\n    const res = await mutationGetEntities({\n      variables: {\n        word: search.toLowerCase(),\n      }\n    });\n    if (res.data) {\n      setEntities(res.data.getEntitiesByWord);\n      client.writeData({\n        data: {\n          step: 1\n        }\n      })\n    }\n  };\n\n  useEffect(() => {\n    client.writeData({\n      data: {\n        step: 0\n      }\n    })\n  }, []);\n\n  useEffect(() => {\n    if(step.step === 3) {\n      setTimeout(() => {\n        setCountEntities(5);\n      }, 2000);\n    }\n  }, [step.step]);\n\n  const isSteps = entities.length > 0 ? !entities[0].isCreate : true;\n  return (\n    <Row>\n      <Col span={24}>\n        <Card size={'small'}>\n          {\n            isSteps && countEntities <= 3 && (\n              <Steps current={step.step}>\n                <Step icon={<FontSizeOutlined />} title=\"First word\" description=\"Input word for search\"/>\n                <Step icon={<EditOutlined />} title=\"Update\" description=\"Do changes\"/>\n                <Step icon={<CloudUploadOutlined />} title=\"Save\" description=\"Click on button by 'Create'\"/>\n                <Step icon={<CrownOutlined />} title=\"Keanu Reeves said: \" description=\"You are amazing!\"/>\n              </Steps>\n            )\n          }\n          <Search\n            placeholder=\"Input text for create entity of word\"\n            enterButton=\"Search\"\n            size=\"large\"\n            onSearch={handleFinish}\n          />\n        </Card>\n      </Col>\n      {\n        entities.map((e: any, index: any) => {\n          return (\n            <Col flex=\"1\" key={e.id || index}>\n              <EntityEditCard entity={e}/>\n            </Col>\n          )\n        })\n      }\n    </Row>\n  )\n};\n\nexport default CreatePage;\n","import React, {useState} from 'react';\nimport { Layout, Menu } from 'antd';\nimport {RouteComponentProps, Route, Switch} from 'react-router-dom';\nimport {\n  UserOutlined,\n  PieChartOutlined,\n  LogoutOutlined,\n  PlusCircleOutlined\n} from '@ant-design/icons';\nimport css from './Style.module.css';\nimport withProtected from '../useHooks/withProtected';\nimport {useApolloClient, useQuery} from '@apollo/react-hooks';\nimport {useHistory} from 'react-router';\nimport {useCurrentUser} from '../useHooks/useCurrentUser';\nimport UsersPage from './UsersPage';\nimport WordsPage from './WordsPage';\nimport NotFoundPage from './NotFoundPage';\nimport CreatePage from './CreatePage';\n\nconst { Content, Sider } = Layout;\n\nconst LayoutPage = (props: RouteComponentProps<any>) => {\n  let itemKey: string = props.match.params['item'] || 'words';\n  const client = useApolloClient();\n  const history = useHistory();\n  const {isAdmin, user} = useCurrentUser();\n  const [collapsed, setCollapsed] = useState(false);\n  const onCollapse = (collapsed: boolean) => {\n    setCollapsed(collapsed);\n  };\n\n  const handleExit = async () => {\n    await client.cache.reset();\n    localStorage.removeItem('token');\n    history.replace('/')\n  };\n\n  return (\n    <Layout style={{ minHeight: '100vh' }} >\n      <Sider collapsible collapsed={collapsed} onCollapse={onCollapse} theme={'light'}>\n        <div className={css.profile}>\n          {user && (`${user.name} ${user.lastName}`)}\n        </div>\n        <Menu theme=\"light\" selectedKeys={[itemKey]} mode=\"inline\">\n          <Menu.Item key=\"create\" icon={<PlusCircleOutlined />} onClick={() => props.history.push('/main/create')}>\n            Create\n          </Menu.Item>\n          <Menu.Item key=\"words\" icon={<PieChartOutlined />} onClick={() => props.history.push('/main/words')}>\n            Words\n          </Menu.Item>\n          {\n            isAdmin && (\n              <Menu.Item key=\"users\" icon={<UserOutlined />} onClick={() => props.history.push('/main/users')}>\n                Users\n              </Menu.Item>\n            )\n          }\n          <Menu.Item key=\"exit\" icon={<LogoutOutlined />} onClick={handleExit}>\n            Exit\n          </Menu.Item>\n\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Content>\n          <Switch>\n            <Route path=\"/main/users\" component={UsersPage} />\n            <Route path=\"/main/words\" component={WordsPage} />\n            <Route path=\"/main/create\" component={CreatePage} />\n            <Route component={NotFoundPage} />\n          </Switch>\n        </Content>\n      </Layout>\n    </Layout>\n  );\n};\n\nexport default withProtected(LayoutPage);\n","import React, {useEffect} from 'react';\nimport { notification } from 'antd';\nimport {BrowserRouter, Route, Switch, HashRouter} from 'react-router-dom';\nimport AuthPage from './pages/AuthPage';\nimport LayoutPage from './pages/LayoutPage';\nimport {ApolloProvider, useMutation, useQuery,} from '@apollo/react-hooks';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\nimport QUERIES from './graphql/queries';\nimport { ApolloLink, from } from '@apollo/client';\nimport { HttpLink } from 'apollo-link-http';\nimport { onError } from \"@apollo/link-error\";\nimport {IErrorDev, IErrorProd} from './typings/IError';\nimport {ApolloClient, gql} from 'apollo-boost';\nimport {isDevelopment} from './utils/env';\nimport FRAGMENTS from './graphql/fragments';\n\nconsole.log(process.env)\nconst linkError = onError(({ graphQLErrors = [], networkError, operation, forward, response }) => {\n  console.log({ graphQLErrors, networkError, operation, forward, response });\n  console.log(process.env.NODE_ENV);\n  if(isDevelopment) {\n    graphQLErrors.map((e: IErrorDev | any) => {\n      notification.error({\n        message: e.message\n      })\n    })\n  }\n  else {\n    graphQLErrors.map((e: IErrorProd | any) => {\n      notification.error({\n        message: e.message\n      })\n    })\n  }\n});\n\nconst authLink: any = new ApolloLink((operation, forward) => {\n  operation.setContext(({ headers }: any) => ({ headers: {\n      authorization: `Bearer ${localStorage.getItem('token')}`, // however you get your token\n      ...headers\n    }}));\n  return forward(operation);\n});\nconst link = new HttpLink({\n  uri: isDevelopment ? 'http://localhost:3005/graphql' : 'https://englishnew.herokuapp.com/graphql',\n});\n\nconst cache: any = new InMemoryCache();\nconst client = new ApolloClient({\n  cache: cache,\n  link: from([\n    authLink,\n    linkError,\n    link,\n  ]) as any,\n  connectToDevTools: true,\n  defaultOptions: {\n    mutate: {\n      errorPolicy: 'ignore'\n    },\n    query: {\n      errorPolicy: 'ignore'\n    }\n  },\n  resolvers: {\n    Query: {\n      getEntity: (_, {id}, {cache, getCacheKey}) => {\n        const res = cache.readFragment({\n          id: getCacheKey({__typename: \"Entity\", id}),\n          fragment: gql`\n              fragment entity on Entity {\n                  ${FRAGMENTS.entity}\n              }\n          `\n        });\n        return res;\n      },\n    }\n  },\n});\n\ncache.writeData({\n  data: {\n    isAuth: false,\n    currentUser: null,\n    step: 0\n  },\n});\nfunction App() {\n  const Content = () => {\n    const [refresh] = useMutation(QUERIES.REFRESH_USER, {\n      update: (proxy, mutationResult) => {\n        proxy.writeData({\n          data: {\n            isAuth: true,\n            currentUser: mutationResult.data.refreshUser\n          }\n        });\n      },\n    });\n\n    useEffect(() => {\n      refresh();\n    }, []);\n\n    return (\n      <div className=\"App\">\n          <Switch>\n            <Route exact path=\"/\" component={AuthPage}/>\n            <Route path=\"/main/:item?\" component={LayoutPage}/>\n          </Switch>\n      </div>\n    )\n  };\n\n  return (\n    <ApolloProvider client={client as any}>\n      <HashRouter basename=\"/dictionary\">\n        <Content/>\n      </HashRouter>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'antd/dist/antd.css';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}